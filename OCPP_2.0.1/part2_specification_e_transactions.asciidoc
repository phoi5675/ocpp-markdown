[[e_transactions]]
= E. Transactions
:!chapter-number:

<<<

:sectnums:
:sectnumlevels: 5
== Introduction

This Functional Block describes the OCPP Transaction related functionalities. Transactions are started/stopped on the Charging Station. Note that at most one transaction can be active on an EVSE at any point in time.

[[flexible_transaction_start_stop]]
=== Flexible transaction start/stop

To support as many business cases as possible, and to prevent sending too many messages when not needed for certain business cases, OCPP 2.0.1 supports flexible configuration of the start and stop of a transaction.

For this the following Configuration Variables are defined:

- <<tx_start_point,`TxStartPoint`>>
- <<tx_stop_point,`TxStopPoint`>>

These 2 Configuration Variables make it possible to define when a transaction should start: <<transaction_event_request,TransactionEventRequest>> (eventType = Started) and when a transaction should stop: <<transaction_event_request,TransactionEventRequest>> (eventType = Ended)

With the introduction in OCPP 2.0.1 of flexible start/stop points of a transaction, it is important to provide a definition of a transaction.

****
A transaction is the portion of a charging session that is recorded by CSMS. It is a single time frame with a start and stop time. This information can be used by the operator for billing.
****

It is up to the Charging Station Operator to define the values for TxStartPoint and TxStopPoint (unless these are preset as read-only values in the charging station), but not all combinations make sense.

The following three variants are most common:

- If connection time is billed, then start and stop points should be `EVConnected`.
- If time of use is billed, then the start points should be `EVConnected`, Authorized and the stop point `EVConnected`. +
(Such that upon authorization first, the charger is already seen as 'in use').
- If charging time is billed, then start and stop points should be `PowerPathClosed`. (This starts as soon as charger is ready to provide power and stops when authorization is revoked or vehicle disconnected.) Pauses in between (i.e. SuspendedEV(SE)) do not end the transaction. Billing on the amount of energy or power can be done based on the meter values that are collected during the transaction.

[cols="^.^1s,10",%autowidth.stretch]
|===
|WARNING
  |Certain combinations of start and stop points can lead to a situation where a started transaction is never stopped. For example: when the start point is `ParkingBayOccupancy` and the stop point is `EVConnected`, then a transaction starts when an EV occupies the parking bay, but when the user never connects the EV, but simply drives away, then the transaction will remain open, because `ParkingBayOccupancy` is not configured as a stop point.
|===

==== Readonly or Read/Write

OCPP 2.0.1 supports 2 options for the transaction start/stop Configuration Variables. They can either be: RW (read-write) or R (read-only).

When a Charging Station supports RW, the CSO can configure the settings. To support all possible settings, the software in the Charging Station has to be more flexible.

With only R, the settings are fixed in firmware, the CSO can read the settings to learn how a Charging Station will behave, but cannot configure it. This makes for a simpler implementation. When the needs of the target market are well known there might be no need o implement the flexible model.

==== OCPP 1.6 Transaction compatibility

If transactions similar to OCPP 1.6 are wanted, this section describes how the transaction start and stop point should be configured.

In OCPP 1.x the moment a Charging Station should send StartTransaction.req was not defined very precise, generally this was done when the Charging Station was ready to deliver energy: cable is connected and user is authorized.

To support similar transaction start behaviour, the value: _PowerPathClosed_ is to be used. (and for completeness, also add: _EnergyTransfer_)

.The settings for an OCPP 1.6 compatible transaction
[cols="<.^2,<.^8",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|Configuration Variable             |Values

|<<tx_start_point,`TxStartPoint`>>  |PowerPathClosed
|<<tx_stop_point,`TxStopPoint`>>    |EVConnected, Authorized
|===

For stop behavior the _ParkingBayOccupancy_ should not be added, OCPP 1.6 did not support this, and in case of a dual socket charging station where somebody is using the 'opposite' connector, the transaction would then be stopped, while the EV could still be charging.

=== TransactionId generation

New in OCPP 2.0.1: Transaction IDs are now generated by the Charging Station.

In OCPP 1.x this was done by the CSMS. This had some drawbacks. When a Charging Station was offline it had a transaction which did not have a transactionId.

The TransactionId generated by a Charging Station has to be unique for this Charging Station. During the lifetime of a Charging Station it should never use the same TransactionId twice. Also when the Charging Station is rebooted, power cycled, firmware updated, repaired etc.

OCPP does not specify an algorithm to use, but it is RECOMMENDED to use UUIDs.

[[delivering_transaction_related_messages]]
=== Delivering transaction-related messages

The primary purpose of <<transaction_event_request,TransactionEventRequest>> messages is to give the CSMS the information that it will later use to bill the transaction. To be sure that the CSMS receives all the necessary information for billing a transaction, OCPP uses two mechanisms: _retrying_ and _sequence numbers_.

==== Retrying

The Charging Station sends <<transaction_event_request,TransactionEventRequest>> messages to the CSMS System as soon as possible after the events they report on have occurred.

If the Charging Station is offline, or if an error occurs processing the message in transport, the CSMS will be missing billing information. In order to repair the missing information in the CSMS, the Charging Station should retry to deliver this information. +
When the Charging Station fails to receive a <<transaction_event_response,TransactionEventResponse>> for a <<transaction_event_request,TransactionEventRequest>> message within the <<message_timeouts,message timeout period>>, the Charging Station should follow the retry procedure described in use case <<e13_transaction_related_message_not_accepted_by_csms,E13 - Transaction-related message not accepted by CSMS>>.

==== Sequence numbers

When delivery of <<transaction_event_request,TransactionEventRequest>> messages fails and will be retried later, the result is that <<transaction_event_request,TransactionEventRequest>> messages may arrive in the CSMS in a different order from the one in which the transaction events occurred at the Charging Station. This in turn would make it difficult for the CSMS to know if it received all <<transaction_event_request,TransactionEventRequest>> messages about a transaction, which the CSMS may want to know before it starts billing the transaction.

In order to make it possible to know that all <<transaction_event_request,TransactionEventRequest>> messages about a transaction were received, OCPP uses _sequence numbers_ in TransactionEventRequest messages. For every EVSE, the Charging Station maintains a counter of the number of <<transaction_event_request,TransactionEventRequest>> messages generated about that EVSE. When generating a new <<transaction_event_request,TransactionEventRequest>> message, the Charging Station includes the current value of the EVSEâ€™s counter in the **seqNo** field of the request, and then increments the counter. With this mechanism, a CSMS can check if it has full information about a transaction by checking that:

- It received a <<transaction_event_request,TransactionEventRequest>> about the start of the transaction, with a **seqNo** _a_
- It received a <<transaction_event_request,TransactionEventRequest>> about the stop of the transaction, with a **seqNo** _o_ greater than _a_.
- It received a <<transaction_event_request,TransactionEventRequest>> about the transaction with **seqNo** _n_ for every integer _n_ between _a_ and _o_

[[sequence_number_generation]]
===== Sequence number generation

_This section is normative_.

When a transaction starts, the Charging Station SHOULD set the _seqNo_ field for the <<transaction_event_request,TransactionEventRequest>> message to 0. +
(Implementations with a continuously increasing _seqNo_ are still allowed.)

After each <<transaction_event_request,TransactionEventRequest>> Charging Station SHALL increase the _seqNo_ by 1.

=== Authorization

To simplify the use cases in this functional block, the way an EV Driver is authorized is not part of these use cases. It will simply be called something like: "User authorization successful" or "The EV Driver is authorized by the Charging Station and/or CSMS.". This may be any way of authorizing an EV Driver. See functional block: <<authorization,C Authorization>> for all the options and requirements for authorization.

=== Clarification for optional fields in TransactionEventRequest

_This section is informative._

The TransactionEventRequest contains several optional fields. Some of these fields should only be sent once and should not be repeated in every TransactionEventRequest. The following summary points to the requirements related to these optional fields.

**_evse_**

(E01.FR.16) The field _evse_ is only provided in the first TransactionEventRequest that occurs after the EV has connected. It is not repeated in all future TransactionEventRequests.

**_idToken_**

(E03.FR.01) The field _idToken_ is provided once in the first TransactionEventRequest that occurs after the transaction has been authorized. +
(E07.FR.02) The field _idToken_ is provided once in the TransactionEventRequest that occurs when the authorization of the transaction has been ended. +
(C12.FR.02) The above is also the case when authorization was granted because the idToken is present in the authorization cache with a `Accepted` status. +
(F02.FR.05): The above is also the case when the idToken is provided by a RequestStartTransactionRequest.

**_reservationId_**

(E03.FR.03/H01.FR.15) The field _reservationId_ is only provided in the first TransactionEventRequest that occurs when the transaction has been authorized by the idToken for which a reservation existed in the charging station. +
(F02.FR.06) The above is also the case when the idToken is provided by a RequestStartTransactionRequest.

**_meterValue_**

(E02.FR.09) The TransactionEventRequest(_eventType_=`Started`) must contain the meter values that have been configured in SampledDataCtrlr.TxStartedMeasurands. +
(E02.FR.10) A TransactionEventRequest(_eventType_=`Updated`) must be sent at every interval configured in SampledDataCtrlr.TxUpdatedInterval and contain the meter values that have been configured in SampledDataCtrlr.TxUpdatedMeasurands. If TxUpdatedMeasurands == 0, then no meter values are sent. +
(E06.FR.11) The TransactionEventRequest(_eventType_=`Ended`) must contain the meter values that have been configured in SampledDataCtrlr.TxEndedMeasurands. If SampledDataCtrlr.TxEndedInterval == 0, then only the values taken at start and end of the transaction are included.

**_transactionInfo.chargingState_**

(E02.FR.13) Whenever the charging state changes, the Charging Station must send a TransactionEventRequest containing _chargingState_. This implies that a TransactionEventRequest(_eventType_=`Started`) always has a _chargingState_, because the state goes from non-existent to a value. +
If the change of charging state is the only event, then TransactionEventRequest has a _triggerReason_ = `ChargingStateChanged`, but if a change in charging state occurs together with other events, such as those represented by _triggerReason_ = `CablePluggedIn` or (`Stop`)`Authorized`, for example, then _chargingState_ can simply be reported as part of that message. +
A TransactionEventRequest with _triggerReason_ = `ChargingStateChanged` must contain _chargingState_.

**_transactionInfo.stoppedReason_**

(C15.FR.04, E05.FR.10, E05.FR.08/09, E07.FR.06) The _stoppedReason_ must be provided in the TransactionEventRequest(_eventType_=`Ended`), unless the value is `Local`, in which case it may be omitted. +
(F03.FR.03, F03.FR.10, F04.FR.03) The above also applies to transactions that are stopped by a RequestStopTransactionRequest, however in this case the _stoppedReason_ value must be `Remote`.

**_transactionInfo.remoteStartId_**

(C05.FR.03, F01.FR.25, F02.FR.01) The _remoteStartId_ must be sent in the next TransactionEventRequest after the RequestStartTransactionRequest with the same _remoteStartId_.

<<<

== Use cases & Requirements

=== OCPP transaction mechanism

:sectnums!:
[[e01_start_transaction_options]]
=== E01 - Start Transaction options

.E01 - Start Transaction
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|No. |Type            |Description

|1   |Name            |Start Transaction options
|2   |ID              |E01
|{nbsp} d|_Functional block_  |E. Transactions
|3   |Objective(s)    |To inform the CSMS that a transaction at the Charging Station has started.
|4   |Description     |This use case describes the different moments a Charging Station can start a transaction (send <<transaction_event_request,TransactionEventRequest>> with <<transaction_event_enum_type,eventType = Started>>), depending on the configuration of the Charging Station.
|5   d|_Actors_       |Charging Station, CSMS, EV Driver
d|S1 d|_Scenario objective_ |**To start a transaction when a parking bay occupancy detector detects an "EV".**
|{nbsp} d|_Scenario description_ 
  |**1.** The EV Driver parks his "EV" at a Charging Station with a parking bay occupancy detector, which triggers the detector. +
  **2.** The Charging Station sends a <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Started>>) notifying the CSMS about a transaction that has started (even when the driver is not yet known). +
  **3.** The CSMS responds with a TransactionEventResponse, confirming that the <<transaction_event_request,TransactionEventRequest>> was received.
|{nbsp} |Prerequisite(s) 
  |No transaction is ongoing on the EVSE. +
  Configuration Variable: <<tx_start_point,`TxStartPoint`>> contains: <<tx_start_stop_point_values,ParkingBayOccupancy>>
|{nbsp} |Postcondition(s) 
  |**Successful postcondition:** +
  The transaction is ongoing and the CSMS is _Successfully_ informed.

  **Failure postcondition:**
  The transaction is _not_ ongoing, _or_ +
  The CSMS is _not_ informed.
|===

.Sequence Diagram: Start Transaction options - ParkingBayOccupancy
image::part2/images/figure_39.svg[Sequence Diagram: Start Transaction options - ParkingBayOccupancy]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|S2  d|_Scenario objective_ |To start a transaction when communication is set up between the Charging Station and an EV +
  (for example: cable plugged in correctly on both sides)
|{nbsp} d|_Scenario description_ 
  |**1.** The Charging Station sets up a connection with the EV. +
  **2.** The Charging Station sends a <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Started>>) notifying the CSMS about a transaction that has started (even when the driver is not yet known). +
  **3.** The CSMS responds with a <<transaction_event_response,TransactionEventResponse>>, confirming that the <<transaction_event_request,TransactionEventRequest>> was received.
|{nbsp} |Prerequisite(s) 
  |No transaction is ongoing on the EVSE. +
  Configuration Variable: <<tx_start_point,`TxStartPoint`>> contains: <<tx_start_stop_point_values,EVConnected>> (Not: <<tx_start_stop_point_values,ParkingBayOccupancy>>)
|{nbsp} |Postcondition(s) 
  |**Successful postcondition:** +
  The transaction is ongoing and the CSMS is _Successfully_ informed.

  **Failure postcondition:** +
  The transaction is _not_ ongoing, _or_ +
  The CSMS is _not_ informed.
|===

.Sequence Diagram: Start Transaction options - EVConnected
image::part2/images/figure_40.svg[Sequence Diagram: Start Transaction options - EVConnected]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|S3  d|_Scenario objective_ |To start a transaction when the EV Driver is authorised to charge.

|{nbsp} d|_Scenario description_ 
  |**1.** The EV Driver provides his identification +
  **2.** The Charging Station validates the provided identification (for example via the Authorization Cache or an AuthorizeRequest). +
  **3.** The Charging Station sends a <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Started>>) notifying the CSMS about a transaction that has started. +
  **4.** The CSMS responds with a <<transaction_event_response,TransactionEventResponse>>, confirming that the <<transaction_event_request,TransactionEventRequest>> was received.
|{nbsp} |Prerequisite(s) 
  |No transaction is ongoing on the EVSE. +
  Configuration Variable: <<tx_start_point,`TxStartPoint`>> contains: <<tx_start_stop_point_values,Authorized>> (Not: <<tx_start_stop_point_values,ParkingBayOccupancy>>).
|{nbsp} |Postcondition(s) 
  |**Successful postcondition:** +
  The transaction is ongoing and the CSMS is _Successfully_ informed.

  **Failure postcondition:** +
  The transaction is _not_ ongoing, _or_ +
  The CSMS is _not_ informed.
|===

.Sequence Diagram: Start Transaction options - Authorized
image::part2/images/figure_41.svg[Sequence Diagram: Start Transaction options - Authorized]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|S4  d|_Scenario objective_ |To start a transaction when the meter has provided the first signed meter values before starting
with charging.

|{nbsp} d|_Scenario description_ 
  |**1.** The EV Driver plugs in the cable at the Charging Station and the EV. +
  **2.** The Charging Station request the Meter for a signed value. +
  **3**. The Meter provides a signed value (this might take some time). +
  **4.** The Charging Station sends a <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Started>>) notifying the CSMS about a transaction that has started. +
  **5.** The CSMS responds with a <<transaction_event_response,TransactionEventResponse>>, confirming that the <<transaction_event_request,TransactionEventRequest>> was received.
|{nbsp} |Prerequisite(s) 
  |No transaction is ongoing on the EVSE. +
  Configuration Variable: <<tx_start_point,`TxStartPoint`>> contains: <<tx_start_stop_point_values,DataSigned>> (Not: <<tx_start_stop_point_values,ParkingBayOccupancy, EVConnected or Authorized>>). +
  The Charging Station has a meter that can sign measured values +
  Configuration Variable: <<sampled_data_sign_readings,`SampledDataSignReadings`>> set to _true_.
|{nbsp} |Postcondition(s) 
  |**Successful postcondition:** +
  The transaction is ongoing and the CSMS is _Successfully_ informed.

  **Failure postcondition:** +
  The transaction is _not_ ongoing, _or_ +
  The CSMS is _not_ informed.
|===

.Sequence Diagram: Start Transaction options - DataSigned
image::part2/images/figure_42.svg[Sequence Diagram: Start Transaction options - DataSigned]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|S5  d|_Scenario objective_ |To start a transaction when all preconditions have been met to start charging (authorized and connected), but energy does not yet have to be transfered.

|{nbsp} d|_Scenario description_ 
  |**1.** The EV Driver is authorized by the Charging Station and/or CSMS. +
  **2.** The Charging Station is connected to the EV. +
  **3.** The Charging Station sends a <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Started>>) notifying the CSMS about a transaction that has started. +
  **4.** The CSMS responds with a <<transaction_event_response,TransactionEventResponse>>, confirming that the <<transaction_event_request,TransactionEventRequest>> was received.
|{nbsp} |Prerequisite(s) 
  |No transaction is ongoing on the EVSE. +
  Configuration Variable: <<tx_start_point,`TxStartPoint`>> contains: <<tx_start_stop_point_values,PowerPathClosed>> (Not: <<tx_start_stop_point_values,ParkingBayOccupancy, EVConnected, Authorized or DataSigned>>). +
  Charging Cable plugged in.
|{nbsp} |Postcondition(s) 
  |**Successful postcondition:** +
  The transaction is ongoing and the CSMS is _Successfully_ informed.

  **Failure postcondition:** +
  The transaction is _not_ ongoing, _or_ +
  The CSMS is _not_ informed.
|===

.Sequence Diagram: Start Transaction options - PowerPathClosed
image::part2/images/figure_43.svg[Sequence Diagram: Start Transaction options - PowerPathClosed]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|S6  d|_Scenario objective_ |To start a transaction when the energy flow starts.

|{nbsp} d|_Scenario description_ 
  |**1.** The EV Driver is authorized by the Charging Station and/or CSMS. +
  **2.** The Charging Station closes the power relay. +
  **3.** The EV starts charging, energy flow starts. +
  **4.** The Charging Station sends a <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Started>>) notifying the CSMS about a transaction that has started. +
  **5.** The CSMS responds with a <<transaction_event_response,TransactionEventResponse>>, confirming that the <<transaction_event_request,TransactionEventRequest>> was received.
|{nbsp} |Prerequisite(s) |Configuration Variable: <<tx_start_point,`TxStartPoint`>> contains: <<tx_start_stop_point_values,EnergyTransfer>> (Not: <<tx_start_stop_point_values,ParkingBayOccupancy, EVConnected, Authorized, DataSigned or PowerPathClosed>>).
|{nbsp} |Postcondition(s) 
  |**Successful postcondition:** +
  The transaction is ongoing and the CSMS is _Successfully_ informed.

  **Failure postcondition:** +
  The transaction is _not_ ongoing, _or_ +
  The CSMS is _not_ informed.
|===

.Sequence Diagram: Start Transaction options - EnergyTransfer
image::part2/images/figure_44.svg[Sequence Diagram: Start Transaction options - EnergyTransfer]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7   |Error handling  |n/a
|8   |Remark(s)       |n/a
|===

==== E01 - Start Transaction options - Requirements

.E01 - Requirements
[cols="^.^2,<.^5,<.^6",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID         |Precondition         |Requirement definition

|E01.FR.01  |<<tx_start_point,`TxStartPoint`>> contains: +
  <<tx_start_stop_point_values,ParkingBayOccupancy>> +
  AND +
  Parking Bay Detector detects an "EV" +
  AND +
  No transaction has started yet
    |The Charging Station SHALL start a transaction and send a <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Started>>) to the CSMS.
|E01.FR.02  |<<tx_start_point,`TxStartPoint`>> contains: EVConnected +
  AND +
  The Charging Station has a connection +
  with the EV +
  AND +
  No transaction has started yet on this + 
  EVSE
    |The Charging Station SHALL start a transaction and send a <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Started>>) to the CSMS.
|E01.FR.03  |<<tx_start_point,`TxStartPoint`>> contains: Authorized +
  AND +
  The EV Driver is authorized +
  AND +
  No transaction has started yet
    |The Charging Station SHALL start a transaction and send a <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Started>>) to the CSMS.
|E01.FR.04  |<<tx_start_point,`TxStartPoint`>> contains: DataSigned +
  AND +
  The Charging Station has a meter that can +
  sign measured values +
  AND +
  Configuration Variable: +
  <<sampled_data_sign_readings,`SampledDataSignReadings`>> set to _true_. +
  AND +
  The Charging Station has retrieved a +
  signed meter value +
  AND +
  No transaction has started yet
    |The Charging Station SHALL start a transaction and send a <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Started>>) to the CSMS.
|E01.FR.05  |<<tx_start_point,`TxStartPoint`>> contains: +
  <<tx_start_stop_point_values,PowerPathClosed>> +
  AND +
  The EV Driver is authorized AND +
  The Charging Station has connection with +
  the EV +
  AND +
  No transaction has started yet on this +
  EVSE
    |The Charging Station SHALL start a transaction and send a <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Started>>) to the CSMS.
|E01.FR.06  |<<tx_start_point,`TxStartPoint`>> contains: EnergyTransfer +
  AND +
  Energy flow starts +
  AND +
  No transaction has started yet on this +
  EVSE
    |The Charging Station SHALL start a transaction and send a <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Started>>) to the CSMS.
|E01.FR.07  |When a <<transaction_event_request,TransactionEventRequest>> has to be created
  |The Charging Station SHALL set the messageâ€™s **seqNo** field as specified in <<sequence_number_generation,Sequence Number Generation>>.
|E01.FR.08  |{nbsp}
  |The transactionId generated by the Charging Station MUST be unique for each transaction started by that Charging Station, even when the Charging Station is rebooted, repaired, firmware is updated etc, it SHALL ensure that it never generates the same TransactionId twice.
|E01.FR.09  |When configured to send meter data in the <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Started>>), See: Meter Values - Configuration +
  AND +
  EVSE is known at start of transaction
    |The Charging Station SHALL add the configured measurands to the optional meterValue field with _context_ = `Transaction.Begin` in the <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Started>>) sent to the CSMS to provide more details during the transaction.
|E01.FR.10  |After the EV Driver is authorized for this transaction
  |The Charging Station SHALL send a <<transaction_event_request,TransactionEventRequest>> that contains <<id_token_type,IdTokenType>> information.
|E01.FR.11  |E01.FR.10  
  |The CSMS SHALL verify the validity of the identifier in <<transaction_event_request,TransactionEventRequest>>.
|E01.FR.12  |E01.FR.11
  |The CSMS SHALL send a <<transaction_event_response,TransactionEventResponse>> that includes in _idTokenInfo_ an authorization status value and the _groupIdToken_ if one exists for the _idToken_.
|E01.FR.13  |This transaction ends a reservation
  |The next <<transaction_event_request,TransactionEventRequest>> SHALL contain the reservationId.
|E01.FR.14  |After <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Started>>) has been sent for a specific EVSE and Connector
  |The Charging Station SHALL NOT start another transaction on a different Connector of the same EVSE until this transaction has ended.
|E01.FR.15  |When sending a <<transaction_event_request,TransactionEventRequest>>
  |The Charging Station SHALL set the <<trigger_reason_enum_type,triggerReason>> to inform the CSMS about what triggered the event. What reason to use is described in the description of <<trigger_reason_enum_type,TriggerReasonEnumType>>.
|E01.FR.16  |After the EV is connected with the Charging Station.
  |The next <<transaction_event_request,TransactionEventRequest>> SHALL contain _evse.id_ AND +
  _evse.connectorId_.
|E01.FR.17  |When configured to send meter data in the <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Started>>), See: <<metervalues_configuration,Meter Values - Configuration>> +
  AND +
  EVSE is not known at start of transaction
    |The Charging Station SHALL add the measurands for _eventType_ = `Started` to the optional meterValue field with context `Transaction.Begin` in the <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>) that occurs when charging starts.
|E01.FR.18  |If the charging state changes
  |The Charging Station SHALL send a <<transaction_event_request,TransactionEventRequest>> including the _chargingState_ element.
|E01.FR.19  |When EV temporarily suspends the energy transfer
  |The Charging Station SHOULD send a <<transaction_event_request,TransactionEventRequest>> with _chargingState_ = `SuspendedEV`
|E01.FR.20  |E01.FR.19 AND +
  The Charging Station is not able to handle temporary suspension of energy transfer
    |The Charging Station SHOULD send a <<transaction_event_request,TransactionEventRequest>> with _chargingState_ = `EVConnected`.
|===

[[e02_start_transaction_cable_plugin_first]]
==== E02 - Start Transaction - Cable Plugin First

.E02 - Start Transaction - Cable Plugin First
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|No. |Type            |Description

|1   |Name            |Start Transaction - Cable Plugin First
|2   |ID              |E02
|{nbsp} d|_Functional block_ |E. Transactions
|3   |Objective(s)    |To inform the CSMS that a transaction at the Charging Station has started.
|4   |Description     |The EV Driver begins the interaction with the Charging Station by plugging in the charging cable first. The CSMS is notified about this. Then, when the communication between EV and EVSE is established, the transaction is started and the CSMS is notified of this. The EV starts charging.
|{nbsp} d|_Actors_    |Charging Station, CSMS, EV Driver
|{nbsp} d|_Scenario description_ 
  |**1.** The EV Driver plugs in the cable at the Charging Station. +
  **2.** The Charging Station sends a <<status_notification_request,StatusNotificationRequest>> to the CSMS to inform it about a Connector that became <<connector_status_enum_type,_Occupied_>>. +
  **3.** The Charging Station sends a <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Started>>) notifying the CSMS about a transaction that has started (even when the driver is not yet known.) +
  **4.** The CSMS responds with a <<transaction_event_response,TransactionEventResponse>>, confirming that the <<transaction_event_request,TransactionEventRequest>> was received. +
  **5.** The EV Driver is authorized by the Charging Station and/or CSMS. +
  **6.** The energy offer starts. +
  **7.** The Charging Station sends a <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Updated>>) with the authorized idToken information to the CSMS to inform about the charging status and which idToken belongs to the transaction. +
  **8.** The CSMS responds with a <<transaction_event_response,TransactionEventResponse>> to the Charging Station with the IdTokenInfo.status _Accepted_. +
  **9.** During the charging process, the Charging Stations continues to send <<transaction_event_request,TransactionEventRequest>> (Updated) messages for transaction-related notifications.
|{nbsp} d|_Alternative scenario(s)_ 
  |<<e03_start_transaction_idtoken_first,E03 - Start Transaction - IdToken First>> +
  <<e04_transaction_started_while_charging_station_is_offline,E04 - Offline Start Transaction>> +
  <<e05_start_transaction_id_not_accepted,E05 - Start Transaction - Id not Accepted>>
|5   |Prerequisite(s)   |The Charging Cable is plugged in first.
|6   |Postcondition(s)  
  |**Successful postcondition:** +
  The transaction is ongoing and the CSMS is _Successfully_ informed.

  **Failure postcondition:** +
  The transaction is _not_ ongoing. _or_ +
  The CSMS is _not_ informed. _or_ +
  Start Transaction - Id not accepted.
|===

.Sequence Diagram: Start Transaction - Cable Plugin First
image::part2/images/figure_45.svg[Sequence Diagram: Start Transaction - Cable Plugin First]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7   |Error handling  |Failing to respond with <<transaction_event_response,TransactionEventResponse>> will only cause the Charging Station to try the same message again as specified in <<e12_inform_csms_of_an_offline_occurred_transaction,E12 - Transaction-related message not accepted by CSMS>>.
|8   |Remark(s) 
  |If the Charging Station has implemented an Authorization Cache, then upon receipt of <<transaction_event_response,TransactionEventResponse>>, the Charging Station updates the cache entry.

  The scenario description and sequence diagram above are based on the Configuration Variable for start & stop transaction being configured as follows: +
  <<tx_start_point,`TxStartPoint`>>: <<tx_start_stop_point_values,EVConnected, Authorized, DataSigned, PowerPathClosed, EnergyTransfer>> +
  This use-case is also valid for other configurations, but then the transaction might start at another moment, which might change the sequence in which message are sent. For more details see the use cases: <<e01_start_transaction_options,E01 - Start Transaction options>> and <<e06_stop_transaction_options,E06 - Stop Transaction options>>.
|===

==== E02 - Start Transaction - Cable Plugin First - Requirements

.E02 - Requirements
[cols="^.^2,<.^6,<.^6,<.^4",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID         |Precondition         |Requirement definition     |Note

|E02.FR.01  |After the EV Driver is authorized for this transaction.
  |The next <<transaction_event_request,TransactionEventRequest>> SHALL contain _triggerReason_: <<trigger_reason_enum_type,Authorized>> AND <<id_token_type,IdTokenType>> information. |{nbsp}
|E02.FR.02  |E02.FR.01            |The CSMS SHALL send a <<transaction_event_response,TransactionEventResponse>> that includes an authorization status value. |{nbsp}
|E02.FR.03  |This transaction ends a reservation.
  |The next <<transaction_event_request,TransactionEventRequest>> SHALL contain the reservationId.
    |See <<h_reservation,H. Reservation>>.
|E02.FR.04  |{nbsp}               |The CSMS SHALL verify the validity of the identifier in <<transaction_event_request,TransactionEventRequest>>.
  |Because the identifier might have been authorized locally by the Charging Station using outdated information.
|E02.FR.05  |When a cable is plugged in
  |The Charging Station SHALL send a <<status_notification_request,StatusNotificationRequest>> with status: <<connector_status_enum_type,_Occupied_>>
    |Alternatively, a NotifyEventRequest message for *component*(name = 'Connector', evse.id = <_x_>, evse.connectorId = <_y_>), variable(name = 'AvailabilityState'), and *actualValue* = 'Occupied' MAY be sent to signal that Connector <_y_> of EVSE <_x_> is now occupied.
|E02.FR.06  |When a cable is plugged in AND `TxStartPoint` contains EVConnected
  |The Charging Station SHALL send a <<transaction_event_request,TransactionEventRequest>>. |{nbsp}
|E02.FR.07  |When a <<transaction_event_request,TransactionEventRequest>> has to be created
  |The Charging Station SHALL set the messageâ€™s **seqNo** field as specified in <<sequence_number_generation,Sequence Number Generation>>.
    |This enables the CSMS to track the completeness of transaction information.
|E02.FR.08  |{nbsp}
  |The transactionId generated by the Charging Station MUST be unique for each transaction started by that Charging Station, even when the Charging Station is rebooted, repaired, firmware is updated etc, it SHALL ensure that it never generates the same TransactionId twice. |{nbsp}
|E02.FR.09  |When configured to send meter data in the <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Started>>), See: <<metervalues_configuration,Meter Values - Configuration>> +
  AND +
  EVSE is known at start of transaction
    |The Charging Station SHALL add the configured measurands to the optional meterValue field with _context_ = `Transaction.Begin` in the <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Started>>) sent to the CSMS to provide more details during the transaction. |{nbsp}
|E02.FR.10  |When configured to send meter data in the <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Updated>>), See: <<metervalues_configuration,Meter Values - Configuration>>
  |The Charging Station SHALL add the configured measurands to the optional meterValue field in the <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>) sent to the CSMS to provide more details during the transaction. |{nbsp}
|E02.FR.11  |E02.FR.10 +
  AND +
  Amount of meter data is too much for 1 <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Updated>>)
    |The Charging Station MAY split meter data over multiple <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>) messages with the same _timestamp_. |{nbsp}
|E02.FR.13  |If the charging state changes
  |The Charging Station SHALL send a <<transaction_event_request,TransactionEventRequest>> including the chargingState element. |{nbsp}
|E02.FR.14  |<<sampled_data_sign_readings,`SampledDataSignReadings`>> is _true_
  |The Charging Station SHALL retrieve signed meter values and put them in the _signedMeterValue_ field of sampledValues. |{nbsp}
|E02.FR.15  |When sending a <<transaction_event_request,TransactionEventRequest>>
  |The Charging Station SHALL set the <<trigger_reason_enum_type,triggerReason>> to inform the CSMS about what triggered the event. +
  What reason to use is described in the description of <<trigger_reason_enum_type,TriggerReasonEnumType>>. |{nbsp}
|E02.FR.16  |After a transaction has been started
  |The Charging Station MAY send additional <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>) messages during the transaction when a <<trigger_reason_enum_type,trigger event>> occurs. |{nbsp}
|E02.FR.17  |When a transaction-related trigger event occurs, listed in _TriggerReasonEnumType_ AND the transaction is ongoing.
  |The Charging Station SHALL send a <<transaction_event_request,TransactionEventRequest>> with a _triggerReason_ corresponding to the occurred event.
    |When two trigger reasons overlap, the more specific one should be used. For example, when a cable is plugged in, triggerReason = _CablePluggedIn_ should be used, not _ChargingStateChanged_. It is not forbidden to send separate <<transaction_event_request,TransactionEventRequest>> messages for each trigger, though.
|E02.FR.18  |When the energy transfer starts AND If the Charging Station is able to report the number of phases used
  |The Charging Station SHALL provide the number of phases used, using the _numberOfPhasesUsed_ field. |{nbsp}
|E02.FR.19  |E02.FR.18 AND +
  during the transaction the number of phases used changes
    |The Charging Station SHALL provide the adjusted number of phases used, using the _numberOfPhasesUsed_ field. |{nbsp}
|E02.FR.20  |When a transaction has not been authorized before AND +
  the Charging Station authorizes an _idToken_ to start charging
    |The next <<transaction_event_request,TransactionEventRequest>> from Charging Station SHALL contain the _idToken_ and have _triggerReason_ = `Authorized`.
      |If authorization is not successful, then no TransactionEventReques t is sent, because this event has no effect on the running transaction. (For authorization to stop charging, see E07).
|E02.FR.21  |When configured to send meter data in the <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Started>>), See: <<metervalues_configuration,Meter Values - Configuration>> +
  AND +
  EVSE is not known at start of transaction
    |The Charging Station SHALL add the measurands for _eventType_ = `Started` to the optional meterValue field with _context_ = `Transaction.Begin` in the <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>) that occurs when charging starts. |{nbsp}
|===

<<<

[[e03_start_transaction_idtoken_first]]
=== E03 - Start Transaction - IdToken First

.E03 - Start Transaction - IdToken First
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|No. |Type            |Description

|1   |Name            |Start Transaction - IdToken First
|2   |ID              |E03
|{nbsp} d|_Functional block_ |E. Transactions
|3   |Objective(s)    |To enable the EV Driver to start a transaction by first presenting an IdToken at the Charging Station.
|4   |Description     |This use case covers how the EV Driver is first authorized by presenting an IdToken before the cable is plugged in and a transaction starts.
|{nbsp} d|_Actors_    |Charging Station, CSMS, EV Driver
|{nbsp} d|_Scenario description_ 
  |**1.** The EV Driver is authorized by the Charging Station and/or CSMS. +
  **2.** The Charging Station informs the CSMS that a transaction has started by sending a <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Started>>). +
  **3.** The EV Driver plugs in the Charging Cable at the Charging Station. +
  **4.** The Charging Station sends <<status_notification_request,StatusNotificationRequest>> to, and receives <<status_notification_response,StatusNotificationResponse>> from the CSMS. +
  **5.** The Charging Station informs the CSMS that the EV started charging by sending a <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Updated>>, <<charging_state_enum_type,chargingState = Charging>>). +
  **6.** The CSMS responds with <<transaction_event_response,TransactionEventResponse>>, accepting the transaction.
|5   |Prerequisite(s) |IdToken is presented prior to plugin cable.
|6   |Postcondition(s) 
  |**Successful postcondition:** +
  A transaction is started and the <<charging_state_enum_type,ChargingState>> is _Charging_ +
  **Failure postcondition:** +
  No transaction is started
|===

.Sequence Diagram: Start Transaction - IdToken First
image::part2/images/figure_46.svg[Sequence Diagram: Start Transaction - IdToken First]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7   |Error handling  |n/a
|8   |Remark(s)       |It is likely that the CSMS applies sanity checks to the data contained in <<transaction_event_request,TransactionEventRequest>> messages it received. The outcome of such sanity checks SHOULD NOT ever cause the CSMS to not respond with a <<transaction_event_response,TransactionEventResponse>>. Failing to do so will only cause the Charging Station to try the same message again as specified in <<e12_inform_csms_of_an_offline_occurred_transaction,E12 - Transaction-related message not accepted by CSMS>>.

The scenario description and sequence diagram above are based on the Configuration Variable for start transaction being configured as follows: +
<<tx_start_point,`TxStartPoint`>>: <<tx_start_stop_point_values,Authorized, DataSigned, PowerPathClosed, EnergyTransfer>> +
This use-case is also valid for other configurations, but then the transaction might start/stop at another moment, which might change the sequence in which message are sent. For more details see the use cases: <<e01_start_transaction_options,E01 - Start Transaction options>>.
|===

==== E03 - Start Transaction - IdToken First - Requirements

.E03 - Requirements
[cols="^.^2,<.^6,<.^6,<.^4",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID         |Precondition         |Requirement definition     |Note

|E03.FR.01  |When the IdToken information is known.
  |The next <<transaction_event_request,TransactionEventRequest>> SHALL contain <<id_token_type,IdTokenType>> information. |{nbsp}
|E03.FR.02  |E03.FR.01            |The CSMS SHALL send a <<transaction_event_response,TransactionEventResponse>> that includes an authorization status. |{nbsp}
|E03.FR.03  |This transaction ends a reservation for the specific IdToken.
  |The next <<transaction_event_request,TransactionEventRequest>> SHALL contain the reservationId.
    |See <<h_reservation,H. Reservation>>.
|E03.FR.05  |When the EV Driver does not plug-in the charging cable before the timeout set by the Configuration Variable: <<ev_connection_timeout,`EVConnectionTimeOut`>> AND TxStopPoint does not contain `ParkingBayOccupancy`
  |The Charging Station SHOULD end the transaction and send a <<transaction_event_request,TransactionEventRequest>> (eventType = Ended, stoppedReason = Timeout, _triggerReason_ = `EVConnectionTimeout`) to the CSMS.
    |This requirement is an additional safety measure to make sure the transaction is ended when the <<ev_connection_timeout,`EVConnectionTimeOut`>> is triggered. However it is up to the CSMS to make sure that sensible TxStartPoint / TxStopPoint combinations are configured. E.g. if Authorized is used as TxStartPoint, it should also be used as TxStopPoint.
|E03.FR.06  |When a <<transaction_event_request,TransactionEventRequest>> has to be created
  |The Charging Station SHALL set the messageâ€™s *seqNo* field as specified in <<sequence_number_generation,Sequence Number Generation>>.
    |This enables the CSMS to track the completeness of transaction information
|E03.FR.07  |When configured to send meter data in the <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Started>>), See: <<metervalues_configuration,Meter Values - Configuration>> +
  AND +
  EVSE is known at start of transaction
    |The Charging Station SHALL add the configured measurands to the optional meterValue field with _context_ = `Transaction.Begin` in the <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Started>>) sent to the CSMS to provide more details during the transaction. |{nbsp}
|E03.FR.08  |When configured to send meter data in the <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Updated>>), See: <<metervalues_configuration,Meter Values - Configuration>>
  |The Charging Station SHALL add the configured measurands to the optional meterValue field in the <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>) sent to the CSMS to provide more details during the transaction. |{nbsp}
|E03.FR.09  |E03.FR.08 +
  AND +
  Amount of meter data is too much for 1 <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Updated>>)
    |The Charging Station MAY split meter data over multiple <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>) messages with the same _timestamp_. |{nbsp}
|E03.FR.10  |<<sampled_data_sign_readings,`SampledDataSignReadings`>> is _true_
  |The Charging Station SHALL retrieve signed meter values and put them in the _signedMeterValue_ field of sampledValues. |{nbsp}
|E03.FR.11  |When configured to send meter data in the <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Started>>), See: <<metervalues_configuration,Meter Values - Configuration>> +
  AND +
  EVSE is not known at start of transaction
    |The Charging Station SHALL add the measurands for _eventType_ = `Started` to the optional meterValue field with _context_ = `Transaction.Begin` in the <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>) that occurs when charging starts. |{nbsp}
|E03.FR.12  |When a transaction-related trigger event occurs, listed in _TriggerReasonEnumType_ AND the transaction is ongoing.
  |The Charging Station SHALL send a <<transaction_event_request,TransactionEventRequest>> with a triggerReason corresponding to the occurred event.
    |When two trigger reasons overlap, the more specific one should be used. For example, when a cable is plugged in, triggerReason = _CablePluggedIn_ should be used, not _ChargingStateChanged_. When two events occur at the same time, they need transmitted using two separate <<transaction_event_request,TransactionEventRequest>> messages. This is to prevent information loss, when something goes wrong.
|E03.FR.13  |When the energy transfer starts AND +
  If the Charging Station is able to report the number of phases used
    |The Charging Station SHALL provide the number of phases used, using the _numberOfPhasesUsed_ field. |{nbsp}
|E03.FR.14  |E03.FR.13 AND +
  during the transaction the number of phases used changes
    |The Charging Station SHALL provide the adjusted number of phases used, using the _numberOfPhasesUsed_ field. |{nbsp}
|E03.FR.15  |When the EV Driver does not plug-in the charging cable before the timeout set by the Configuration Variable: +
  <<ev_connection_timeout,`EVConnectionTimeOut`>> AND +
  TxStopPoint contains `ParkingBayOccupancy`
    |The Charging Station SHALL deauthorize the transaction and send a <<transaction_event_request,TransactionEventRequest>> (_triggerReason_ = `EVConnectionTimeout`) to the CSMS.
      |Transaction will be ended normally when driver leaves the parking bay.
|===

<<<

[[e04_transaction_started_while_charging_station_is_offline]]
=== E04 - Transaction started while Charging Station is offline.

.E04 - Transaction started while Charging Station is offline
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|No. |Type            |Description

|1   |Name            |Transaction started while Charging Station is offline
|2   |ID              |E04
|{nbsp} d|_Functional block_  |E. Transactions
|3   |Objective(s)    |To enable the EV Driver to start a transaction while the Charging Station is _Offline_.
|4   |Description     |This use case covers how the Charging Station, while _Offline_, is able to start a transaction using the Local Authorization List or the Authorization Cache.
|{nbsp} d|_Actors_    |Charging Station, CSMS, EV Driver
|{nbsp} d|_Scenario description_ 
  |**1.** The transaction starts. +
  **2.** The <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Started>>) is stored/queued by the Charging Station. +
  **3.** The connection between Charging Station and CSMS is restored. +
  **4.** The Charging Station starts to send queued messages +
  **5.** The stored <<transaction_event_request,TransactionEventRequest>> is sent, notifying the CSMS about the transaction that was started.
|{nbsp} d|_Alternative scenario(s)_ |<<e10_when_cable_disconnected_on_ev_side_suspended_transaction,E10 - Connection Loss During Transaction>>
|5   |Prerequisite(s) 
  |The Charging Station is _Offline_. +
  The EV Driver is offline/locally authorized by the Charging Station.
|6   |Postcondition(s) 
  |**Successful postcondition:** +
  The <<transaction_event_request,TransactionEventRequest>> has been responded to by the CSMS AND has been removed from the queue of the Charging Station. +
  **Failure postcondition:** +
  The <<transaction_event_request,TransactionEventRequest>> was NOT responded to by the CSMS AND remains in the queue of the Charging Station.
|===

.Sequence Diagram: Transaction started while Charging Station is offline
image::part2/images/figure_47.svg[Sequence Diagram: Transaction started while Charging Station is offline]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7   |Error handling    |n/a
|8   |Remark(s)         
  |The scenario description and sequence diagram above are based on the Configuration Variable for start transaction being configured as follows: +
  <<tx_start_point,`TxStartPoint`>>: <<tx_start_stop_point_values,Authorized, DataSigned, PowerPathClosed, EnergyTransfer>> +
  This use-case is also valid for other configurations, but then the transaction might start/stop at another moment, which might change the sequence in which message are sent. For more details see the use cases: <<e01_start_transaction_options,E01 - Start Transaction options>>.
|===

==== E04 - Transaction started while Charging Station is offline - Requirements

.E04 - Requirements
[cols="^.^2,<.^6,<.^6,<.^4",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID         |Precondition         |Requirement definition     |Note

|E04.FR.01  |When _Offline_.      |The Charging Station MUST queue any <<transaction_event_request,TransactionEventRequest>> messages. |{nbsp}
|E04.FR.02  |After the connection is restored. 
  |The Charging Station MUST send queued <<transaction_event_request,TransactionEventRequest>> messages. |{nbsp}
|E04.FR.03  |E04.FR.02 
  |The flag: "offline" SHALL be set to TRUE for any <<transaction_event_request,TransactionEventRequest>> that occurred while the Charging Station was offline. |{nbsp}
|E04.FR.04  |When a <<transaction_event_request,TransactionEventRequest>> has to be created
  |The Charging Station SHALL set the messageâ€™s *seqNo* field as specified in <<sequence_number_generation,Sequence Number Generation>>.
    |This enables the CSMS to track the completeness of transaction information
|E04.FR.05  |When configured to send meter data in the <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Started>>), See: <<metervalues_configuration,Meter Values - Configuration>> +
  AND +
  EVSE is known at start of transaction
    |The Charging Station SHALL add the configured measurands to the optional meterValue field with _context_ = `Transaction.Begin` in the <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Started>>) sent to the CSMS to provide more details during the transaction. |{nbsp}
|E04.FR.06  |When configured to send meter data in the <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Updated>>), See: <<metervalues_configuration,Meter Values - Configuration>> 
  |The Charging Station SHALL add the configured measurands to the optional meterValue field in the <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>) sent to the CSMS to provide more details during the transaction. |{nbsp}
|E04.FR.07  |E04.FR.06 +
  AND +
  _Offline_ +
  AND +
  The Charging Station is running low on memory
    |The Charging Station MAY drop <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>) messages. |{nbsp}
|E04.FR.08  |E04.FR.07 
  |When dropping <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>) messages, the Charging Station SHALL drop intermediate messages first (1st message, 3th message, 5th message etc.), not start dropping messages from the start or stop adding messages to the queue. |{nbsp}
|E04.FR.09  |E04.FR.06 +
  AND +
  Amount of meter data is too much for 1 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>) |{nbsp}
    |The Charging Station MAY split meter data over
multiple <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>) messages with the same _timestamp_. |{nbsp}
|E04.FR.10  |<<sampled_data_sign_readings,`SampledDataSignReadings`>> is _true_ 
  |The Charging Station SHALL retrieve signed meter values and put them in the _signedMeterValue_ field of sampledValues. |{nbsp}
|E04.FR.11  |When configured to send meter data in the <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Started>>), See: <<metervalues_configuration,Meter Values - Configuration>> +
  AND +
  EVSE is not known at start of transaction
    |The Charging Station SHALL add the measurands for _eventType_ = `Started` to the optional meterValue field with _context_ = `Transaction.Begin` in the <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>) that occurs when charging starts.
|===

<<<

[[e05_start_transaction_id_not_accepted]]
=== E05 - Start Transaction - Id not Accepted

.E05 - Start Transaction - Id not Accepted
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|No. |Type            |Description

|1   |Name            |Start Transaction - Id not Accepted
|2   |ID              |E05
|{nbsp} d|_Functional block_  |E. Transactions
|3   |Objective(s)    |To enable the Charging Station to suspend a transaction when the IdToken has an AuthorizationStatus that does not allow charging.
|4   |Description     
  |This use case covers how the Charging Station wants to start a transaction while the IdToken is not accepted by the CSMS +
  Because the identifier might have been authorized locally by the Charging Station using outdated information, the CSMS has to validate the <<id_token_type,IdTokenType>> in every <<transaction_event_request,TransactionEventRequest>> message it receives that contains an IdTokenType. When receiving a <<transaction_event_response,TransactionEventResponse>> message with *idTokenInfo* field *status* is not *Accepted*, the Charging Station should stop the energy delivery to the EV.
|{nbsp} d|_Actors_    |Charging Station, CSMS
|{nbsp} d|_Scenario description_
  |**1.** The Charging Station sends <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Started>>) that contains the IdToken provided by the EV Driver. +
  **2.** The CSMS responds with <<transaction_event_response,TransactionEventResponse>>, with an AuthorizationStatus that does not allow charging. +
  **3.** The Charging Station suspends the energy offer. (Taking into account: <<max_energy_on_invalid_id,`MaxEnergyOnInvalidId`>>, if supported) +
  **4.** The Charging Station sends <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Updated>>) with trigger = _Deauthorized_ and the chargingState _SuspendedEVSE_ and receives <<transaction_event_response,TransactionEventResponse>> from the CSMS.
|5   |Prerequisite(s) 
  |The EV Driver is offline/locally authorized by the Charging Station. +
  The IdToken is not allowed to charge by the CSMS.
|6   |Postcondition(s) 
  |**Successful postcondition:** +
  The transaction is kept ongoing, and the cable remains locked, but no energy is delivered.

  **Failure postcondition:** +
  n/a
|===

.Sequence Diagram: Start Transaction - Id not Accepted
image::part2/images/figure_48.svg[Sequence Diagram: Start Transaction - Id not Accepted]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7   |Error handling    |n/a
|8   |Remark(s) 
  |The scenario description and sequence diagram above are based on the Configuration Variable for start & stop transaction being configured as follows: +
  <<tx_start_point,`TxStartPoint`>>: <<tx_start_stop_point_values,Authorized, DataSigned, PowerPathClosed, EnergyTransfer>> +
  <<tx_stop_point,`TxStopPoint`>>: <<tx_start_stop_point_values,ParkingBayOccupancy, EVConnected>> +
  This use-case is also valid for other configurations, but then the transaction might start/stop at another moment, which might change the sequence in which message are sent. For more details see the use cases: <<e01_start_transaction_options,E01 - Start Transaction options>> and <<e06_stop_transaction_options,E06 - Stop Transaction options>>.
|===

==== E05 - Start Transaction - Id not Accepted - Requirements

.E05 - Requirements
[cols="^.^2,<.^6,<.^6,<.^4",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID         |Precondition         |Requirement definition     |Note

|E05.FR.01  |{nbsp}
  |The CSMS MUST verify validity of the identifier in the <<transaction_event_request,TransactionEventRequest>> message.
    |The identifier might have been authorized locally by the Charging Station using outdated information. The identifier, for instance, may have been blocked since it was added to the Charging Stationâ€™s Authorization Cache.
|E05.FR.02  |E05.FR.01 AND +
  The authorization status in <<transaction_event_response,TransactionEventResponse>> is not _Accepted_ AND +
  The transaction is still ongoing AND +
  <<stop_tx_on_invalid_id,`StopTxOnInvalidId`>> is set to _false_ +
  AND +
  <<max_energy_on_invalid_id,`MaxEnergyOnInvalidId`>> is not implemented or has been exceeded. <<tx_stop_point,`TxStopPoint`>> does NOT contain: <<tx_start_stop_point_values,EnergyTransfer>>
    |The Charging Station SHALL stop the energy delivery to the EV immediately and send <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Updated>>) with _triggerReason_ set to _ChargingStateChanged_ and chargingState set to _SuspendedEVSE_
      |The transaction is not deauthorized, but transfer of energy stops, since `MaxEnergyOnInvalid` Id has been exceeded or is not set. If `TxStopPoint` contains `EnergyTransfer` then this would have ended the transaction.
|E05.FR.03  |E05.FR.01 AND +
  The authorization status in <<transaction_event_response,TransactionEventResponse>> is not _Accepted_ AND +
  The transaction is still ongoing AND +
  <<stop_tx_on_invalid_id,`StopTxOnInvalidId`>> is set to _false_ +
  AND +
  <<max_energy_on_invalid_id,`MaxEnergyOnInvalidId`>> is set and has NOT been exceeded.
    |Energy delivery to the EV SHALL be allowed until the amount of energy specified in <<max_energy_on_invalid_id,`MaxEnergyOnInvalidId`>> has been reached. |{nbsp}
|E05.FR.04  |When a <<transaction_event_request,TransactionEventRequest>> has to be created
  |The Charging Station SHALL set the messageâ€™s **seqNo** field as specified in <<sequence_number_generation,Sequence Number Generation>>.
    |This enables the CSMS to track the completeness of transaction information.
|E05.FR.05  |When configured to send meter data in the <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Started>>), See: <<metervalues_configuration,Meter Values - Configuration>> AND +
  EVSE is known at start of transaction
    |The Charging Station SHALL add the configured measurands to the optional meterValue field with _context_ = `Transaction.Begin` in the <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Started>>) sent to the CSMS to provide more details during the transaction. |{nbsp}
|E05.FR.06  |<<sampled_data_sign_readings,`SampledDataSignReadings`>> is _true_ 
  |The Charging Station SHALL retrieve signed meter values and put them in the _signedMeterValue_ field of sampledValues. |{nbsp}
|E05.FR.08  |When configured to send meter data in the <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Started>>), See: <<metervalues_configuration,Meter Values - Configuration>> AND +
  EVSE is not known at start of transaction
    |The Charging Station SHALL add the measurands for _eventType_ = `Started` to the optional meterValue field with _context_ = `Transaction.Begin` in the <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>) that occurs when charging starts. |{nbsp}
|E05.FR.09  |E05.FR.01 AND +
  The authorization status in <<transaction_event_response,TransactionEventResponse>> is not _Accepted_ AND +
  The transaction is still ongoing AND +
  <<stop_tx_on_invalid_id,`StopTxOnInvalidId`>> is _true_ AND +
  <<tx_stop_point,`TxStopPoint`>> does NOT contain: (<<tx_start_stop_point_values,Authorized>> OR <<tx_start_stop_point_values,PowerPathClosed>> OR <<tx_start_stop_point_values,EnergyTransfer>>)
    |The Charging Station SHALL stop the energy transfer and send <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>) with _triggerReason_ set to _Deauthorized_ and in the same or next <<transaction_event_request,TransactionEventRequest>> report _chargingState_ set preferably to _EVConnected_, or alternatively to _SuspendedEVSE_.
      |If the physical change of charging state in the Charging Station occurs a few seconds or milliseconds later than the trigger _Deauthorized_, then the _chargingState_ change may be reported separately as a _triggerReason_ = _ChargingStateChanged_. Use of charging state _SuspendedEVSE_ that is not followed by _EVConnected_ in this situation will become deprecated in the next OCPP release.
|E05.FR.10  |E05.FR.01 AND +
  The authorization status in <<transaction_event_response,TransactionEventResponse>> is not _Accepted_ AND +
  The transaction is still ongoing AND +
  <<stop_tx_on_invalid_id,`StopTxOnInvalidId`>> is _true_ AND +
  <<tx_stop_point,`TxStopPoint`>> does contain: (<<tx_start_stop_point_values,Authorized>> OR <<tx_start_stop_point_values,PowerPathClosed>> OR <<tx_start_stop_point_values,EnergyTransfer>>)
    |The Charging Station SHALL stop the transaction and send <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Ended>>) with _triggerReason_ set to _Deauthorized_ and <<reason_enum_type,stoppedReason>> set to _DeAuthorized_. |{nbsp}
|E05.FR.11  |E05.FR.10 AND +
  If the Charging Station has the possibility to lock the Charging Cable
    |The Charging Station SHOULD keep the Charging Cable locked until the owner presents his identifier. |{nbsp}
|===

<<<

[[e06_stop_transaction_options]]
=== E06 - Stop Transaction options

.E06 - Stop Transaction
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|No. |Type            |Description

|1   |Name            |Stop Transaction options
|2   |ID              |E06
|{nbsp} d|_Functional block_ |E. Transactions
|3   |Objective(s)    |To inform the CSMS that a transaction at the Charging Station has stopped.
|4   |Description     
  |This use case describes the different moment a Charging Station can stop a transaction (send <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Ended>>)), depending on the configuration of the Charging Station.
|5  d|_Actors_        |Charging Station, CSMS, EV Driver
d|S1 d|_Scenario objective_ |Stop a transaction when a parking bay occupancy no longer detector detects the EV.
|{nbsp} d|_Scenario description_ 
  |**1.** The Charging Stations parking bay occupancy detector stops detecting the EV. +
  **2.** The Charging Station sends a <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Ended>>) notifying the CSMS about a transaction that has ended. +
  **3.** The CSMS responds with a <<transaction_event_response,TransactionEventResponse>>, confirming that the <<transaction_event_request,TransactionEventRequest>> was received.
|{nbsp} |Prerequisite(s) 
  |A transaction is ongoing. +
  Configuration Variable: <<tx_stop_point,`TxStopPoint`>> contains: <<tx_start_stop_point_values,ParkingBayOccupancy>>
|{nbsp} |Postcondition(s) 
  |**Successful postcondition:** +
  The transaction is ended and the CSMS is _Successfully_ informed.

  **Failure postcondition:** +
  The transaction is still ongoing. _or_ +
  The CSMS is _not_ informed.
|===

.Sequence Diagram: Stop Transaction options - ParkingBayOccupancy
image::part2/images/figure_49.svg[Sequence Diagram: Stop Transaction options - ParkingBayOccupancy]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|S2  d|_Scenario objective_ |Stop a transaction when communication between the Charging Station and the EV is lost. (for example: cable unplugged)

|{nbsp} d|_Scenario description_ 
  |**1.** Communication between Charging Station and the EV is lost (Charging cable is unplugged). +
  **2.** If charging cable unplugged on the Charging Station side: send <<status_notification_request,StatusNotificationRequest>> to the CSMS to inform it about a Connector that became <<connector_status_enum_type,_Available_>>. +
  **3.** The Charging Station sends a <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Ended>>) notifying the CSMS about a transaction that has ended. +
  **4.** The CSMS responds with a <<transaction_event_response,TransactionEventResponse>>, confirming that the <<transaction_event_request,TransactionEventRequest>> was received.
|{nbsp} |Prerequisite(s) 
  |A transaction is ongoing. +
  Configuration Variable: <<tx_stop_point,`TxStopPoint`>> contains: <<tx_start_stop_point_values,EVConnected>>
|{nbsp} |Postcondition(s)
  |**Successful postcondition:** +
  The transaction is ended and the CSMS is _Successfully_ informed.

  **Failure postcondition:** +
  The transaction is still ongoing. _or_ +
  The CSMS is _not_ informed.
|===

.Sequence Diagram: Stop Transaction options - EVConnected
image::part2/images/figure_50.svg[Sequence Diagram: Stop Transaction options - EVConnected]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|S3    d|_Scenario objective_ |Stop a transaction when the driver is no longer authorized.

|{nbsp} d|_Scenario description_ 
  |**1.** The Charging Station sends a <<transaction_event_request,TransactionEventRequest>> to the CSMS. +
  **2.** An invalid IdToken is received in a <<transaction_event_response,TransactionEventResponse>>. +
  **3.** The Charging Station sends a <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Ended>>) notifying the CSMS about a transaction that has ended. +
  **4.** The CSMS responds with a <<transaction_event_response,TransactionEventResponse>>, confirming that the <<transaction_event_request,TransactionEventRequest>> was received.
|{nbsp} |Prerequisite(s) 
  |A transaction is ongoing. +
  Configuration Variable: <<tx_stop_point,`TxStopPoint`>> contains: <<tx_start_stop_point_values,Authorized>>
|{nbsp} |Postcondition(s) 
  |**Successful postcondition:** +
  The transaction is ended and the CSMS is _Successfully_ informed.

  **Failure postcondition:** +
  The transaction is still ongoing. _or_ +
  The CSMS is _not_ informed.
|===

.Sequence Diagram: Stop Transaction options - Deauthorized
image::part2/images/figure_51.svg[Sequence Diagram: Stop Transaction options - Deauthorized]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|S5   d|_Scenario objective_ s|Stop a transaction when the EV driver is no longer authorized and/or the EV is disconnected.

|{nbsp} d|_Scenario description_ 
  |**1.** The Charging Station is disconnected from EV and/or the EV driver is no longer authorized. +
  **2.** The Charging Station sends a <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Ended>>) notifying the CSMS about a transaction that has ended. +
  **3.** The CSMS responds with a <<transaction_event_response,TransactionEventResponse>>, confirming that the <<transaction_event_request,TransactionEventRequest>> was received.
|{nbsp} |Prerequisite(s) 
  |A transaction is ongoing. +
  Configuration Variable: <<tx_stop_point,`TxStopPoint`>> contains: <<tx_start_stop_point_values,PowerPathClosed>>
|{nbsp} |Postcondition(s) 
  |**Successful postcondition:** +
  The transaction is ended and the CSMS is _Successfully_ informed.

  **Failure postcondition:** +
  The transaction is still ongoing. _or_ +
  The CSMS is _not_ informed.
|===

.Sequence Diagram: Stop Transaction options - PowerPathClosed
image::part2/images/figure_52.svg[Sequence Diagram: Stop Transaction options - PowerPathClosed]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|S6   d|_Scenario objective_ |Stop a transaction when energy transfer stops. This will also mean the transaction stops when the EV stops taking energy, for example when the battery is to hot.

|{nbsp} d|_Scenario description_ 
  |**1.** The energy transfer between EV and the Charging Station stops (for example: EV stops charging). +
  **2.** The Charging Station sends a <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Ended>>) notifying the CSMS about a transaction that has ended. +
  **3.** The CSMS responds with a <<transaction_event_response,TransactionEventResponse>>, confirming that the <<transaction_event_request,TransactionEventRequest>> was received.
|{nbsp} |Prerequisite(s) 
  |A transaction is ongoing. +
  Configuration Variable: <<tx_stop_point,`TxStopPoint`>> contains: <<tx_start_stop_point_values,EnergyTransfer>>
|{nbsp} |Postcondition(s) 
  |**Successful postcondition:** +
  The transaction is ended and the CSMS is _Successfully_ informed.

  **Failure postcondition:** +
  The transaction is still ongoing. _or_ +
  The CSMS is _not_ informed.
|===

.Sequence Diagram: Stop Transaction options - EnergyTransfer
image::part2/images/figure_53.svg[Sequence Diagram: Stop Transaction options - EnergyTransfer]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|S7 d|_Scenario objective_ |Stop a transaction when EV driver ends authorization

|{nbsp} d|_Scenario description_ 
  |**1.** The EV drivers presents an IdToken to end the charging. +
  **2.** The Charging Station sends a <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Ended>>) notifying the CSMS about a transaction that has ended. +
  **3.** The CSMS responds with a <<transaction_event_response,TransactionEventResponse>>, confirming that the <<transaction_event_request,TransactionEventRequest>> was received.
|{nbsp} |Prerequisite(s)
  |A transaction is ongoing. +
  Configuration Variable: <<tx_stop_point,`TxStopPoint`>> contains: <<tx_start_stop_point_values,Authorized>> (or <<tx_start_stop_point_values,PowerPathClosed>>).
|{nbsp} |Postcondition(s) 
  |**Successful postcondition:** +
  The transaction is ended and the CSMS is _Successfully_ informed.

  **Failure postcondition:** +
  The transaction is still ongoing. _or_ +
  The CSMS is _not_ informed.
|===

.Sequence Diagram: Stop Transaction options - Authorized
image::part2/images/figure_54.svg[Sequence Diagram: Stop Transaction options - Authorized]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7   |Error handling    |n/a
|8   |Remark(s)         |n/a
|===

==== E06 - Stop Transaction options - Requirements

.E06 - Requirements
.E01 - Requirements
[cols="^.^2,<.^5,<.^6",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID         |Precondition         |Requirement definition

|E06.FR.01  |<<tx_stop_point,`TxStopPoint`>> contains: +
  <<tx_start_stop_point_values,ParkingBayOccupancy>> +
  AND +
  Parking Bay Detector no longer detects the "EV"
    |The Charging Station SHALL stop the transaction and send a <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Ended>>) to the CSMS.
|E06.FR.02  |<<tx_stop_point,`TxStopPoint`>> contains: <<tx_start_stop_point_values,EVConnected>> +
  AND +
  Connection between Charging Station and EV is lost.
    |The Charging Station SHALL stop the transaction and send a <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Ended>>) to the CSMS.
|E06.FR.03  |<<tx_stop_point,`TxStopPoint`>> contains: <<tx_start_stop_point_values,Authorized>> +
  AND +
  EV Driver is authorized to stop a transaction.
    |The Charging Station SHALL stop the transaction and send a <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Ended>>) to the CSMS.
|E06.FR.04  |<<tx_stop_point,`TxStopPoint`>> contains: <<tx_start_stop_point_values,Authorized>> +
  AND +
  CSMS returns a non-valid idTokenInfo in a <<transaction_event_response,TransactionEventResponse>>
    |The Charging Station SHALL stop the transaction and send a <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Ended>>) to the CSMS.
|E06.FR.05  |<<tx_stop_point,`TxStopPoint`>> contains: <<tx_start_stop_point_values,DataSigned>> +
  AND +
  Charging Station can no longer retrieve signed meter values.
    |The Charging Station SHALL stop the transaction and send a <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Ended>>) to the CSMS.
|E06.FR.06  |<<tx_stop_point,`TxStopPoint`>> contains: +
  <<tx_start_stop_point_values,PowerPathClosed>> +
  AND ( +
  Connection between Charging Station and EV is lost +
  OR +
  Authorization has ended or idToken is deauthorized )
    |The Charging Station SHALL stop the transaction and send a <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Ended>>) to the CSMS.
|E06.FR.07  |<<tx_stop_point,`TxStopPoint`>> contains: <<tx_start_stop_point_values,EnergyTransfer>> +
  AND +
  Energy transfer stops
    |The Charging Station SHALL stop the transaction and send a <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Ended>>) to the CSMS.
|E06.FR.08  |If a transaction is not ended by the EV Driver at the Charging Station
  |The Charging Station SHALL include the <<reason_enum_type,stoppedReason>> element in the <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>). What reason to use is described in the description of <<reason_enum_type,reasonEnumType>>.
|E06.FR.09  |If a transaction is ended by the EV Driver at the Charging Station (e.g. EV Driver presented IdToken to stop the transaction)
  |The Charging Station MAY omit the <<reason_enum_type,stoppedReason>> element in the <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Ended>>) (hence the CSMS can interpret the reason as local when omitted).
|E06.FR.10  |As part of the normal transaction termination.
  |The Charging Station SHALL unlock the cable (if not permanently attached).
|E06.FR.11  |When configured to send meter data in the <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Ended>>), See: <<metervalues_configuration,Meter Values - Configuration>>
  |The Charging Station SHALL add the configured measurands to the optional _meterValue_ field with _context_ = `Transaction.End` in the <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>) sent to the CSMS to provide more details about transaction usage.
|E06.FR.12  |E06.FR.11 +
  AND +
  The Charging Station is running low on memory
    |The Charging Station MAY drop meter data in the <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>) message.
|E06.FR.13  |E06.FR.12 
  |When dropping meter data, the Charging Station SHALL drop intermediate values first (1st value, 3th value, 5th etc), not start dropping values from the start of the list or stop adding values to the list.
|E06.FR.14  |When a <<transaction_event_request,TransactionEventRequest>> has to be created
  |The Charging Station SHALL set the messageâ€™s seqNo field as specified in <<sequence_number_generation,Sequence Number Generation>>.
|E06.FR.15  |When sending a <<transaction_event_request,TransactionEventRequest>> 
  |The Charging Station SHALL set the <<trigger_reason_enum_type,triggerReason>> to inform the CSMS about what triggered the event. What reason to use is described in the description of <<trigger_reason_enum_type,TriggerReasonEnumType>>.
|E06.FR.16  |A transaction was stopped by an Abnormal Error or Fault Condition.
  |The Charging Station SHALL send <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>, <<trigger_reason_enum_type,triggerReason=AbnormalCondition>>) to the CSMS.
|===

<<<

[[e07_transaction_locally_stopped_by_idtoken]]
=== E07 - Transaction locally stopped by IdToken

.E07 - Transaction locally stopped by IdToken
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|No. |Type            |Description

|1   |Name            |Transaction locally stopped by IdToken
|2   |ID              |E07
|{nbsp} d|_Functional block_ |E. Transactions
|3   |Objective(s)    |The EV Driver wants to stop an ongoing transaction, by locally presenting his IdToken.
|4   |Description     |This use case covers how the EV Driver can stop a transaction when he wants to leave the charging station.
|{nbsp} d|_Actors_    |Charging Station, CSMS, EV Driver
|{nbsp} d|_Scenario description_ +
  TxStopPoint = `Authorized` (or `PowerPathClosed`)
    |**1.** The EV Driver presents IdToken a second time to end charging. +
  **2.** The Charging Station stops the energy transfer and if the cable is not permanently attached, the Charging Station unlocks the cable. +
  **3.** The Charging Station sends a <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>) with _triggerReason_ = `StopAuthorized` and _stoppedReason_ = `Local`. +
  **4.** The CSMS responds with a <<transaction_event_response,TransactionEventResponse>>.
|{nbsp} d|Alternative scenario(s) +
  TxStopPoint = `Authorized` (or `PowerPathClosed`)
    |_Transaction ends with triggerReason=ChargingStateChanged when stopping charging:_

  **1.** The EV Driver presents IdToken a second time to end charging. +
  **2.** The Charging Station sends a <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>) with _triggerReason_ = `StopAuthorized` +
  **3.** The CSMS responds with a <<transaction_event_response,TransactionEventResponse>>. +
  **4.** The Charging Station stops the energy transfer and if the cable is not permanently attached, the Charging Station unlocks the cable. +
  **5.** The Charging Station sends a <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Ended>>) with _triggerReason_ = `ChargingStateChanged`, _transactionInfo.chargingState_ = `EVConnected` +
  **6.** The CSMS responds with a <<transaction_event_response,TransactionEventResponse>>.
|5   |Prerequisite(s)   |A transaction is ongoing.
|6   |Postcondition(s)  
  |**Successful postcondition:** +
  The CSMS has received all relevant information about the transaction and the Charging Station is in _Idle_ status. +
  **Failure postcondition:**  +
  The transaction is still ongoing or the Charging Station is in Idle status and still holds information about the transaction that it has to deliver to the CSMS.
|===

.Sequence Diagram: Transaction locally stopped by IdToken with TransactionEventRequest reported strictly by TxStopPoint configuration
image::part2/images/figure_55.svg[Sequence Diagram: Transaction locally stopped by IdToken with TransactionEventRequest reported strictly by TxStopPoint configuration]

.Sequence Diagram: Transaction locally stopped by IdToken with delayed TransactionEventRequest eventType = Ended for TxStopPoint = Authorized OR PowerPathClosed
image::part2/images/figure_56.svg[Sequence Diagram: Transaction locally stopped by IdToken with delayed TransactionEventRequest eventType = Ended for TxStopPoint = Authorized OR PowerPathClosed]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7   |Error handling  |n/a
|8   |Remark(s)       |The scenario descriptions are based on TxStopPoint containing <<tx_start_stop_point_values,Authorized>> or <<tx_start_stop_point_values,PowerPathClosed>>. +
The sequence diagrams also show behavior for other TxStopPoint values in the alt-blocks.

The CSMS cannot prevent a transaction from stopping.
|===

==== E07 - Transaction locally stopped by IdToken - Requirements

.E07 - Requirements
[cols="^.^2,<.^6,<.^6,<.^4",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID         |Precondition         |Requirement definition     |Note

|E07.FR.01  |When an <<id_token_type,idToken>> is presented during a transaction that has been authorized +
  AND +
  (a) the presented <<id_token_type,idToken>> is the same as the <<id_token_type,idToken>> that started the authorization +
  OR +
  (b) when the presented <<id_token_type,idToken>> is in the Local Authorization List or
  Authorization Cache AND is valid AND +
  has the same GroupIdToken as the IdToken that started the authorization.
    |The Charging Station SHALL end the authorization of the transaction, without first sending an <<authorize_request,AuthorizeRequest>>
      |The <<id_token_type,idToken>> that started the authorization can always be used to end the authorization. Ending authorization will end delivery of energy. Depending on the TxStopPoint ending of the authorization may also end the transaction. (See C01.FR.03)
|E07.FR.02  |E07.FR.01
  |The Charging Station SHALL send a
<<transaction_event_request,TransactionEventRequest>> with _triggerReason_ = `StopAuthorized` and SHOULD include the _idToken_ used to stop authorization.
    |The stopping _idToken_ may differ from the starting _idToken_, when they share the same GroupId.
|E07.FR.04  |If a transaction is stopped on request of the EV driver at the Charging Station.
  |Charging Station MAY omit the <<reason_enum_type,stoppedReason>> element from the final TransactionEventRequest with _eventType_ = `Ended`
    |e.g. EV-driver presented IdToken to stop the transaction or pressed a "stop" button (not the emergency stop). See use case F03 for remotely stopping.
|E07.FR.05  |If a transaction is stopped on request of the EV driver at the Charging Station.
  |Charging Station SHOULD use a <<reason_enum_type,stoppedReason>> = `Local` in the final TransactionEventRequest with _eventType_ = `Ended`.
    |e.g. EV-driver presented IdToken to stop the transaction or pressed a "stop" button (not the emergency stop). See use case F03 for remotely stopping.
|E07.FR.06  |If a transaction is stopped, but not on request of the EV driver at the Charging Station.
  |Charging Station SHOULD use the most appropriate value from <<reason_enum_type,ReasonEnumType>> for _stoppedReason_ in the final TransactionEventRequest with _eventType_ = `Ended`.
    |Apart from remotely stopping (`Remote`), CSMS revoking authorization (`DeAuthorized`) or disconnecting the EV (`EVDisconnected`), most other reasons are related to technical faults or energy limitations.
|E07.FR.07  |As part of the normal transaction termination.
  |The Charging Station SHALL unlock the cable (if not permanently attached). |{nbsp}
|E07.FR.08  |When configured to send meter data
in the <<transaction_event_request,TransactionEventRequest>>
(<<transaction_event_enum_type,eventType = Ended>>), See: <<metervalues_configuration,Meter Values - Configuration>>
  |The Charging Station SHALL add the configured measurands to the optional _meterValue_ field with _context_ = `Transaction.End` in the <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>) sent to the CSMS to provide more details about transaction usage. |{nbsp}
|E07.FR.09  |E07.FR.08 +
  AND +
  The Charging Station is running low on memory
    |The Charging Station MAY drop meter data in the <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>) message. |{nbsp}
|E07.FR.10  |E07.FR.09 
  |When dropping meter data, the Charging Station SHALL drop intermediate values first (1st value, 3th value, 5th etc), not start dropping values from the start of the list or stop adding values to the list. |{nbsp}
|E07.FR.11  |When a <<transaction_event_request,TransactionEventRequest>> has to be created
  |The Charging Station SHALL set the messageâ€™s **seqNo** field as specified in <<sequence_number_generation,Sequence Number Generation>>.
    |This enables the CSMS to track the completeness of transaction information
|E07.FR.12  |<<sampled_data_sign_readings,`SampledDataSignReadings`>> is _true_
  |The Charging Station SHALL retrieve signed meter values and put them in the _signedMeterValue_ field of sampledValues. |{nbsp}
|===

<<<

=== E08 - Transaction stopped while Charging Station is offline

.E08 - Transaction stopped while Charging Station is offline
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|No. |Type            |Description

|1   |Name            |Transaction stopped while Charging Station is offline
|2   |ID              |E08
|{nbsp} d|_Functional block_  |E. Transactions
|{nbsp} d|_Parent use case_ |<<e07_transaction_locally_stopped_by_idtoken,E07 - Local Stop Transaction>>
|3   |Objective(s)    |To enable the EV Driver to stop a transaction while the Charging Station is _Offline_.
|4   |Description     |This use case describes how an EV Driver can stop a transaction while the Charging Station is _Offline_. While a transaction is ongoing and the Charging Station is _Offline_, the EV Driver presents his IdToken, if the Charging Stations knows locally (without asking the CSMS) that this IdToken is allowed to stop the transaction, it will stop the ongoing transaction. +
When the Charging Station restores the connection with the CSMS, it needs to send the information about this _Offline_ stop transaction to the CSMS.
|{nbsp} d|_Actors_    |Charging Station, CSMS, EV Driver
|{nbsp} d|_Scenario description_ 
  |**1.** The EV Driver presents IdToken to stop the transaction. +
  **2.** When this is the same IdToken as was used to start the transaction, or via the Local Authorization List and / or Authorization Cache the GroupId can be validated: the transaction is stopped. +
  **3.** The Charging Station stops the energy offer. +
  **4.** The <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Ended>>) is stored/queued by the Charging Station. +
  **5.** The connection between Charging Station and CSMS is restored. +
  **6.** The Charging Station starts to send queued messages +
**7.** The stored <<transaction_event_request,TransactionEventRequest>> is sent, notifying the CSMS about the transaction that was stopped.
|5   |Prerequisite(s)   |Transaction ongoing and connection lost.
|6   |Postcondition(s)  |Charging Station is in _Idle_ status.
|===

.Sequence Diagram: Transaction stopped while Charging Station is offline
image::part2/images/figure_57.svg[Sequence Diagram: Transaction stopped while Charging Station is offline]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7   |Error handling  |n/a
|8   |Remark(s) 
  |groupId check must be done on Local Authorization List and / or Authorization Cache if available.

  The scenario description and sequence diagram above are based on the Configuration Variable for stop transaction being configured as follows. +
  <<tx_stop_point,`TxStopPoint`>>: <<tx_start_stop_point_values,ParkingBayOccupancy, EVConnected, Authorized>> +
  This use-case is also valid for other configurations, but then the transaction might stop at another moment, which might change the sequence in which message are sent. For more details see the use case: <<e06_stop_transaction_options,E06 - Stop Transaction options>>
|===

==== E08 - Transaction stopped while Charging Station is offline - Requirements

.E08 - Requirements
[cols="^.^2,<.^6,<.^6,<.^4",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID         |Precondition         |Requirement definition     |Note

|E08.FR.01  |If the IdToken presented is the same as the IdToken used to start the transaction.
  |The Charging Station SHALL stop the energy offering. |{nbsp}
|E08.FR.02  |If the IdToken presented has the same GroupId as the IdToken used to start the transaction.
  |The Charging Station SHALL stop the energy offering. |{nbsp}
|E08.FR.03  |(E08.FR.01 OR E08.FR.02) +
  AND +
  Cable not permanently attached
    |The Charging Station SHALL unlock the connector. |{nbsp}
|E08.FR.04  |(E08.FR.01 OR E08.FR.02)
  |The Charging Station SHALL "generate" a <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Ended>>). |{nbsp}
|E08.FR.05  |When _Offline_.
  |The Charging Station MUST queue any <<transaction_event_request,TransactionEventRequest>> messages. |{nbsp}
|E08.FR.06  |After the connection is restored.
  |The Charging Station MUST send queued <<transaction_event_request,TransactionEventRequest>> messages. |{nbsp}
|E08.FR.07  |{nbsp}
  |The flag: _offline_ SHALL be set to TRUE for any <<transaction_event_request,TransactionEventRequest>> that occurred while the Charging Station was offline. |{nbsp}
|E08.FR.08  |When a <<transaction_event_request,TransactionEventRequest>> has to be created
  |The Charging Station SHALL set the messageâ€™s *seqNo* field as specified in <<sequence_number_generation,Sequence Number Generation>>.
    |This enables the CSMS to track the completeness of transaction information.
|E08.FR.09  |When configured to send meter data in the <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Ended>>), See: <<metervalues_configuration,Meter Values - Configuration>>
  |The Charging Station SHALL add the configured measurands to the optional meterValue field in the <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>) sent to the CSMS to provide more details about transaction usage. |{nbsp}
|E08.FR.10  |E08.FR.09 +
  AND +
  The Charging Station is running low on memory
    |The Charging Station MAY drop meter data in the <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>) message. |{nbsp}
|E08.FR.11  |E08.FR.10 
  |When dropping meter data, the Charging Station SHALL drop intermediate values first (1st value, 3th value, 5th etc), not start dropping values from the start of the list or stop adding values to the list. |{nbsp}
|E08.FR.12  |<<sampled_data_sign_readings,`SampledDataSignReadings`>> is _true_
  |The Charging Station SHALL retrieve signed meter values and put them in the _signedMeterValue_ field of sampledValues. |{nbsp}
|===

<<<

[[e09_when_cable_disconnected_on_ev_side_stop_transaction]]
=== E09 - When cable disconnected on EV-side: Stop Transaction

.E09 - When cable disconnected on EV-side: Stop Transaction
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|No. |Type            |Description

|1   |Name            |When cable disconnected on EV-side: Stop Transaction
|2   |ID              |E09
|{nbsp} d|_Functional block_ |E. Transactions
|{nbsp} d|_Parent use case_ |<<e07_transaction_locally_stopped_by_idtoken,E07 - Local Stop Transaction>>
|3   |Objective(s)    |To stop an ongoing transaction when the Charging Cable is unplugged on the EV side.
|4   |Description
  |This use case covers how a transaction is stopped when the EV Driver unplugs the cable at the EV side. In this use case the Configuration Variable: <<stop_tx_on_ev_side_disconnect,`StopTxOnEVSideDisconnect`>> = true.

  The Charging Cable is unplugged at the EV side. This is detected by the Charging Station. The Charging Station stops the transaction and sends a <<transaction_event_request,TransactionEventRequest>> to the CSMS. The Charging Cable, if locked and <<unlock_on_ev_side_disconnect,`UnlockOnEVSideDisconnect`>> = false, will remain locked at the Charging Station until the EV Driver returns and presents his/hers IdToken. Otherwise it will unlock the cable.
|{nbsp} d|_Actors_    |Charging Station, CSMS, EV Driver
|{nbsp} d|_Scenario description_ 
  |**1.** The cable is unplugged at the EV. +
  **2.** The energy offer is suspended. +
  **3.** The Charging Station sends <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Ended>>, <<reason_enum_type,stoppedReason = EVDisconnected>>) to the CSMS. +
  **4.** The CSMS responds with <<transaction_event_response,TransactionEventResponse>>. +
  **5.** The EV Driver is authorized and unplugs the cable. +
  **6.** The Charging Station sends <<status_notification_request,StatusNotificationRequest>> to the CSMS with the status _Available_. +
  **7.** The CSMS responds with <<status_notification_response,StatusNotificationResponse>>.
|{nbsp} d|_Alternative scenario(s)_ |<<e10_when_cable_disconnected_on_ev_side_suspended_transaction,E10 - When cable disconnected on EV-side: Suspend Transaction>>
|5   |Prerequisite(s) 
  |Configuration Variable: <<stop_tx_on_ev_side_disconnect,`StopTxOnEVSideDisconnect`>> = true +
  A transaction is ongoing 
|6   |Postcondition(s) 
  |**Successful postcondition:** +
  The Charging Station is in _Idle_ status. +
  **Failure postcondition:** +
  n/a
|===

.Sequence Diagram: When cable disconnected on EV-side: Stop Transaction
image::part2/images/figure_58.svg[Sequence Diagram: When cable disconnected on EV-side: Stop Transaction]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7   |Error handling  |n/a
|8   |Remark(s) 
  |When the Charging Cable is plugged back in, the charging will not resume/continue.

  The scenario description and sequence diagram above are based on the Configuration Variable for stop transaction being configured as follows. +
  <<tx_stop_point,`TxStopPoint`>>: <<tx_start_stop_point_values,Authorized>> +
  This use-case is also valid for other configurations, but then the transaction might stop at another moment, which might change the sequence in which message are sent. For more details see the use case: <<e06_stop_transaction_options,E06 - Stop Transaction options>>
|===

==== E09 - When cable disconnected on EV-side: Stop Transaction - Requirements

.E09 - Requirements
[cols="^.^2,<.^6,<.^6,<.^4",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID         |Precondition         |Requirement definition     |Note

|E09.FR.01  |If <<stop_tx_on_ev_side_disconnect,`StopTxOnEVSideDisconnect`>> = _true_.
  |The transaction SHALL be deauthorized when the cable is disconnected from the EV. If the EV is reconnected, energy transfer is not allowed until the transaction is authorized once again.
    |Setting <<stop_tx_on_ev_side_disconnect,`StopTxOnEVSideDisconnect`>> to _true_ will prevent sabotage acts when unplugging not locked cables on EV side.
|E09.FR.02  |E09.FR.01 +
  AND +
  the cable is not permanently attached +
  AND +
  <<unlock_on_ev_side_disconnect,`UnlockOnEVSideDisconnect`>> = true.
    |The Charging Station SHALL unlock the Charging Cable. |{nbsp}
|E09.FR.03  |E09.FR.01 +
  AND +
  the cable is not permanently attached +
  AND +
  <<unlock_on_ev_side_disconnect,`UnlockOnEVSideDisconnect`>> = false.
    |The Charging Station SHALL unlock the Charging Cable only after authorization by the EV Driver. |{nbsp}
|E09.FR.04  |When a <<transaction_event_request,TransactionEventRequest>> has to be created
  |The Charging Station SHALL set the messageâ€™s **seqNo** field as specified in <<sequence_number_generation,Sequence Number Generation>>.
    |This enables the CSMS to track the completeness of transaction information
|E09.FR.05  |When configured to send meter data in the <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Ended>>), See: <<metervalues_configuration,Meter Values - Configuration>>
  |The Charging Station SHALL add the configured measurands to the optional meterValue field in the <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>) sent to the CSMS to provide more details about transaction usage. |{nbsp}
|E09.FR.06  |E09.FR.05 +
  AND +
  The Charging Station is running low on memory
    |The Charging Station MAY drop meter data in the <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>) message. |{nbsp}
|E09.FR.07  |E09.FR.06 
  |When dropping meter data, the Charging Station SHALL drop intermediate values first (1st value, 3th value, 5th etc), not start dropping values from the start of the list or stop adding values to the list. |{nbsp}
|E09.FR.08  |<<sampled_data_sign_readings,`SampledDataSignReadings`>> is _true_
  |The Charging Station SHALL retrieve signed meter values and put them in the _signedMeterValue_ field of sampledValues. |{nbsp}
|===

<<<

[[e10_when_cable_disconnected_on_ev_side_suspended_transaction]]
=== E10 - When cable disconnected on EV-side: Suspend Transaction

.E10 - When cable disconnected on EV-side: Suspend Transaction
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|No. |Type            |Description

|1   |Name            |When cable disconnected on EV-side: Suspend Transaction
|2   |ID              |E10
|{nbsp} d|_Functional block_ |E. Transactions
|{nbsp} d|_Parent use case_  |<<e07_transaction_locally_stopped_by_idtoken,E07 - Local Stop Transaction>>
|3   |Objective(s)    |To suspend an ongoing transaction when the Charging Cable is unplugged on the EV side.
|4   |Description 
  |This use case covers how a transaction is suspended when the EV Driver unplugs the cable at the EV side. In this use case the Configuration Variable: <<stop_tx_on_ev_side_disconnect,`StopTxOnEVSideDisconnect`>> = false.

  The Charging Cable is unplugged at the EV side. This is detected by the Charging Station. The Charging Station stops the energy offering (safety), but does not stop the transaction. The Charging Cable, if locked, will remain locked at the Charging Station until the EV Driver returns and presents his/hers IdToken.
|{nbsp} d|_Actors_    |Charging Station, CSMS, EV Driver
|{nbsp} d|_Scenario description_ 
  |**1.** EV Driver unplugs the cable at the EV while a transaction is ongoing. +
  **2.** The energy offer is suspended. +
  _If the EV Driver plugs the cable back in, the transaction is resumed._ +
  **A1.** The Charging Station sends a <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Updated>>, <<trigger_reason_enum_type,trigger = CablePluggedIn>>) +
  **A2.** The CSMS responds with a <<transaction_event_response,TransactionEventResponse>>. +
  _If cable not permanently attached_ +
  **B1.** The EV Driver is authorized by the Charging Station and/or CSMS to unlock the charging cable. +
  **B2.** The Cable is unlocked. +
  **B3.** The Charging Station sends a <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Ended>>, <<trigger_reason_enum_type,trigger = StopAuthorized>>). +
  **B4.** The EV Driver removes the charging cable. +
  **B5.** The Charging Station sends a <<status_notification_request,StatusNotificationRequest>> to the CSMS with the status <<connector_status_enum_type,_Available_>>. +
  **B6.** The CSMS responds with a <<status_notification_response,StatusNotificationResponse>>. +
  _If cable permanently attached_ +
  **C1.** The Cable is not plugged in within timeout. +
  **C2.** The Charging Station sends a <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Ended>>, <<trigger_reason_enum_type,trigger = EVCommunicationLost>>, <<reason_enum_type,stoppedReason = EVDisconnected>>). +
  **C3.** The Charging Station sends a <<status_notification_request,StatusNotificationRequest>> to the CSMS with the status <<connector_status_enum_type,_Available_>>. +
  **C4.** The CSMS responds with a <<status_notification_response,StatusNotificationResponse>>.
|{nbsp} d|_Alternative scenario(s)_ |<<e09_when_cable_disconnected_on_ev_side_stop_transaction,E09 - When cable disconnected on EV-side: Stop Transaction>>
|5   |Prerequisite(s) 
  |Configuration Variable: <<stop_tx_on_ev_side_disconnect,`StopTxOnEVSideDisconnect`>> = false +
  A transaction is ongoing
|6   |Postcondition(s) 
  |**Successful postcondition:** +
  The Charging Station is in _Idle_ status. +
  The regular transaction is resumed. +
  **Failure postcondition:** +
  n/a
|===

.Sequence Diagram: When cable disconnected on EV-side: Suspend Transaction
image::part2/images/figure_59.svg[Sequence Diagram: When cable disconnected on EV-side: Suspend Transaction]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7   |Error handling  |n/a
|8   |Remark(s) 
  |When the Charging Cable is plugged back in, the charging is resumed.

  When the cable is permanently attached and the cable is not plugged in within a certain timeout, the Charging Station stops the transaction. This timeout is not defined by OCPP, it is left to the implementor of the Charging Station. +
  The scenario description and sequence diagram above are based on the Configuration Variable for stop transaction being configured as follows. +
  <<tx_stop_point,`TxStopPoint`>>: <<tx_start_stop_point_values,ParkingBayOccupancy, Authorized>> +
  This use-case is also valid for other configurations, but then the transaction might stop at another moment, which might change the sequence in which message are sent. For more details see the use case: <<e06_stop_transaction_options,E06 - Stop Transaction options>>
|===

==== E10 - When cable disconnected on EV-side: Suspend Transaction - Requirements

.E10 - Requirements
[cols="^.^2,<.^6,<.^6,<.^4",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID         |Precondition         |Requirement definition     |Note

|E10.FR.01  |Cable not permanently attached
  |The Connector SHALL remain locked at the Charging Station until the EV Driver presents the IdToken. |{nbsp}
|E10.FR.02 |Cable permanently attached +
  AND +
  Cable not plugged in within timeout
    |The Charging Station SHALL deauthorize the transaction. |{nbsp}
|E10.FR.03  |When a <<transaction_event_request,TransactionEventRequest>> has to be created
  |The Charging Station SHALL set the messageâ€™s **seqNo** field as specified in <<sequence_number_generation,Sequence Number Generation>>.
    |This enables the CSMS to track the completeness of transaction information
|E10.FR.04  |When configured to send meter data in the <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Ended>>), See: <<metervalues_configuration,Meter Values - Configuration>> 
  |The Charging Station SHALL add the configured measurands to the optional meterValue field in the <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>) sent to the CSMS to provide more details about transaction usage. |{nbsp}
|E10.FR.05  |E10.FR.04 +
  AND +
  The Charging Station is running low on memory
    |The Charging Station MAY drop meter data in the <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>) message. |{nbsp}
|E10.FR.06  |E10.FR.05 
  |When dropping meter data, the Charging Station SHALL drop intermediate values first (1st value, 3th value, 5th etc), not start dropping values from the start of the list or stop adding values to the list. |{nbsp}
|E10.FR.07  |<<sampled_data_sign_readings,`SampledDataSignReadings`>> is _true_
  |The Charging Station SHALL retrieve signed meter values and put them in the _signedMeterValue_ field of sampledValues. |{nbsp}
|===

<<<

==== E11 - Connection Loss During Transaction

.E11 - Connection Loss During Transaction
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|No. |Type            |Description

|1   |Name            |Connection Loss During Transaction
|2   |ID              |E11
|{nbsp} d|_Functional block_ |E. Transactions
|3   |Objective(s)    |To enable a Charging Station to continue a transaction while the Charging Station loses its connection
|4   |Description     |This use cases describes how a Charging Station can continue an ongoing transaction while losing and regaining the connection with the CSMS.
|{nbsp} d|_Actors_    |Charging Station, CSMS
|{nbsp} d|_Scenario description_ 
  |**1.** The connection of the Charging Station is lost, while a transaction is ongoing. +
  **2.** The transaction events of the Charging Station are stored. +
  **3.** The connection with the CSMS is restored. +
  **4.** The Charging Station sends the stored transaction events to the CSMS using <<transaction_event_request,TransactionEventRequest>> (offline = TRUE). +
  **5.** The Charging Station resumes regular communication.
|{nbsp} d|_Alternative scenario(s)_ |<<e04_transaction_started_while_charging_station_is_offline,E04 - Offline Start Transaction>>
|5   |Prerequisite(s) |Transaction ongoing and connection lost.
|6   |Postcondition(s) 
  |**Successful postcondition:** +
  The Charging Station resumes regular communication. +
  **Failure postcondition:** +
  n/a +
|===

.Sequence Diagram: Connection Loss During Transaction
image::part2/images/figure_60.svg[Sequence Diagram: Connection Loss During Transaction]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7   |Error handling  |n/a
|8   |Remark(s)       |n/a
|===

==== E11 - Connection Loss During Transaction - Requirements

.E11 - Requirements
[cols="^.^2,<.^5,<.^6",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID         |Precondition         |Requirement definition

|E11.FR.01  |When _Offline_ 
  |The Charging Station MUST queue all <<transaction_event_request,TransactionEventRequest>> messages, that it would have sent to the CSMS if the Charging Station had been online.
|E11.FR.02  |After the connection is restored.
  |The Charging Station MUST send queued <<transaction_event_request,TransactionEventRequest>> messages with the flag _offline_ set to TRUE.
|E11.FR.03  |When configured to send meter data in the <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>), See: <<metervalues_configuration,Meter Values - Configuration>>
  |The Charging Station SHALL add the configured measurands to the optional meterValue field in the <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Updated>>) sent to the CSMS to provide more details during the transaction.
|E11.FR.04  |E11.FR.03 +
  AND +
  _Offline_ +
  AND +
  The Charging Station is running low on memory
    |The Charging Station MAY drop <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Updated>>) messages.
|E11.FR.05  |E11.FR.04
  |When dropping <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>) messages, the Charging Station SHALL drop intermediate messages first (1st message, 3th message, 5th message etc.), not start dropping messages from the start or stop adding messages to the queue.
|E11.FR.06  |E11.FR.03 +
  AND +
  Amount of meter data is too much for 1 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>)
    |The Charging Station MAY split the meter data over multiple <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>) messages with the same _timestamp_.
|E11.FR.07  |{nbsp}
  |If the Charging Station goes offline, every message that is still in the queue SHALL be set _Offline_.
|E11.FR.08  |<<sampled_data_sign_readings,`SampledDataSignReadings`>> is _true_
  |The Charging Station SHALL retrieve signed meter values and put them in the _signedMeterValue_ field of sampledValues.
|===

<<<

[[e12_inform_csms_of_an_offline_occurred_transaction]]
=== E12 - Inform CSMS of an Offline Occurred Transaction

.E12 - Inform CSMS of an Offline Occurred Transaction
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|No. |Type            |Description

|1   |Name            |Inform CSMS of an Offline Occurred Transaction
|2   |ID              |E12
|{nbsp} d|_Functional block_ |E. Transactions
|3   |Objective(s)    |To enable the Charging Station to inform the CSMS that a transaction occurred while the Charging Station was _Offline_.
|4   |Description     |This use case covers how the Charging Station starts and stops a transaction since connection loss.
|{nbsp} d|_Actors_    |Charging Station, CSMS
|{nbsp} d|_Scenario description_ 
  |**1.** The connection with the CSMS is restored. +
  **2.** The Charging Station sends a Heartbeat message to the CSMS. +
  **3.** The Charging Station sends <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Started>>, offline = TRUE) to the CSMS. +
  **4.** The CSMS responds with <<transaction_event_response,TransactionEventResponse>>, accepting the transaction. +
  **5.** The Charging Station sends <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Updated>>, offline = TRUE) +
  **6.** The CSMS responds with <<transaction_event_response,TransactionEventResponse>>. +
  **7.** The Charging Station sends <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Ended>>, offline = TRUE) +
  **8.** The CSMS responds with <<transaction_event_response,TransactionEventResponse>>.
|5   |Prerequisite(s) |At least one _Offline_ transaction has taken place.
|6   |Postcondition(s) 
  |**Successful postcondition:** +
  The CSMS has processed all transactions that occurred _Offline_. +
  **Failure postcondition:** +
  n/a
|===

.Sequence Diagram: Inform CSMS of an Offline Occurred Transaction
image::part2/images/figure_61.svg[Sequence Diagram: Inform CSMS of an Offline Occurred Transaction]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7   |Error handling  |n/a
|8   |Remark(s)       |n/a
|===

==== E12 - Inform CSMS of an Offline Occurred Transaction - Requirements

.E12 - Requirements
[cols="^.^2,<.^5,<.^6",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID         |Precondition         |Requirement definition

|E12.FR.01  |When _Offline_
  |The Charging Station MUST queue all <<transaction_event_request,TransactionEventRequest>> messages, that it would have sent to the CSMS if the Charging Station had been online.
|E12.FR.02  |After the connection is restored.
  |The Charging Station MUST send queued <<transaction_event_request,TransactionEventRequest>> messages with the flag _offline_ set to TRUE.
|E12.FR.03  |When configured to send meter data in the <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>), See: <<metervalues_configuration,Meter Values - Configuration>>
  |The Charging Station SHALL add the configured measurands to the optional meterValue field in the <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Updated>>) sent to the CSMS to provide more details during the transaction.
|E12.FR.04  |E12.FR.03 +
  AND +
  _Offline_ +
  AND +
  The Charging Station is running low on memory
    |The Charging Station MAY drop <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Updated>>) messages.
|E12.FR.05  |E12.FR.04
  |When dropping <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>) messages, the Charging Station SHALL drop intermediate messages first (1st message, 3th message, 5th message etc.), not start dropping messages from the start or stop adding messages to the queue.
|E12.FR.06  |E12.FR.03 +
  AND +
  Amount of meter data is too much for 1 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>)
    |The Charging Station MAY split the meter data over multiple <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>) messages with the same _timestamp_.
|E12.FR.07  |When configured to send meter data in the <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>), See: <<metervalues_configuration,Meter Values - Configuration>>
  |The Charging Station SHALL add the configured measurands to the optional meterValue field in the <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Ended>>) sent to the CSMS to provide more details about transaction usage.
|E12.FR.08  |E12.FR.07 +
  AND +
  The Charging Station is running low on memory
    |The Charging Station MAY drop meter data in the <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>) message.
|E12.FR.09  |E12.FR.08
  |When dropping meter data, the Charging Station SHALL drop intermediate values first (1st value, 3th value, 5th etc), not start dropping values from the start of the list or stop adding values to the list.
|E12.FR.10 |<<sampled_data_sign_readings,`SampledDataSignReadings`>> is _true_
  |The Charging Station SHALL retrieve signed meter values and put them in the _signedMeterValue_ field of sampledValues.
|===

[[e13_transaction_related_message_not_accepted_by_csms]]
==== E13 - Transaction-related message not accepted by CSMS

.E13 - Transaction-related message not accepted by CSMS
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|No. |Type            |Description

|1   |Name            |Transaction-related message not accepted by CSMS
|2   |ID              |E13
|{nbsp} d|_Functional block_ |E. Transactions
|3   |Objective(s)    |To define how a Charging Station shall handle not accepted messages.
|4   |Description     |There are a situation/issues why a CSMS might not accept a transaction related message, or does not reply within the MessageTimeout. Most are error scenarios. When something like this happens, the Charging Station SHALL retry the messages a couple of times.
|{nbsp} d|_Actors_    |Charging Station, CSMS
|{nbsp} d|_Scenario description_ 
  |**1.** The Charging Station sends a transaction-related message to the CSMS. +
  **2.** The message is not accepted and <<message_attempts_transaction_event,`MessageAttemptsTransactionEvent`>> not reached. +
  **3.** The Charging Station waits the number of preceding transmissions of this same message times <<message_attempt_interval_transaction_event,`MessageAttemptIntervalTransactionEvent`>> seconds. +
  **4.** The Charging Station resends the transaction-related message to the CSMS. +
|5   |Prerequisite(s)  |n/a
|6   |Postcondition(s) 
  |**Successful postcondition:** +
  MessageAttemptsTransactionEvent is _not_ reached AND the transaction-related message is accepted. MessageAttemptsTransactionEvent is reached AND the transaction-related message is disposed. +
  **Failure postcondition:** +
  MessageAttemptsTransactionEvent is _not_ reached AND the transaction-related message is disposed. MessageAttemptsTransactionEvent is reached AND the transaction-related message is accepted.
|===

.Sequence Diagram: Transaction-related message not accepted by CSMS
image::part2/images/figure_62.svg[Sequence Diagram: Transaction-related message not accepted by CSMS]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7   |Error handling  |n/a
|8   |Remark(s)       |This use case describes the expect behaviour when the CSMS does not accept a message, or does not reply within the message timeout, this is different from a situation where the communication between Charging Station and CSMS is _Offline_.
|===

==== E13 - Transaction-related message not accepted by CSMS - Requirements

.E13 - Requirements
[cols="^.^2,<.^5,<.^6",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID         |Precondition         |Requirement definition

|E13.FR.01  |{nbsp}
  |The number of times and the interval with which the Charging Station should retry such failed transaction-related messages MAY be configured using the <<message_attempts_transaction_event,`MessageAttemptsTransactionEvent`>> and <<message_attempt_interval_transaction_event,`MessageAttemptIntervalTransactionEvent`>> Configuration Variables.
|E13.FR.02  |When the Charging Station encounters a first failure to deliver a certain transaction-related message.
  |The Charging Station SHALL send this message again as long as it keeps resulting in a failure to process this message and it has not yet encountered as many failures to process this message for this message as specified in its <<message_attempts_transaction_event,`MessageAttemptsTransactionEvent`>> Configuration Variable.
|E13.FR.03  |The CSMS does not accept a transaction-related message.
  |The Charging Station SHALL wait as many seconds as specified in its <<message_attempt_interval_transaction_event,`MessageAttemptIntervalTransactionEvent`>> key, multiplied by the number of preceding transmissions of this same message.
|E13.FR.04  |If the final attempt fails.
  |The Charging Station SHALL discard the message and continue with the next transaction-related message, if there is any.
|===

==== E13 - Transaction-related message not accepted by CSMS - Example

As an example, consider a Charging Station that has the value "3" for the <<message_attempts_transaction_event,`MessageAttemptsTransactionEvent`>> Configuration Variable and the value "60" for the <<message_attempt_interval_transaction_event,`MessageAttemptIntervalTransactionEvent`>> Configuration Variable. It sends a <<transaction_event_request,TransactionEventRequest>> message and detects a failure to process the message in the CSMS. The Charging Station SHALL wait for 60 seconds, and resend the message. In the case when there is a second failure, the Charging Station SHALL wait for 120 seconds, before resending the message. If this final attempt fails, the Charging Station SHALL discard the message and continue with the next transaction-related message, if there is any.

<<<

=== E14 - Check transaction status

.E14 - Check transaction status
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|No. |Type            |Description

|1   |Name            |Check transaction status
|2   |ID              |E14
|{nbsp} d|_Functional block_ |E. Transactions
|3   |Objective(s)    |To enable the CSMS to request the status of a transaction and to find out whether there are queued transaction-related messages.
|4   |Description
  |There are scenarios where a CSMS needs to know whether there are still messages for a transaction that need to be delivered. For example: A CSMS receives a <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Ended>>), it wants to start the billing process for this transaction but detects it is still missing some intermediate messages (it can check this via the sequence number in the messages). It can ask if the Charging Station has still messages in the queue for this transaction with the <<get_transaction_status_request,GetTransactionStatusRequest>> specifying the transactionId. Depending on the result the CSMS might for example: wait for the messages to be delivered, or start the billing process without the information. It may also need to know whether a transaction is still ongoing. If the CSMS wants to know if there are transaction-related messages in the queue at all (not just for a specific transaction), it can send a <<get_transaction_status_request,GetTransactionStatusRequest>> without a transactionId.
|{nbsp} d|_Actors_    |CSMS, Charging Station
|{nbsp} d|_Scenario description_ 
  |**1.** The CSMS sends a <<get_transaction_status_request,GetTransactionStatusRequest>> with or without a transactionId to the Charging Station. +
  **2.** The Charging Station responds with a <<get_transaction_status_response,GetTransactionStatusResponse>>.
|5   |Prerequisites   |The CSMS knows the transactionId of a transaction it wants to know the status of.
|6   |Postcondition(s) 
  |**Successful postcondition:** +
  The CSMS knows the status of the requested transaction. +
  **Failure postcondition:** +
  The CSMS does not know the status of the requested transaction.
|===

.Sequence Diagram: Check transaction status
image::part2/images/figure_63.svg[Sequence Diagram: Check transaction status]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7   |Error Handling  |n/a
|8   |Remarks
  |When the CSMS receives a <<get_transaction_status_response,GetTransactionStatusResponse>> with both fields (_ongoingIndicator_ and _messagesInQueue_) set to false, this might mean that the transaction is finished and there are no more messages in the queue for this transaction, or the Charging Station doesnâ€™t know anything about this transaction (anymore).
|===

==== E14 - Check transaction status - Requirements

.E14 - Requirements
[cols="^.^2,<.^5,<.^6",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID         |Precondition         |Requirement definition

|E14.FR.01  |The Charging Station receives a <<get_transaction_status_request,GetTransactionStatusRequest>> with a transactionId AND +
  It did not do a transaction with that transactionId
    |The Charging Station SHALL respond with _ongoingIndicator_ = false AND _messagesInQueue_ = false.
|E14.FR.02  |The Charging Station receives a <<get_transaction_status_request,GetTransactionStatusRequest>> with a transactionId AND +
  The transaction with that transactionId has not stopped yet
    |The Charging Stationâ€™s response SHALL have _ongoingIndicator_ = true.
|E14.FR.03  |The Charging Station receives a <<get_transaction_status_request,GetTransactionStatusRequest>> with a transactionId AND +
  The transaction with that transactionId has stopped
    |The Charging Stationâ€™s response SHALL have _ongoingIndicator_ = false.
|E14.FR.04  |The Charging Station receives a <<get_transaction_status_request,GetTransactionStatusRequest>> with a transactionId AND +
  It has transaction-related messages to be delivered about the transaction with that transactionId
    |The Charging Stationâ€™s response SHALL have _messagesInQueue_ = true.
|E14.FR.05  |The Charging Station receives a <<get_transaction_status_request,GetTransactionStatusRequest>> with a transactionId AND +
  It has no transaction-related messages to be delivered about the transaction with that transactionId
    |The Charging Stationâ€™s response SHALL have _messagesInQueue_ = false.
|E14.FR.06  |The Charging Station receives a <<get_transaction_status_request,GetTransactionStatusRequest>> without a transactionId
  |The Charging Stationâ€™s response SHALL NOT have _ongoingIndicator_ = set.
|E14.FR.07  |The Charging Station receives a <<get_transaction_status_request,GetTransactionStatusRequest>> without a transactionId AND +
  It has transaction-related messages to be delivered
    |The Charging Stationâ€™s response SHALL have _messagesInQueue_ = true.
|E14.FR.08  |The Charging Station receives a <<get_transaction_status_request,GetTransactionStatusRequest>> without a transactionId AND +
  It has no transaction-related messages to be delivered
    |The Charging Stationâ€™s response SHALL have _messagesInQueue_ = false.
|===

<<<

:sectnums:
=== Interrupting and Stopping ISO 15118 Charging

:sectnums!:
=== E15 - End of charging process

.E15 - End of charging process
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|No. |Type            |Description

|1   |Name            |End of charging process.
|2   |ID              |E15
|{nbsp} d|_Functional block_ |E. Transactions
|{nbsp} d|_Reference_ |<<iso15118_1,ISO15118-1>> H1 - End of charging process
|3   |Objective(s)    |See <<iso15118_1,ISO15118-1>>, use case Objective H1, page 44.
|4   |Description     |See <<iso15118_1,ISO15118-1>>, use case Description H1, page 44.
|{nbsp} d|_Actors_    |EV, EVSE, EV Driver
|{nbsp} d|_Scenario Description_
  |See <<iso15118_1,ISO15118-1>>, use case Description H1, Basic elementary use case description, first 5 bullets and last 2 remarks, page 44.

  **1.** The EV driver unplugs the cable from the EV +
  **2.** The Charging Station sends a <<transaction_event_request,TransactionEventRequest>> with eventType <<transaction_event_enum_type,eventType = Ended>> to the CSMS.
|7   |Prerequisites   |See <<iso15118_1,ISO15118-1>>, use case Prerequisites H1, page 44.
|8   |Postcondition(s)
  |The CSMS has received all relevant information about the transaction.

  See <<iso15118_1,ISO15118-1>>, use case End Conditions H1, page 44.
|===

.End of charging process
image::part2/images/figure_64.svg[End of charging process]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|9   |Error handling  |n/a
|10  |Remark(s) 
  |See <<iso15118_1,ISO15118-1>>, use case Requirements H1, page 44 for the trigger.

  The scenario description and sequence diagram above are based on the Configuration Variable for stop transaction being configured as follows. +
  <<tx_stop_point,`TxStopPoint`>>: <<tx_start_stop_point_values,ParkingBayOccupancy, EVConnected, Authorized, DataSigned, PowerPathClosed>> +
  This use-case is also valid for other configurations, but then the transaction might stop at another moment, which might change the sequence in which message are sent. For more details see the use case: <<e06_stop_transaction_options,E06 - Stop Transaction options>>
|===

Source: <<iso15118_1,ISO15118-1>>

==== E15 - End of charging process - Requirements

.E15 - Requirements
[cols="^.^2,<.^5,<.^6",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID         |Precondition         |Requirement definition

|E15.FR.01  |When configured to send meter data in the <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Ended>>), See: <<metervalues_configuration,Meter Values - Configuration>>
  |The Charging Station SHALL add the configured measurands to the optional meterValue field in the <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Ended>>) sent to the CSMS to provide more details about transaction usage.
|E15.FR.02  |E15.FR.01 +
  AND +
  The Charging Station is running low on memory
    |The Charging Station MAY drop meter data in the <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>) message.
|E15.FR.03  |E15.FR.02 
  |When dropping meter data, the Charging Station SHALL drop intermediate values first (1st value, 3th value, 5th etc), not start dropping values from the start of the list or stop adding values to the list.
|E15.FR.04  |When <<tx_stop_point,`TxStopPoint`>> contains "Authorized" or "PowerPathClosed" or "EnergyTransfer" AND Charging Station has not yet sent a <<transaction_event_request,TransactionEventRequest>> with _triggerReason_ = `StopAuthorized` when it receives a ISO 15118 SessionStopReq(Terminate) message from the EV
  |Charging Station SHALL send a <<transaction_event_request,TransactionEventRequest>> message with <<transaction_event_enum_type,eventType = Ended>> and _triggerReason_ = `StopAuthorized` and _stoppedReason_ = `StoppedByEV` to inform the CSMS that the charging transaction has been stopped (by the EV).
|E15.FR.05  |When <<tx_stop_point,`TxStopPoint`>> does not contain "Authorized" or "PowerPathClosed" or "EnergyTransfer" AND Charging Station has not yet sent a <<transaction_event_request,TransactionEventRequest>> with _triggerReason_ = `StopAuthorized` when it receives a ISO 15118 SessionStopReq(Terminate) message from the EV
  |Charging Station SHALL send a <<transaction_event_request,TransactionEventRequest>> message with <<transaction_event_enum_type,eventType = Updated>> and _triggerReason_ = `StopAuthorized` to inform the CSMS that the authorization has ended.
|===
