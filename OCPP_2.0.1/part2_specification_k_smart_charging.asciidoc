[[smart_charging]]
= K. SmartCharging
:!chapter-number:

<<<

:sectnums:
== Introduction

This Functional Block describes all the functionalities that enable the CSO (or a third party) to influence the charging current/power transferred during a transaction, or set limits to the amount of current/power a Charging Station can draw from the grid.

Smart Charging in general has more than one definition. It can mean that the grid capacity is used in such a manner that consumers are able to charge their batteries fully at any time, even if large groups of consumers wish to ‘fill up’ simultaneously. Smart can also mean that energy prices can be taken into consideration when charging. Or again smart can be taken as using a local supply of sustainable energy from solar panels. And it is even 'smarter' when the Electric Vehicle (EV) driver wishes to be part of the solution. Within OCPP, Smart Charging means that a CSMS gains the ability to influence the (de-)charging power or current of a specific EV, or the total allowed energy consumption on an entire Charging Station / a group of Charging Stations. Different setups can be used. The following four typical kinds of smart charging will be used to illustrate the possible behavior of smart charging using OCPP:

- Internal Load Balancing
- Central Smart Charging
- Local Smart Charging
- External Smart Charging Control Signals

These types will be explained in <<types_of_smart_charging,Types of Smart Charging>>. Of course, more complex use cases are possible in which two or more of the above use cases are combined into one more complex system.

[cols="^.^1,10",%autowidth.stretch]
|===
s|NOTE |A mapping of the ISO 15118 and OCPP terminology is provided in <<iso_15118_and_ocpp_terminology_mapping,ISO 15118 and OCPP terminology mapping>>
|===

<<<

[[types_of_smart_charging]]
== Types of Smart Charging

_This section is informative._

=== Internal Load Balancing

The simplest form of smart charging is the Load Balancing use case. This concerns internal load balancing within the Charging Station, where the Charging Station controls current/power per EVSE. The Charging Station is configured with a fixed limit, e.g. the maximum current of the connection to the grid. The Charging Station in this case is responsible for optimizing charging for all its EVSEs. When a charging station is not directly connected to the grid, the energy system of a client will be responsible for the power supply. +
This setup is typically used to set limits that are necessary due to known physical limits.

.Internal Load Balancing Smart Charging Topology
image::part2/images/figure_94.svg[Internal Load Balancing Smart Charging Topology]

[[central_smart_charging]]
=== Central Smart Charging

The next level in smart charging is when the CSMS has the ability to influence the charging power or current of a specific EV, the total allowed energy consumption on an entire Charging Station or a group of Charging Stations. Central Smart Charging assumes that charge limits are controlled by the CSMS. This could for example be based on a grid connection, energy availability on the grid (e.g. capacity forecast from the grid operator (DSO)) or the wiring of a building. In this setup, the CSMS can optimize charging not only on one Charging Station, but one level "up": it can optimize more than one Charging Station that share a connection and thus calculate a more efficient schedule for charging.

.Central Smart Charging Topology
image::part2/images/figure_95.svg[Central Smart Charging Topology]

Central Smart Charging can be done with a Control Pilot signal, albeit with some limitations, because an EV cannot communicate its charging needs via the Control Pilot signal. In analogy to the <<local_smart_charging,Local Smart Charging>> use case, an EVSE can execute a charging schedule by the Control Pilot signal.

[[local_smart_charging]]
=== Local Smart Charging

Local Smart Charging describes a use case in which smart charging enabled Charging Stations have charging limits controlled locally by a Local Controller, not the CSMS. This type of smart charging assumes the existence of a Local Controller, which is a logical component that controls a group of Charging Stations. A typical use would be a number of Charging Stations in a parking garage where the rating of the connection to the grid is less than the sum the ratings of the Charging Stations. Another application might be that the Local Controller receives information about the availability of power from a DSO or a local smart grid node.

[[local_smart_charging_topology]]
.Local Smart Charging Topology
image::part2/images/figure_96.svg[Local Smart Charging Topology]

=== External Smart Charging Control Signals

The OCPP protocol is originally developed for communication between a CSMS and one or more Charging Stations. As described in the above, this means that a Charging Station Operator (CSO) CSMS controls a Charging Station and, based on the charging limits of both the EV and the Charging Station, the CSO determines how fast the EV is charged. However, in some situations / applications of OCPP enabled Charging Stations, these are not the only 2 factors that determine the charging speed. Other inputs that determine charging speed could be DSO signals (e.g. via IEC 61850 <<iec61850_7_420,[IEC61850-7-420]>>, IEC 60870 <<iec60870_5_104,[IEC60870-5-104]>>, DNP3 <<dnp3,[DNP3]>> or OpenADR <<open_adr,[OPENADR]>>) or signals from a Building / Home Energy Management System. Although these signals are out of scope for OCPP, it seems clear from an OCPP perspective that the CSMS is to be informed of changes in charging by external signals. However, this also leads to a number of questions, such as how to deal with conflicting signals. The figure below presents an example setup with an Energy Management System, where the external signals are visualized both in a setup with direct communication to the Charging Station as well as a multiple Charging Station setup using a Local Controller:

.External Smart Charging
image::part2/images/figure_97.svg[External Smart Charging]

.External Smart Charging via LC
image::part2/images/figure_98.svg[External Smart Charging via LC]

If a Charging Station is connected both to the outside world as well as to an Energy Management System (EMS), this could result in a situation where the EMS, for whatever reason, decides that charging is not opportune, despite a charging schedule it might have received from the CSMS. This means that the Charging Station will not behave as expected by the CSMS. To prevent this, the Charging Station will have to be able to notify the CSMS that it has received a command from the EMS. An example reason could be an airconditioning system that is given preference / priority instead of charging an EV by a home user (in this case assuming that using the airconditioning and EV charging at the same time is not possible). This EMS might be in place to manage the maximum limit of a connection, but this can also be externally controlled.

<<<

== Charging profiles

=== Introduction

Influencing the charge power or current is based on sending energy transfer limits at specific points in time to a Charging Station. Those limits are combined in a <<charging_profile_type,ChargingProfile>>. A <<charging_profile_type,ChargingProfile>> holds the <<charging_schedule_type,ChargingSchedule>> which defines a block of charging Power or Current limits and can contain a start time and duration. These can be applied to Charging Stations as well as to EVSEs of the Charging Stations. In <<example_charging_profile,Example ChargingProfile>> an example of a <<charging_profile_type,ChargingProfile>> is given to illustrate how these charging profiles can be used.

A CSMS can send a charging profile to a Charging Station using the message <<set_charging_profile_request,SetChargingProfileRequest>>, in the following situations:

- At the start of a transaction to set the charging profile for the transaction
- In a RequestStartTransaction request sent to a Charging Station
- During a transaction to change the active profile for the transaction
- Outside the context of a transaction as a separate message to set a charging profile to a local controller, Charging Station, or a default charging profile to an EVSE.

[[charging_profile_purpose]]
=== Charging profile purposes

This section describes a number of types of charging profiles that are supported in OCPP. There are four different types of charging profiles, depending on their _purpose_ :

[cols="<.^2,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ChargingProfile +
Purpose             |Description

|[[charging_station_max_profile]]ChargingStationMaxProfile
  |In internal load balancing scenarios, the Charging Station has one or more local charging profiles that limit the power or current to be shared by all EVSEs of the Charging Station. The CSMS SHALL configure such a profile with ChargingProfilePurpose set to "_ChargingStationMaxProfile_". +
  _ChargingStationMaxProfile_ can only be set at Charging Station evseId 0.
|[[tx_profile]]TxProfile
  |A transaction-specific profile with purpose TxProfile overrules the <<tx_default_profile,TxDefaultProfile>> for the duration of the current transaction only or until the TxProfile expires, whichever occurs earlier.
|[[tx_default_profile]]TxDefaultProfile
  |Default schedules for new transactions that MAY be used to impose charging policies. An example could be a policy that prevents charging during the day.
|[[charging_station_external_constraints]]ChargingStationExternalConstraints
  |When an external system, not the CSMS, sets a charging limit or schedule, the Charging Station uses this purpose to report such a limit/schedule.
|===

=== Charging profile recurrency

This section explains the different kinds of charging schedules that can be use in a charging profile, as defined by the value of the attribute _chargingProfileKind_ :

[cols="<.^2,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ChargingProfile +
Kind                |Description

|Absolute
  |The charging schedule periods are relative to an absolute point in time defined in the schedule. This requires that _startSchedule_ is set to a starting point in time. Use this, for example, to define a schedule that reduces charging between 17:00h and 21:00h, regardless of when charging session was started.
|Recurring
  |The charging schedule restarts periodically at the first schedule period. To be most useful, this requires that _startSchedule_ is set to a starting point in time. Use this in combination with _recurrencyKind_ = `Daily`, +
  for example, to define a schedule that reduces charging between 17:00h and 21:00h every day, regardless of when charging session was started.
|Relative
  |Charging schedule periods should start when the EVSE is ready to deliver energy. i.e. when the EV driver is authorized and the EV is connected. When a ChargingProfile is received for a transaction that is already charging, then the charging schedule periods should remain relative to the PowerPathClosed moment. +
  No value for startSchedule should be supplied.
|===

=== Stacking charging profiles

It is allowed to stack charging profiles of the same <<charging_profile_type,ChargingProfile>> purpose in order to describe complex calendars. For example, one can define <<charging_profile_type,ChargingProfile>> of purpose <<tx_default_profile,TxDefaultProfile>> with a duration and recurrence of one week that allows full power or current charging on weekdays from 23:00h to 06:00h and from 00:00h to 24:00h in weekends and reduced power or current charging at other times. On top of that, one can define other <<tx_default_profile,TxDefaultProfiles>> that define exceptions to this rule, for example for holidays.

A <<charging_profile_type,ChargingProfile>> holds a <<charging_schedule_type,ChargingSchedule>> that defines limits for a certain time interval. Precedence of <<charging_schedule_type,ChargingSchedule>>s is determined by the _stackLevel_ of their <<charging_profile_type,ChargingProfile>>. When more than one <<charging_profile_type,ChargingProfile>> with the same <<charging_profile_purpose,chargingProfilePurpose>> is valid, then a <<charging_schedule_type,ChargingSchedule>> of a <<charging_profile_type,ChargingProfile>> with a higher stack level overrules a <<charging_schedule_type,ChargingSchedule>> from a <<charging_profile_type,ChargingProfile>> with a lower stack level.

To avoid conflicts, it is not allowed to have multiple charging profiles with the same _stackLevel_ and same _chargingProfilePurpose_ to be valid on the same EVSE at a given time. Note, that a charging profile for EVSE #0 is considered to be active on all EVSEs!

[[combining_charging_profile_purposes]]
=== Combining Charging Profile Purposes

The Composite Schedule that will guide the charging level is a combination of the prevailing Charging Profiles of the different <<charging_profile_purpose,chargingProfilePurposes>> and stack levels.

As mentioned before, for each charging profile purpose, at any point in time, the leading charging schedule for that purpose is the charging schedule that has a schedule period defined for that time and that belongs to a charging profile with the highest stack level that is valid at that time, as determined by their _validFrom_ and _validTo_ parameters. The Composite Schedule is then calculated by taking the lowest charging limit (taking the different <<charging_rate_unit_enum_type,chargingRateUnits>> into account) among the leading profiles of the different purposes for each time interval.

The only exception is when both a <<tx_default_profile,TxDefaultProfiles>> and a <<tx_profile,TxProfile>> are valid. In that case, the <<tx_profile,TxProfile>> will always overrule the <<tx_default_profile,TxDefaultProfiles>>, hence the Composite Schedule will not take the leading profile of purpose <<tx_default_profile,TxDefaultProfiles>> into account in this specific situation. Note that time intervals do not have to be of fixed length, nor do they have to be the same for every <<charging_profile_type,ChargingProfile>> purpose. This means that a resulting Composite Schedule MAY contain intervals of different lengths.

In case the Charging Station is equipped with more than one EVSE, the limit value of ChargingStationMaxProfile is the limit for all EVSEs combined.

The two figures below will be used to give an example of combining multiple charging profiles with different stackLevels and Purposes.

.Multiple valid charging profiles - situation 1
image::part2/images/figure_99.svg[Multiple valid charging profiles - situation 1]

Suppose that at a certain time interval the valid charging profiles are as in the above figure (situation 1). The composite schedule for this time interval will then be the lowest of the charging limits given in the ChargingStationMaxProfile with stackLevel 0, the TxDefaultProfile with stackLevel 2 and the ChargingStationExternalConstraints profile with stackLevel 1.

.Multiple valid charging profiles - situation 2
image::part2/images/figure_100.svg[Multiple valid charging profiles - situation 2]

On the other hand, consider the situation in which for a certain time interval the valid charging profiles are as in the above figure (situation 2). The composite schedule for this time interval will then be the lowest of the charging limits given in the ChargingStationMaxProfile with stackLevel 0, the TxProfile with stackLevel 1 and the ChargingStationExternalConstraints profile with stackLevel 1. Note that in this situation the <<tx_profile,TxProfile>> overrules the <<tx_default_profile,TxDefaultProfiles>>.

[[example_charging_profile]]
=== Example Charging Profile

This section is informative.

The following data structure describes a daily default profile that limits the power to 6 kW between 08:00h and 20:00h and to 11 kW between 00:00h and 08:00h and between 20:00h and 00:00h.


[cols="<.^1,<.^1,<.^1,<.^1",%autowidth.stretch,frame=all,grid=all]
|===
s|ChargingProfile     |{nbsp}             |{nbsp}           |{nbsp}
|chargingProfileId   s|100                |{nbsp}           |{nbsp}
|stackLevel          s|0                  |{nbsp}           |{nbsp}
|chargingProfilePurpose s|TxDefaultProfile |{nbsp}          |{nbsp}
|chargingProfileKind s|Recurring          |{nbsp}           |{nbsp}
|recurrencyKind      s|Daily              |{nbsp}           |{nbsp}
|chargingSchedule    3.+|_(List of 1 <<charging_schedule_type,ChargingSchedule>> elements)_ 
|{nbsp}              s|ChargingSchedule   |{nbsp}           |{nbsp}
|{nbsp}               |duration          s|86400 (= 24 hours) |{nbsp}
|{nbsp}               |startSchedule     s|2013-01-01T00:00Z |{nbsp}
|{nbsp}               |chargingRateUnit  s|W                |{nbsp}
|{nbsp}               |chargingSchedulePeriod
  2.+|(List of 3 <<charging_schedule_period_type,ChargingSchedulePeriod>> elements)
|{nbsp}               |{nbsp}            s|ChargingSchedulePeriod |{nbsp}
|{nbsp}               |{nbsp}            s|startPeriod     s|0 (=00:00)
|{nbsp}               |{nbsp}             |limit           s|11000
|{nbsp}               |{nbsp}             |numberPhases     |3
|{nbsp}               |{nbsp}            s|ChargingSchedulePeriod |{nbsp}
|{nbsp}               |{nbsp}             |startPeriod     s|28800 (=08:00)
|{nbsp}               |{nbsp}             |limit           s|6000
|{nbsp}               |{nbsp}             |numberPhases     |3
|{nbsp}               |{nbsp}            s|ChargingSchedulePeriod |{nbsp}
|{nbsp}               |{nbsp}             |startPeriod     s|72000 (=20:00)
|{nbsp}               |{nbsp}             |limit           s|11000
|{nbsp}               |{nbsp}             |numberPhases     |3
|===

[cols="^.^1,10",%autowidth.stretch]
|===
s|IMPORTANT |The amount of phases used during charging is limited by the capabilities of: The Charging Station, EV and Cable between CS and EV. If any of these three is not capable of 3 phase charging, the EV will be charged using the number of phases that is supported by all three.
|===

[cols="^.^1,10",%autowidth.stretch]
|===
s|IMPORTANT |Switching the number of used phases during a schedule or transaction should be done with care. Some EVs MAY not support this and changing the amount of phases MAY result in physical damage. With the Configuration Variable: <<phases_3_to_1,Phases3to1>> The Charging Station can tell if it supports switching the amount of phases during a transaction.
|===

[cols="^.^1,10",%autowidth.stretch]
|===
s|TIP |On days on which daylight saving goes into or out of effect, a special profile might be needed (e.g. for relativeprofiles).
|===

==== Example Using Stacked Charging Profiles

A CSO wishes to limit charging to 2 kW during the peak hours of the day from 17:00h to 20:00h. This limit does not apply to Sundays and this limit does not apply to Christmas Day either.

If this applies to a large number or charging stations, then it is not practical to delete the charging profile every Sunday and then add it again on Monday. A possible solution is to add profiles with higher stack level for the exceptions to the base profile. See the following JSON examples where stack levels #2 and #3 are used to define exceptions for Sunday and Christmas.

**(1) TxDefaultProfile, stack #1:** time-of-day limitation to 2 kW, recurring every day from 17:00h to 20:00h.

[,json]
----
"chargingProfile": {
  "id": 10, "stackLevel": 1, "chargingProfilePurpose": "TxDefaultProfile",
  "chargingProfileKind": "Recurring", "recurrencyKind": "Daily",
  "chargingSchedule": [ {
    "id": 1, "startSchedule": "2020-01-09T17:00:00", "duration": 1080,
    "chargingRateUnit": "W",
    "chargingSchedulePeriod": [ { "startPeriod": 0, "limit": 2000 } ]
  } ]
}
----

**(2) TxDefaultProfile, stack #2:** overruling Sundays to no limit, recurring every week starting 2020-01-05.

[,json]
----
"chargingProfile": {
  "id": 11, "stackLevel": 2, "chargingProfilePurpose": "TxDefaultProfile",
  "chargingProfileKind": "Recurring", "recurrencyKind": "Weekly",
  "chargingSchedule": [ {
    "id": 1, "startSchedule": "2020-01-05T00:00:00", "duration": 86400,
    "chargingRateUnit": "W",
    "chargingSchedulePeriod": [ { "startPeriod": 0, "limit": 999999 } ]
  } ]
}
----

**(3) TxDefaultProfile, stack #3:** overruling Christmas Day 2020 to no limit, fixed date 2020-12-25.
Note, that this profile is only valid in the year 2020.

[,json]
----
  "chargingProfile": {
    "id": 12, "stackLevel": 3, "chargingProfilePurpose": "TxDefaultProfile",
    "chargingProfileKind": "Absolute",
    "validFrom": "2020-01-01T00:00:00", "validTo": "2021-01-01T00:00:00",
    "chargingSchedule": [ {
      "id": 1, "startSchedule": "2020-12-25T00:00:00", "duration": 86400,
      "chargingRateUnit": "W",
      "chargingSchedulePeriod": [ { "startPeriod": 0, "limit": 999999 } ]
    } ]
  }
----

[cols="^.^1,10",%autowidth.stretch]
|===
s|NOTE |Normally, when no limits are desired for charging, one will not define a charging schedule period for those hours (see stack level #1 for hours outside 17:00h - 20:00h). However, when overruling a charging schedule by one from a profile with a higher stack level, it is not possible to define a charging schedule period that has no limit. Therefore, the charging schedules for stack #2 and #3 in the above example use a (arbitrary) high value of 999999.
|===

<<<

[[smart_charging_signals_to_a_charging_station_from_multiple_actors]]
== Smart Charging Signals to a Charging Station from Multiple Actors

This section is normative.

Within OCPP, multiple mechanism are supported for Smart Charging, i.e. multiple mechanisms are available that can add a limit when charging an EV:

. The CSMS can influence charging by sending a SetChargingProfile message to the Charging Station. See <<k01_set_charging_profile,K01 - SetChargingProfile>>.
. The EV can influence charging based on the PlugAndCharge functionality: the ISO 15118 enables EV initiated Charging Limits. See Section <<iso_15118_based_smart_charging,5.3. ISO 15118 based Smart Charging>>.
. Some local input, for example a Home Energy Management System (HEMS) or DSO, can influence the charging, for example via an External Smart Charging Control signal. See <<k11_set_update_external_charging_limit_with_ongoing_transaction,K11 - Set / Update External Charging Limit>>.
. A Charging Station can limit charging when it is load balancing when more than 1 EV is charging.

The assumption is that all parties that might be involved in setting limits for charging an EV will use one of the above mechanisms directly or indirectly.

To determine how a Charging Station should respond to simultaneous smart charging signals from multiple actors, the following rules should be followed:

.Smart Charging rules for multiple actor situation
[cols="^.^2,<.^6,<.^6,<.^4",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID         |Precondition         |Requirement definition     |Note

|SC.01      |{nbsp}
  |At any point in time, the charging limit, which is the result of merging the schedules from external sources and the OCPP charging profiles with the highest stackLevel from each of the purposes ChargingStationMaxProfile, ChargingStationExternalConstraints and TxDefaultProfile (or TxProfile), SHALL be less than or equal to the lowest value of available power or current in any of the merged schedules.
    |For safety purposes.
|SC.02      |When the ChargingProfile has changed
  |The Charging Station SHALL always inform the CSMS.
    |The message used for this varies depending on the which of the mechanisms mentioned at the start of this section is applicable:

    1. n/a
    2. <<notify_ev_charging_schedule_request,NotifyEVChargingScheduleRequest>>
    3. <<notify_charging_limit_request,NotifyChargingLimitRequest>>
    4. <<transaction_event_request,TransactionEventRequest>>
|SC.03      |{nbsp}
  |Reporting to the CSMS concerning a changed limit in the ChargingProfile for mechanisms 3 and 4 as described in SC.02 MAY be skipped if the change in the limit is smaller than the percentage defined in the Configuration Variable: <<limit_change_significance,`LimitChangeSignificance`>>.
    |This is to prevent the Charging Station to send a lot of messages for small fluctuations (e.g. due to HEMS / smart meter input at the Charging Station)
|SC.04      |{nbsp}
  |The <<get_compositie_schedule_response,GetCompositeScheduleResponse>> message SHALL always report the expected charging schedule, i.e. the lowest _limit_ for charging. This means that when an EV has a charging limit X and indicates (e.g. using the ISO 15118 protocol) that it will use less energy than offered, amount Y, the Charging Station SHALL report limit Y. |{nbsp}
|===

<<<

== Use cases & Requirements

=== General Smart Charging

:sectnums!:
[[k01_set_charging_profile]]
=== K01 - SetChargingProfile

.K01 - Central Smart Charging
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|No. |Type            |Description

|1   |Name            |SetChargingProfile
|2   |ID              |K01
|{nbsp} d|_Functional block_ |K. Smart Charging
|3   |Objective(s)    |To enable the CSMS to influence the charging power or current drawn from a specific EVSE or the entire Charging Station over a period of time.
|4   |Description     |The CSMS sends a <<set_charging_profile_request,SetChargingProfileRequest>> to the Charging Station to influence the power or current drawn by EVs. The CSMS calculates a <<charging_schedule_type,ChargingSchedule>> to stay within certain limits, which MAY be imposed by any external system.
|{nbsp} d|_Actors_    |Charging Station, CSMS, EV
|{nbsp} d|_Scenario description_
  |**1.** The CSMS sets charging limits by sending <<set_charging_profile_request,SetChargingProfileRequest>> to the Charging Station. +
  **2.** The Charging Station responds with <<set_charging_profile_response,SetChargingProfileResponse>>.
|5   |Prerequisite(s) |n/a
|6   |Postcondition(s) 
  |**Successful postcondition:** +
  The Charging Station _Successfully_ influences the charging power or current of a specific EV,following the <<set_charging_profile_request,SetChargingProfileRequest>> sent by the CSMS.

  **Failure postcondition:** +
  The Charging Station was _not_ able to influence the charging power or current of a specific EV, following the <<set_charging_profile_request,SetChargingProfileRequest>> sent by the CSMS.
|===

.Sequence Diagram: SetChargingProfile
image::part2/images/figure_101.svg[Sequence Diagram: SetChargingProfile]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7   |Error handling   |n/a
|8   |Remark(s)        |n/a
|===

==== K01 - SetChargingProfile - Requirements

.K01 - Requirements
[cols="^.^2,<.^6,<.^6,<.^4",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID         |Precondition         |Requirement definition     |Note

|K01.FR.01  |{nbsp}
  |The CSMS MAY choose to set charging limits to a transaction using <<tx_profile,TxProfile>>. |{nbsp}
|K01.FR.02  |{nbsp}
  |The CSMS MAY send a new charging profile for the EVSE that SHALL be used as a limit schedule for the EV. |{nbsp}
|K01.FR.03  |{nbsp}
  |The CSMS SHALL include the _transactionId_ in the <<set_charging_profile_request,SetChargingProfileRequest>> when setting a <<tx_profile,TxProfile>>.
    |The transactionId is used to match the profile to a specific transaction.
|K01.FR.04  |K01.FR.03 AND +
  the given _transactionId_ is known
    |The Charging Station SHALL apply the sent <<tx_profile,TxProfile>> to the transaction with the specified _transactionId_. |{nbsp}
|K01.FR.05  |When a <<set_charging_profile_request,SetChargingProfileRequest>> with an already known <<charging_profile_type,ChargingProfile>>._id_ is received AND the existing <<charging_profile_type,ChargingProfile>> does NOT have <<charging_profile_purpose,chargingProfilePurpose>> = `ChargingStationExternalConstraints`
  |The Charging Station SHALL replace the existing <<charging_profile_type,ChargingProfile>> with the one specified.
    |ChargingStationExternalCon straints profile cannot be replaced.
|K01.FR.06  |When _chargingProfilePurpose_ is NOT `TxProfile`
  |The CSMS SHALL NOT send a <<charging_profile_type,ChargingProfile>> with a _stackLevel - chargingProfilePurpose - evseId_ combination that already exists in another <<charging_profile_type,ChargingProfile>> (with different _id_) on the Charging Station and has an overlapping validity period.
    |This is to ensure that no two charging profiles with same stack level and purpose can be valid at the same time.
|K01.FR.07  |When the Charging Station _accepts_ a <<set_charging_profile_request,SetChargingProfileRequest>>
  |The Charging Station SHALL re-evaluate its collection of charging profiles to determine which <<charging_profile_type,ChargingProfile>> will become active. |{nbsp}
|K01.FR.08  |{nbsp}
  |The CSMS MAY send charging profiles to a Charging Station that are to be used as default charging profiles. |{nbsp}
|K01.FR.09  |When a <<set_charging_profile_request,SetChargingProfileRequest>> with a <<tx_profile,TxProfile>> is received AND there is no transaction active on the specified EVSE
  |The Charging Station SHALL send a <<set_charging_profile_response,SetChargingProfileResponse>> with status `Rejected`. |{nbsp}
|K01.FR.10  |When _validFrom_ and _validTo_ of a <<charging_profile_type,ChargingProfile>> are not set
  |The Charging Station SHALL consider the <<charging_profile_type,ChargingProfile>> to be valid indefinitely until it is explicitly replaced. |{nbsp}
|K01.FR.11  |If <<charging_schedule_type,ChargingSchedule>> has a _duration_ AND +
  <<charging_schedule_period_type,ChargingSchedulePeriod>>._startPeriod_ >= <<charging_schedule_type,ChargingSchedule>>._duration_
    |The Charging Station SHALL not execute the <<charging_schedule_period_type,ChargingSchedulePeriod>>, because it is past the duration of the <<charging_schedule_type,ChargingSchedule>>. |{nbsp}
|K01.FR.12  |{nbsp}
  |A <<charging_schedule_period_type,ChargingSchedulePeriod>> remains active until the next <<charging_schedule_period_type,ChargingSchedulePeriod>> in the list starts or until <<charging_schedule_type,ChargingSchedule>>._duration_ has elapsed. |{nbsp}
|K01.FR.13  |When <<recurrency_kind_enum_type,recurrencyKind>> is used in combination with a <<charging_schedule_type,ChargingSchedule>> duration shorter than <<recurrency_kind_enum_type,recurrencyKind>> period.
  |The Charging Station SHALL fall back to default behavior after <<charging_schedule_type,ChargingSchedule>> duration ends. |{nbsp}
|K01.FR.14  |When a <<set_charging_profile_request,SetChargingProfileRequest>> with a <<tx_default_profile,TxDefaultProfile>> and evseId = 0 is received AND No other <<tx_default_profile,TxDefaultProfile>> with the same stackLevel is installed on any specific EVSE.
  |The Charging Station SHALL apply, but not copy, this profile to all EVSEs.
    |A TxDefaultProfile charging profile on EVSE #0 is “owned by” EVSE #0, but has effect on all EVSEs.
|K01.FR.15  |When a <<set_charging_profile_request,SetChargingProfileRequest>> with a <<tx_default_profile,TxDefaultProfile>> and evseId > 0 is received AND No <<tx_default_profile,TxDefaultProfile>> with the same stackLevel is installed on EVSE #0.
  |The Charging Station SHALL only apply this profile to the specified EVSE. |{nbsp}
|K01.FR.16  |{nbsp}
  |<<tx_profile,TxProfile>> SHALL only be be used with evseId >0. |{nbsp}
|K01.FR.17  |{nbsp}
  |When more than one <<charging_profile_type,ChargingProfile>> with the same <<charging_profile_purpose,chargingProfilePurpose>> is valid, as determined by their _validFrom_ and _validTo_ fields, then a <<charging_schedule_type,ChargingSchedule>> from a <<charging_profile_type,ChargingProfile>> with a higher _stackLevel_ overrules a <<charging_schedule_type,ChargingSchedule>> from a <<charging_profile_type,ChargingProfile>> with a lower _stackLevel_. |{nbsp}
|K01.FR.19  |{nbsp}
  |The CSMS SHALL NOT set <<charging_schedule_period_type,phaseToUse>> in a <<set_charging_profile_request,SetChargingProfileRequest>> when <<charging_schedule_period_type,numberPhases>> is other than 1. |{nbsp}
|K01.FR.20  |{nbsp}
  |The CSMS SHALL NOT set <<charging_schedule_period_type,phaseToUse>> in a <<set_charging_profile_request,SetChargingProfileRequest>> when the EVSE does not have <<ac_phase_switching_supported,ACPhaseSwitchingSupported>> defined and set to true. |{nbsp}
|K01.FR.21  |{nbsp}
  |The optional <<charging_schedule_type,ChargingSchedule>> field <<charging_schedule_type,minChargingRate>> MAY be used by the Charging Station to optimize the power distribution between the EVSEs.
    |The parameter informs the Local Controller that charging below <<charging_schedule_type,minChargingRate>> is inefficient, giving the possibility to select another balancing strategy.
|K01.FR.22  |{nbsp}
  |The CSMS SHALL NOT set <<charging_profile_purpose,chargingProfilePurpose>> to <<charging_station_external_constraints,ChargingStationExternalConstraints>> in a <<set_charging_profile_request,SetChargingProfileRequest>>.
    |This purpose is only used when an external system has set a charging limit/schedule.
|K01.FR.26  |When a <<set_charging_profile_request,SetChargingProfileRequest>> is received with a value for _chargingRateUnit_, that is not configured in the configuration variable `ChargingScheduleChargingRateUnit`.
  |Charging Station SHALL respond with <<set_charging_profile_response,SetChargingProfileResponse>> with status `Rejected`. |{nbsp}
|K01.FR.27  |{nbsp}
  |ChargingProfiles set via SetChargingProfileRequest SHALL be persistent across reboots/power cycles. |{nbsp}
|K01.FR.28  |When a <<set_charging_profile_request,SetChargingProfileRequest>> is received for an evseId that does not exist.
  |Charging Station SHALL respond with <<set_charging_profile_response,SetChargingProfileResponse>> with status `Rejected` |{nbsp}
|K01.FR.29  |When Charging Station does not support smart charging.
  |Charging Station SHALL respond with RPC Framework CALLERROR: NotSupported or NotImplemented. |{nbsp}
|K01.FR.30  |_chargingProfile_ has a _chargingSchedule_ with _startSchedule_ set to a time in the future
  |The Charging Station SHALL only start imposing the limitation of this schedule as of point in time set by _startSchedule_ |{nbsp}
|K01.FR.31  |{nbsp}
  |The _startPeriod_ of the first <<charging_schedule_period_type,chargingSchedulePeriod>> in a <<charging_schedule_type,chargingSchedule>> SHALL always be 0. |{nbsp}
|K01.FR.32  |(K01.FR.14 OR K01.FR.15) AND a transaction is active on the specified EVSE(s) (evseId = 0 refers to all EVSEs.)
  |The Charging Station SHALL continue the transaction on the specified EVSE(s), but switch to using the new/updated <<tx_default_profile,TxDefaultProfile>>. |{nbsp}
|K01.FR.33  |K01.FR.03 AND +
  the given transactionId is not known
    |The Charging Station SHALL reject the <<set_charging_profile_request,SetChargingProfileRequest>>. |{nbsp}
|K01.FR.34  |The CSMS has not received a <<notify_ev_charging_needs_request,NotifyEVChargingNeedsRequest>> for the current transaction, i.e. charging session is not using ISO 15118
  |The <<charging_profile_type,ChargingProfile>> in the <<set_charging_profile_request,SetChargingProfileRequest>> SHALL contain only one <<charging_schedule_type,ChargingScheduleType>>.
    |See use cases K15-K17 for ISO 15118 smart charging.
|K01.FR.35  |{nbsp}
  |The list of <<charging_schedule_period_type,ChargingSchedulePeriod>> elements in a <<charging_schedule_type,chargingSchedule>> SHALL be ordered by increasing values of <<charging_schedule_period_type,ChargingSchedulePeriod>>._startPeriod_.
    |This means the list is in chronological order
|K01.FR.36  |When _validFrom_ of a <<charging_profile_type,ChargingProfile>> is set
  |The Charging Station SHALL consider the <<charging_profile_type,ChargingProfile>> to be valid when current time >= _validFrom_. |{nbsp}
|K01.FR.37  |When _validTo_ of a <<charging_profile_type,ChargingProfile>> is set
  |The Charging Station SHALL consider the <<charging_profile_type,ChargingProfile>> to be valid when current time < _validTo_. |{nbsp}
|K01.FR.38  |When _chargingProfilePurpose_ = `ChargingStationMaxProfile`
  |_chargingProfileKind_ SHALL NOT be `Relative` |{nbsp}
|K01.FR.39  |When _chargingProfilePurpose_ is `TxProfile`
  |The CSMS SHALL NOT send a <<charging_profile_type,ChargingProfile>> with a _stackLevel - transactionId_ combination that already exists in another <<charging_profile_type,ChargingProfile>> (with different _id_) with purpose `TxProfile`.
    |This is to ensure that no two charging profiles with same stack level and purpose can be valid at the same time.
|K01.FR.40  |When _chargingProfileKind_ of a <<charging_profile_type,ChargingProfile>> is `Absolute` or `Recurring`
  |A value for _startSchedule_ SHALL exist in the <<charging_schedule_type,ChargingSchedule>> of the <<charging_profile_type,ChargingProfile>>.
    |This determines start datetime of the schedule and of the recurrency sequence.
|K01.FR.41  |When _chargingProfileKind_ of a <<charging_profile_type,ChargingProfile>> is `Relative`
  |The field _startSchedule_ SHALL be absent in the <<charging_schedule_type,ChargingSchedule>> of the <<charging_profile_type,ChargingProfile>>.
    |A relative profile starts from when the profile is activated.
|K01.FR.42  |K01.FR.41
  |It is RECOMMENDED to make the <<charging_schedule_period_type,ChargingSchedulePeriods>> relative to the moment the Charging Station is ready to deliver energy. i.e. when the EV driver is authorized and the EV is connected.
    |This is the point in a transaction where the charging station is ready to deliver energy. If PowerPathClosed is a TxStartPoint, then this will concur with the start of a transaction. In the next OCPP version, this will become a more strict requirement.
|K01.FR.43  |When a <<set_charging_profile_request,SetChargingProfileRequest>> with a value for numberPhases is received AND the EVSE is of type AC AND the Charging Station cannot ensure that no more than the received numberPhases will be used
  |The Charging Station SHALL respond with status = `Rejected`
    |Note that even when for example the <<charging_profile_type,ChargingProfile>> defines 3 phases and the Charging Station is able to charge with 3 phases, it is not guaranteed that the EV or cable are able to charge with 3 phases. +
    Based on received MeterValues the CSMS can determine the used number of phases. Please refer to requirement K01.FR.50 and K01.FR.51, for correctly calculating the limits per phase.
|K01.FR.44  |When a <<set_charging_profile_request,SetChargingProfileRequest>> with a value for _numberPhases_ or _phaseToUse_ is received AND +
  the EVSE is of type DC
    |The Charging Station MAY respond with status = _Accepted_, instead of Rejected and ignore the provided values for _numberPhases_ and _phaseToUse_. |{nbsp}
|K01.FR.45  |When a <<set_charging_profile_request,SetChargingProfileRequest>> with a value for _numberPhases_ is received AND +
  the EVSE is of type AC AND the received _numberPhases_ is NOT supported by the Charging Station and higher than the _numberPhases_ that are supported by the Charging Station
    |The Charging Station MAY respond with status = _Accepted_, instead of _Rejected_ and impose the limits to a lower _numberPhases_
      |Please refer to requirement K01.FR.50 and K01.FR.51, for correctly calculating the limits per phase.
|K01.FR.46  |When a <<set_charging_profile_request,SetChargingProfileRequest>> with _numberPhases = 1_ and a value for _phaseToUse_ is received AND +
  the EVSE is of type AC AND the EVSE is capable of switching the phase connected to the EV, which is indicated by <<ac_phase_switching_supported,ACPhaseSwitchingSupported>> defined as _true_ OR +
  the EVSE is already going to use the received _phaseToUse_
    |The Charging Station SHALL use the phase indicated by the received _phaseToUse_ to connect to the EV. |{nbsp}
|K01.FR.47  |When a <<set_charging_profile_request,SetChargingProfileRequest>> with _numberPhases = 1_ and _phaseToUse_ is omitted is received AND +
  the EVSE is of type AC
    |The Charging Station SHALL select the phase on its own. |{nbsp}
|K01.FR.48  |When a <<set_charging_profile_request,SetChargingProfileRequest>> with a value for _phaseToUse_ is received AND +
  the EVSE is NOT capable of switching the phase connected to the EV, which is indicated by <<ac_phase_switching_supported,ACPhaseSwitchingSupported>> not being implemented or defined as _false_ AND +
  the EVSE is NOT going to use the received _phaseToUse_
    |The Charging Station SHALL respond with status = _Rejected_. |{nbsp}
|K01.FR.49  |When a <<set_charging_profile_request,SetChargingProfileRequest>> without a value for _numberPhases_ is received AND +
  the EVSE is of type AC
    |The Charging Station SHALL assume numberPhases = 3 as a default value. |{nbsp}
|K01.FR.50  |When a <<set_charging_profile_request,SetChargingProfileRequest>> with a <<charging_rate_unit_enum_type,chargingRateUnit>> = _W_ is received AND +
  The ChargingSchedule is used for AC charging
    |The Charging Station SHOULD calculate the phase current limit via: Current per phase  Power / (Line Voltage * Number of Phases).
      |The "Line Voltage" used in the calculation is not the measured voltage, but the set voltage for the area (for example, 230 or 110 V). The "Number of Phases" is the numberPhases from the ChargingSchedulePeriod. It is usually more convenient to use <<charging_rate_unit_enum_type,chargingRateUnit>> = _A_ for AC charging.
|K01.FR.51  |When a <<set_charging_profile_request,SetChargingProfileRequest>> with a <<charging_rate_unit_enum_type,chargingRateUnit>> = _A_ is received
  |The Charging Station SHALL use the provided limits, to limit the amount of Ampere per phase, not the sum of all phases. |{nbsp}
|K01.FR.52  |When a <<set_charging_profile_request,SetChargingProfileRequest>> with a <<tx_default_profile,TxDefaultProfile>> and _evseId_ = 0 is received AND +
  A <<tx_default_profile,TxDefaultProfile>> with the same stackLevel is installed on a specific EVSE and its _chargingProfile.id_ does NOT equal the received _chargingProfile.id_
    |The Charging Station SHALL respond with a <<set_charging_profile_response,SetChargingProfileResponse>> with status `Rejected` and optionally with _reasonCode_ = `DuplicateProfile`. |{nbsp}
|K01.FR.53  |When a <<set_charging_profile_request,SetChargingProfileRequest>> with a <<tx_default_profile,TxDefaultProfile>> and _evseId_ > 0 is received AND +
  A <<tx_default_profile,TxDefaultProfile>> with the same _stackLevel_ is installed on EVSE #0 and its _chargingProfile.id_ does NOT equal the received _chargingProfile.id_
    |The Charging Station SHALL respond with a <<set_charging_profile_response,SetChargingProfileResponse>> with status `Rejected` and optionally with _reasonCode_ = `DuplicateProfile`. |{nbsp}
|===

=== K02 - Central Smart Charging

.K02 - Central Smart Charging
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|No. |Type            |Description

|1   |Name            |Central Smart Charging
|2   |ID              |K02
|{nbsp} d|_Functional block_ |K. Smart Charging
|3   |Objective(s)    |To enable the CSMS to influence the charging power or current drawn from a specific EVSE or the entire Charging Station over a period of time.
|4   |Description     |The CSMS sends a <<set_charging_profile_request,SetChargingProfileRequest>> to the Charging Station to influence the power or current drawn by the EV. The CSMS calculates a <<charging_schedule_type,ChargingSchedule>> to stay within limits which MAY be imposed by any external system.

See: <<central_smart_charging,Central Smart Charging>>
|{nbsp} d|_Actors_    |Charging Station, CSMS, EV, EV Driver
|{nbsp} d|_Scenario description_
  |**1.** After authorization the Charging Station will set a maximum current, that an EV might draw via the Control Pilot signal. This limit is based on (default) <<charging_profile_type,ChargingProfiles>> that the Charging Station previously received from the CSMS. +
  **2.** The EV starts charging and a <<transaction_event_request,TransactionEventRequest>> is sent to the CSMS. +
  **3.** The CSMS responds with a <<transaction_event_response,TransactionEventResponse>>. +
  **4.** In response to a <<transaction_event_request,TransactionEventRequest>> the CSMS MAY choose to set charging limits to the transaction using a <<set_charging_profile_request,SetChargingProfileRequest>>. +
  **5.** The Charging Station responds with a <<set_charging_profile_response,SetChargingProfileResponse>>. +
  **6.** While charging is in progress the EVSE will continuously adapt the maximum current or power according to the installed <<charging_profile_type,ChargingProfiles>>.
|{nbsp} d|_Alternative scenario(s)_  
  |<<k03_local_smart_charging,K03 - Local Smart Charging>> +
  <<k04_internal_load_balancing,K04 - Internal Load Balancing>>
|5   |Prerequisite(s) |The Functional Block _Smart Charging_ is installed.
|6   |Postcondition(s)
  |**Successful postcondition:** +
  The Charging Station _Successfully_ influences the charging power or current of a specific EV, following the <<set_charging_profile_request,SetChargingProfileRequest>> sent by the CSMS.

  **Failure postcondition:** +
  The Charging Station was _not_ able to influence the charging power or current of a specific EV, following the <<set_charging_profile_request,SetChargingProfileRequest>> sent by the CSMS.
|===

.Sequence Diagram: Central Smart Charging
image::part2/images/figure_102.svg[Sequence Diagram: Central Smart Charging]

Explanation for the above figure:

- After authorization the EVSE will set a maximum current to use via the Control Pilot signal. This limit is based on a (default) charging profile that the EVSE had previously received from the CSMS. The EV starts charging and a <<transaction_event_request,TransactionEventRequest>> is sent to the CSMS.
- While charging is in progress the EVSE will continuously adapt the maximum current or power according to the charging profile. Optionally, at any point in time the CSMS may send a new charging profile for the EVSE. The Charging Station will then also take this new schedule into account when calculating a new composite schedule. This way the CSMS can influence the charging of an ongoing transaction.

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7   |Error handling |n/a
|8   |Remark(s)      |The CSMS determines the constraints on <<charging_schedule_type,ChargingSchedule>> per transaction.

The CSMS imposes charging limits on EVSEs. In response to a <<transaction_event_request,TransactionEventRequest>> the CSMS may choose to set charging limits to the transaction using the TxProfile. It is RECOMMENDED to check the `_offline_` flag in <<transaction_event_request,TransactionEventRequest>> prior to sending a charging profile to check if the transaction is likely to be still ongoing, the <<transaction_event_request,TransactionEventRequest>> might have been cached during an _Offline_ period. +
The final schedule constraints that apply to a transaction are determined by merging the profiles with purposes _ChargingStationMaxProfile_ with the profile _TxProfile_ or <<tx_default_profile,TxDefaultProfile>> in case no profile of purpose _TxProfile_ is provided. Zero or more of the following <<charging_profile_type,ChargingProfile>> purposes MAY have been previously received from the CSMS: _ChargingStationMaxProfile_ or <<tx_default_profile,TxDefaultProfile>>.

It is recommended to omit the duration field of the ChargingSchedule from a TxProfile, so that it automatically lasts until the end of the transaction. If the TxProfile expires before the transaction ends, it falls back to the lowest limit of the active TxDefaultProfile and ChargingStationMaxProfile. If there are no other active profiles, it falls back to the local limit of the Charging Station.

The scenario description and sequence diagram above are based on the Configuration Variable for start transaction being configured as follows: +
<<tx_start_point,`TxStartPoint`>>: <<tx_start_stop_point_values,Authorized, DataSigned, PowerPathClosed, EnergyTransfer>> +
This use-case is also valid for other configurations, but then the transaction might start/stop at another moment, which might change the sequence in which message are send. For more details see the use case: <<e01_start_transaction_options,E01 - Start Transaction options>>.
|===

==== K02 - Central Smart Charging - Requirements

.K02 - Requirements
[cols="^.^2,<.^6,<.^6,<.^4",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID         |Precondition         |Requirement definition     |Note

|K02.FR.01  |{nbsp}
  |The CSMS SHALL use charging profiles to stay within the limits imposed by any external system. |{nbsp}
|K02.FR.02  |After authorization.
  |The EVSE will set a maximum current to use via the Control Pilot signal.
    |This requirement only applies to AC chargers that use 61851. The limit may be based on a (default) charging profile that the EVSE previously received from the CSMS.
|K02.FR.03  |{nbsp}
  |In order to ensure that an updated <<charging_profile_type,ChargingProfile>> applies only to the current transaction, the CSMS SHALL set the chargingProfilePurpose of the <<charging_profile_type,ChargingProfile>> to _TxProfile_.
    |An updated charging profile can be sent by the CSMS by sending a <<charging_profile_type,ChargingProfile>> with the same chargingProfileId.
|K02.FR.04  |If a transaction-specific profile with purpose _TxProfile_ is present.
  |The <<tx_profile,TxProfile>> SHALL overrule the default charging profile with purpose <<tx_default_profile,TxDefaultProfile>> for the duration of the current transaction only. |{nbsp}
|K02.FR.05  |K02.FR.04 +
  After the transaction is stopped
    |The <<tx_profile,TxProfile>> SHALL be deleted. |{nbsp}
|K02.FR.06  |{nbsp}
  |The optional <<charging_schedule_type,ChargingSchedule>> field <<charging_schedule_type,minChargingRate>> MAY be used by the Charging Station to optimize the power distribution between the EVSEs.
    |The parameter informs the Local Controller that charging below <<charging_schedule_type,minChargingRate>> is inefficient, giving the possibility to select another balancing strategy.
|K02.FR.07  |{nbsp}
  |The CSMS SHALL NOT set <<charging_profile_purpose,chargingProfilePurpose>> to <<charging_station_external_constraints,ChargingStationExternalConstraints>> in a <<set_charging_profile_request,SetChargingProfileRequest>>.
    |This purpose is only used when an external system has set a charging limit/schedule.
|K02.FR.08  |K02.FR.04 AND +
  The charging schedule of <<tx_profile,TxProfile>> ends, before the transaction ends, because the set duration or validTo period expired
    |The Charging Station SHALL fall back to using the lowest limit of the active <<tx_default_profile,TxDefaultProfile>> and <<charging_station_max_profile,ChargingStationMaxProfile>>. If there are no other active profiles, it falls back to the local limit of the Charging Station |{nbsp}
|===

<<<

[[k03_local_smart_charging]]
=== K03 - Local Smart Charging

.K03 - Local Smart Charging
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|No. |Type            |Description

|1   |Name            |Local Smart Charging
|2   |ID              |K03
|{nbsp} d|_Functional block_ |K. Smart Charging
|3   |Objective(s)    |To enable charging limits to be set at the Charging Station by a Local Controller.
|4   |Description     |Local Smart Charging describes a use case in which smart charging enabled Charging Stations have charging limits controlled locally by a Local Controller, not directly by the CSMS. The charging limits MAY either be pre-configured in the Local Controller in one way or another, or they can be set by the CSMS. The Local Controller SHALL contain the logic to distribute this capacity among the connected EVSEs by adjusting their limits as needed. +
This use case for Local Smart Charging is about limiting the amount of power that can be used by a group of Charging Stations, to a certain maximum.

See <<local_smart_charging_topology,Figure Local Smart Charging Topology>>
|{nbsp} d|_Actors_    |Charging Station, CSMS, EV, Local Controller, EV Driver
|{nbsp} d|_Scenario description_
  |**1.** After authorization the Charging Station will set a maximum current, an EV might draw, via the Control Pilot signal. This limit is based on a <<tx_default_profile,TxDefaultProfile>> that the Charging Station previously received from the CSMS. +
  **2.** The EV starts charging, the Charging Station sends a <<transaction_event_request,TransactionEventRequest>>. +
  **3.** A <<transaction_event_request,TransactionEventRequest>> is sent to the CSMS via the Local Controller, so that the Local Controller knows a transaction has started. +
  **4.** During the transaction, the Local Controller sends a <<set_charging_profile_request,SetChargingProfileRequest>> to influence the charging current/power. +
  **5.** The Charging Station calculates the charging limits based on the installed <<charging_profile_type,ChargingProfiles>>. +
  **6.** The Local Controller just passes on the messages between Charging Station and CSMS, so that the CSMS can address all the Local Smart Charging group members individually. +
  **7.** While charging is in progress the EVSE will continuously adapt the maximum current according to the installed <<charging_profile_type,ChargingProfiles>>.
|5   |Prerequisite(s)  |The Functional Block _Smart Charging_ is installed.
|6   |Postcondition(s) 
  |**Successful postcondition:** +
  The Local Controller _Successfully_ controls maximum charging limits via the Control Pilot Signal.

  **Failure postcondition:** +
  n/a
|===

.Sequence Diagram: Local Smart Charging
image::part2/images/figure_103.svg[Sequence Diagram: Local Smart Charging]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7   |Error handling |n/a
|8   |Remark(s)      |The Local Controller for Local Smart Charging can be implemented in different ways, for example: +
  as a separate physical component or as part of a ‘master’ Charging Station controlling a number of other Charging Stations.

  The Local Controller MAY or MAY NOT have any EVSEs of its own.

  The limits on Charging Stations in a Local Smart Charging group can either be pre-configured in the Local Controller in one way or another, or they can be set by the CSMS. The Local Controller contains the logic to distribute this capacity among the connected EVSEs by adjusting their limits as needed.
|===

==== K03 - Local Smart Charging - Requirements

.K03 - Requirements
[cols="^.^2,<.^6,<.^6,<.^4",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID         |Precondition         |Requirement definition     |Note

|K03.FR.01  |{nbsp}
  |The Local Controller MAY impose charging limits on a Charging Station. |{nbsp}
|K03.FR.02  |K03.FR.01
  |These limits MAY be changed dynamically during the charging process in order to keep the power consumption of the group of Charging Stations within the group limits. |{nbsp}
|K03.FR.03  |If at any point in time the Local Controller sends a new <<charging_profile_type,ChargingProfile>> to an EVSE
  |The Charging Station SHALL take this new <<charging_profile_type,ChargingProfile>> into account when calculating a new composite schedule that it will use to charge the EV. |{nbsp}
|K03.FR.04  |{nbsp}
  |A Transaction with a chargingPriority that is higher than other transactions SHALL be fulfilled as long as possible, even if other transactions have to be suspended. |{nbsp}
|K03.FR.05  |If a chargingPriority is given in a <<transaction_event_response,TransactionEventResponse>> that is different from the chargingPriority in the <<id_token_info_type,IdTokenInfo>>.
  |The chargingPriority from the <<transaction_event_response,TransactionEventResponse>> SHALL be used for this transaction and for this transaction only.
    |It shall therefore not be stored e.g. in the Authorization Cache.
|K03.FR.06  |When no chargingPriority is known.
  |The Transaction or IdToken SHALL be assumed to have chargingPriority 0. |{nbsp}
|K03.FR.07  |{nbsp}
  |The optional <<charging_schedule_type,ChargingSchedule>> field <<charging_schedule_type,minChargingRate>> MAY be used by the Charging Station to optimize the power distribution between the EVSEs.
    |The parameter informs the Local Controller that charging below <<charging_schedule_type,minChargingRate>> is inefficient, giving the possibility to select another balancing strategy.
|K03.FR.08  |{nbsp}
  |The Local Controller SHALL NOT set <<charging_profile_purpose,chargingProfilePurpose>> to <<charging_station_external_constraints,ChargingStationExternalConstraints>> in a <<set_charging_profile_request,SetChargingProfileRequest>>.
    |This purpose is only used when an external system has set a charging limit/schedule.
|===

<<<

[[k04_internal_load_balancing]]
=== K04 - Internal Load Balancing

.K04 - Internal Load Balancing
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|No. |Type            |Description

|1   |Name            |Internal Load Balancing
|2   |ID              |K04
|{nbsp} d|_Functional block_ |K. Smart Charging
|3   |Objective(s)    |To enable internal load balancing within the Charging Station and between EVSEs.
|4   |Description     |The Load Balancing use case is about internal load balancing within the Charging Station, where the Charging Station controls current/power per EVSE.

The Charging Station is configured with a fixed limit, e.g. the maximum current of the connection
to the grid.

See <<k01_set_charging_profile,K01 - Set Charging Profile>>
|{nbsp} d|_Actors_    |Charging Station, CSMS, EVSE
|{nbsp} d|_Scenario description_ 
  |**1.** The CSMS sets known physical grid connection limits by sending a <<charging_profile_type,ChargingProfile>>. +
  **2.** The Charging Station controls current/power per EVSE. +
  **3.** The EVSE sends a Control Pilot signal to the EV.
|5   |Prerequisite(s)  |The Functional Block _Smart Charging_ is installed.
|6    |Postcondition(s) 
  |**Successful postcondition:** +
  The Charging Station _Successfully_ balances the current/power between the different EVSEs, based on what the CSMS is sending. +
  **Failure postcondition:** +
  <<charging_profile_type,ChargingProfile>> is _not Accepted_. Charging is possible, although the Charging Station will _not_ adhere to the <<charging_profile_type,ChargingProfile>>.
|7   |Error handling |n/a
|8    |Remark(s)      |n/a
|===

==== K04 - Internal Load Balancing - Requirements

.K04 - Requirements
[cols="^.^2,<.^6,<.^6,<.^4",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID         |Precondition         |Requirement definition     |Note

|K04.FR.01  |{nbsp}
  |The Charging Station SHALL control the <<charging_schedule_type,ChargingSchedule>> per EVSE. |{nbsp}
|K04.FR.02  |{nbsp}
  |The Charging Station SHALL be configured with a fixed limit.
    |e.g. the maximum current of the connection to the grid.
|K04.FR.03  |{nbsp}
  |A <<charging_profile_type,ChargingProfile>> with the purpose <<charging_station_max_profile,ChargingStationMaxProfile>> can only be set at Charging Station EVSE with Id 0. |{nbsp}
|K04.FR.04  |{nbsp}
  |The optional <<charging_schedule_type,ChargingSchedule>> field <<charging_schedule_type,minChargingRate>> MAY be used by the Charging Station to optimize the power distribution between the EVSEs.
    |The parameter informs theLocal Controller thatcharging below<<charging_schedule_type,minChargingRate>> isinefficient, giving thepossibility to select anotherbalancing strategy.
|K04.FR.05  |{nbsp}
  |The combined energy flow of all EVSEs (and the Charging Station hardware itself) SHALL NOT be greater than the limit set by _ChargingStationMaxProfile_. |{nbsp}
|===

<<<

==== K05 - Remote Start Transaction with Charging Profile

.K05 - Remote Start Transaction with Charging Profile
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|No. |Type            |Description

|1   |Name            |Remote Start Transaction with Charging Profile
|2   |ID              |K05
|{nbsp} d|_Functional block_ |K. Smart Charging
|3   |Objective(s)    |To enable the CSMS to remotely start a transaction by directly including a <<charging_profile_type,ChargingProfile>>, in order to assure that the transaction will use the right <<charging_profile_type,ChargingProfile>>.
|4   |Description     |This use case covers how the CSMS can remotely start a transaction with purpose <<tx_profile,TxProfile>>. This assures that the right <<tx_profile,TxProfile>> is used. Also, when the Charging Station goes _Offline_ after receiving <<request_start_transaction_request,RequestStartTransactionRequest>>. +
  This is also needed, as switching from three phase- to one phase charging is not always possible and the transaction needs to start at the right phase.
|{nbsp} d|_Actors_    |Charging Station, CSMS, External Trigger
|{nbsp} d|_Scenario description_ 
  |**1.** The CSMS requests a Charging Station to remotely start a transaction by sending a <<request_start_transaction_request,RequestStartTransactionRequest>> with a <<charging_profile_type,ChargingProfile>> with purpose <<tx_profile,TxProfile>>. +
  **2.** The Charging Station responds with a <<request_start_transaction_response,RequestStartTransactionResponse>> indicating that it is able to start the transaction and will use the <<charging_profile_type,ChargingProfile>>. +
  **3.** The Charging Station informs the CSMS that a transaction has started by sending a <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Started>>) message. +
  **4.** The transaction is started in the same way as described in <<e_transactions,E. Transaction>>. +
  **5.** The Charging Station sends a <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Updated>>) to inform the CSMS that it is charging. +
  **6.** The Charging Station continues the regular smart charging session, following the set <<charging_profile_type,ChargingProfiles>>.
|5   |Prerequisite(s)  |The Functional Block _Smart Charging_ is installed.
|6   |Postcondition(s) 
  |**Successful postcondition:** +
  The Charging Station _Successfully_ charges taking into account the provided <<charging_profile_type,ChargingProfile>>. +
  **Failure postcondition:** +
  The transaction is _not_ started. +
  The Charging Station _Unsuccessfully_ charges taking into account the provided <<charging_profile_type,ChargingProfile>>.
|===

.Sequence Diagram: Remote Start Transaction with Charging Profile
image::part2/images/figure_104.svg[Sequence Diagram: Remote Start Transaction with Charging Profile]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7   |Error handling |n/a
|8   |Remark(s)      |The scenario description and sequence diagram above are based on the Configuration Variable for start transaction being configured as follows: +
<<tx_start_point,`TxStartPoint`>>: <<tx_start_stop_point_values,EVConnected, Authorized, DataSigned, PowerPathClosed, EnergyTransfer>> +
This use-case is also valid for other configurations, but then the transaction might start/stop at another moment, which might change the sequence in which message are send. For more details see the use case: <<e01_start_transaction_options,E01 - Start Transaction options>>.

When a ChargingProfile with purpose TxProfile is provided as part of a RequestStartTransactionRequest, then a transactionId cannot be provided in the ChargingProfile, because it is not known at the time.
|===

==== K05 - Remote Start Transaction with Charging Profile - Requirements

.K05 - Requirements
[cols="^.^2,<.^6,<.^6,<.^4",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID         |Precondition         |Requirement definition     |Note

|K05.FR.01  |{nbsp}
  |The CSMS MAY include a <<charging_profile_type,ChargingProfile>> in a <<request_start_transaction_request,RequestStartTransactionRequest>>. |{nbsp}
|K05.FR.02  |K05.FR.01 
  |The Purpose of the <<charging_profile_type,ChargingProfile>> SHALL always be <<tx_profile,TxProfile>>. |{nbsp}
|K05.FR.03  |K05.FR.01 AND +
  NOT K05.FR.04
    |The Charging Station SHALL use the given profile to calculate its composite schedule. |{nbsp}
|K05.FR.04  |If a Charging Station without support for Smart Charging receives a <<request_start_transaction_request,RequestStartTransactionRequest>> with a <<charging_profile_type,ChargingProfile>>.
  |The Charging Station SHALL ignore the specified <<charging_profile_type,ChargingProfile>>.
    |The device model variable SmartChargingCtrlr.Enabled tells CSMS whether smart charging is supported.
|K05.FR.05  |If a Charging Station with support for Smart Charging receives a <<request_start_transaction_request,RequestStartTransactionRequest>> with an invalid <<charging_profile_type,ChargingProfile>>.
  |The Charging Station SHALL respond with <<request_start_transaction_response,RequestStartTransactionResponse>> with _status_ = `Rejected` and optionally with _reasonCode_ = "InvalidProfile" or "InvalidSchedule".
    |The device model variable SmartChargingCtrlr.Enabled tells CSMS whether smart charging is supported.
|===

=== K06 - Offline Behavior Smart Charging During Transaction

.K06 - Offline Behavior Smart Charging During Transaction
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|No. |Type            |Description

|1   |Name            |Offline Behavior Smart Charging During Transaction
|2   |ID              |K06
|{nbsp} d|_Functional block_ |K. Smart Charging
|3   |Objective(s)    |To enable the Charging Station to continue to use the current <<charging_profile_type,ChargingProfile>> for the duration of the transaction while it is _Offline_.
|4   |Description     |If a Charging Station goes _Offline_ after having received a transaction-specific <<charging_profile_type,ChargingProfile>> with purpose <<tx_profile,TxProfile>>, then it continues to use this profile for the duration of the transaction.
|{nbsp} d|_Actors_    |Charging Station, CSMS, EV
|{nbsp} d|_Scenario description_ 
  |**1.** The CSMS sends a <<set_charging_profile_request,SetChargingProfileRequest>> to the Charging Station with a <<tx_profile,TxProfile>>. +
  **2.** The Charging Station responds with a <<set_charging_profile_response,SetChargingProfileResponse>>. +
  **3.** While charging is in progress the EVSE will continuously adapt the maximum current or power according to the installed <<charging_profile_type,ChargingProfiles>>. +
  **4.** The Charging Station is _Offline_ and operates stand-alone. +
  **5.** While charging is in progress the EVSE will continuously adapt the maximum current or power according to the already installed <<charging_profile_type,ChargingProfiles>>.
|5   |Prerequisite(s) |A transaction is ongoing. +
  The Functional Block _Smart Charging_ is installed.
|6   |Postcondition(s) 
  |**Successful postcondition:** +
  The Charging Station continues to use the charging profiles which are available.

  **Failure postcondition:**
  n/a
|===

.Sequence Diagram: Offline Behavior Smart Charging
image::part2/images/figure_105.svg[Sequence Diagram: Offline Behavior Smart Charging]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7   |Error handling |n/a
|8   |Remark(s)      |n/a
|===

==== K06 - Offline Behavior Smart Charging During Transaction - Requirements

.K06 - Requirements
[cols="^.^2,<.^5,<.^6",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID         |Precondition         |Requirement definition

|K06.FR.01  |If the Charging Station goes _Offline_ after having received a transaction- specific <<charging_profile_type,ChargingProfile>> with purpose <<tx_profile,TxProfile>>.
  |The Charging Station SHALL continue to use this profile for the duration of the transaction.
|K06.FR.02  |If the Charging Station goes _Offline_, without having any charging profiles.
  |The Charging Station SHALL execute the transaction as if no constraints apply.
|===

=== K07 - Offline Behavior Smart Charging at Start of Transaction

.K07 - Offline Behavior Smart Charging at Start of Transaction
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|No. |Type            |Description

|1   |Name            |Offline Behavior Smart Charging at Start of Transaction
|2   |ID              |K07
|{nbsp} d|_Functional block_ |K. Smart Charging
|3   |Objective(s)    |To enable the Charging Station to continue to use a <<charging_profile_type,ChargingProfile>> for a transaction which is started _Offline_.
|4   |Description     |By setting a <<tx_default_profile,TxDefaultProfile>> on a Charging Station, the CSMS can assure that any transaction, which is started while the communication with the CSMS is _Offline_, uses this profile.
|{nbsp} d|_Actors_    |Charging Station, CSMS, EV, EV Driver
|{nbsp} d|_Scenario description_
  |**1.** The CSMS sends a <<set_charging_profile_request,SetChargingProfileRequest>> to the Charging Station with a <<tx_default_profile,TxDefaultProfile>>. +
  **2.** The Charging Station responds with a <<set_charging_profile_response,SetChargingProfileResponse>>. +
  **3.** The Charging Station goes _Offline_ and operates stand-alone. +
  **4.** The Charging Station allows automatic authorization of any presented IdToken by either: +
  _a._ The Local Authorization List; a list of identifiers that can be synchronized with the CSMS. +
  _b._ Authorization Cache entries; which autonomously maintains a record of previously presented identifiers that have been successfully authorized by the CSMS. (Successfully meaning: a response received on a message containing an IdToken). +
  _c._ Configuration Variable: <<offline_tx_for_unknown_id_enabled,OfflineTxForUnknownIdEnabled>> = TRUE +
  **5.** The transaction is started in the same way as described in <<e_transactions,E. Transactions>>. +
  **6.** While charging is in progress the EVSE will continuously adapt the maximum current or power according to the already installed <<charging_profile_type,ChargingProfiles>>.
|5   |Prerequisite(s) | The Charging Station is _Offline_. +
  The Functional Block _Smart Charging_ is installed. +
  The IdToken is known in the Local Authorization List, the IdToken is known in the Authorization Cache, or unknown offline authorization is enabled.
|6   |Postcondition(s) 
  |**Successful postcondition:** +
  The Charging Station uses the installed <<tx_default_profile,TxDefaultProfile>> which are available for the _Offline_ started transaction.

  **Failure postcondition:** +
  n/a
|===

.Sequence Diagram: Offline Behavior Smart Charging
image::part2/images/figure_106.svg[Sequence Diagram: Offline Behavior Smart Charging]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7   |Error handling |n/a
|8   |Remark(s)      |See section <<combining_charging_profile_purposes,Combining Charging Profile Purposes>> for a description on how to combine different charging profile purposes.
|===

==== K07 - Offline Behavior Smart Charging at Start of Transaction - Requirement

.K07 - Requirements
[cols="^.^2,<.^6,<.^6,<.^4",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID         |Precondition         |Requirement definition     |Note

|K07.FR.01  |If a Charging Station goes _Offline_ before a transaction is started or before a transaction-specific <<charging_profile_type,ChargingProfile>> with purpose <<tx_profile,TxProfile>> was received.
  |The Charging Station SHALL use the charging profiles which are available.
    |With purpose <<tx_default_profile,TxDefaultProfile>> for the duration of the current transaction only.
|===

=== K08 - Get Composite Schedule

.K08 - Get Composite Schedule
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|No. |Type            |Description

|1   |Name            |Get Composite Schedule
|2   |ID              |K08
|{nbsp} d|_Functional block_ |K. Smart Charging
|3   |Objective(s)    |To request the Charging Station to report the composite charging schedule.
|4   |Description     |This use cases describes how the CSMS requests the Charging Station to report the Composite Charging Schedule, as calculated by the Charging Station, by sending <<get_composite_schedule_request,GetCompositeScheduleRequest>>.

The <<composite_schedule_type,CompositeSchedule>> is the result of the calculation of all active schedules and possible local limits present in the Charging Station.
|{nbsp} d|_Actors_    |Charging Station, CSMS
|{nbsp} d|_Scenario description_
  |**1.** The CSMS requests the Charging Station to report the Composite Charging Schedule by sending a <<get_composite_schedule_request,GetCompositeScheduleRequest>>. +
  **2.** The Charging Station calculates the schedule. +
  **3.** The Charging Station responds with a <<get_compositie_schedule_response,GetCompositeScheduleResponse>> with the status and <<charging_schedule_type,ChargingSchedule>>.
|5   |Prerequisite(s)  |The Functional Block _Smart Charging_ is installed.
|6   |Postcondition(s) 
  |**Successful postcondition:** +
  The CSMS _Successfully_ received the composite schedule from the Charging Station.

  **Failure postcondition:** +
  The CSMS did _not_ receive the composite schedule from the Charging Station.
|===

.Sequence Diagram: Get Composite Schedule
image::part2/images/figure_107.svg[Sequence Diagram: Get Composite Schedule]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7   |Error handling |n/a
|8   |Remark(s)      |Please note that the charging schedule sent by the Charging Station is only indicative for that point in time. This schedule might change over time due to external causes (e.g. local balancing based on grid connection capacity is active and one EVSE becomes available).

The Composite Schedule that will guide the charging level is a combination of the prevailing Charging Profiles of the different <<charging_profile_purpose,chargingProfilePurposes>>.

This Composite Schedule is calculated by taking the minimum value for each time interval (see: <<smart_charging_signals_to_a_charging_station_from_multiple_actors,Smart Charging signals to a Charging Station from multiple actors>>). Time intervals do not have to be of fixed length, nor do they have to be the same for every charging profile purpose. This means that a resulting Composite Schedule MAY contain intervals of different lengths.

The reported schedule, in <<get_compositie_schedule_response,GetCompositeScheduleResponse>>, is the result of the calculation of all active schedules and possible local limits present in the Charging Station. +
The composite schedule reports the expected power or current the Charging Station expects to consume from the grid, for the requested EVSE, during the requested time period. +
When requested for evseid=0, the Charging Station will calculate the total expected consumption for the grid connection.
|===

==== K08 - Get Composite Schedule - Requirements

.K08 - Requirements
[cols="^.^2,<.^5,<.^6",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID         |Precondition         |Requirement definition

|K08.FR.01  |{nbsp}
  |The CSMS MAY request the Charging Station to report the
<<composite_schedule_type,CompositeSchedule>> by sending <<get_composite_schedule_request,GetCompositeScheduleRequest>>.
|K08.FR.02  |Upon receipt of <<get_composite_schedule_request,GetCompositeScheduleRequest>>.
  |The Charging Station SHALL calculate the scheduled time intervals, from the moment of message receipt up to the Duration (in seconds) and send them to the CSMS.
|K08.FR.03  |If the evseId in the <<get_composite_schedule_request,GetCompositeScheduleRequest>> is set to '0'
  |The Charging Station SHALL report the total expected power or current the Charging Station expects to consume from the grid during the requested time period.
|K08.FR.04  |{nbsp}
  |At any point in time, the available power or current in the <<composite_schedule_type,CompositeSchedule>>, which is the result of merging the schedules of charging profiles <<charging_station_max_profile,ChargingStationMaxProfile>>, <<charging_station_external_constraints,ChargingStationExternalConstraints>> and <<tx_default_profile,TxDefaultProfile>> (or <<tx_profile,TxProfile>>), SHALL be less than or equal to lowest value of available power or current in any of the merged schedules.
|K08.FR.05  |If the Charging Station is not able to report the requested schedule, for instance if the _evseId_ is unknown
  |The Charging Station SHALL respond with the status `Rejected`.
|K08.FR.06  |K08.FR.02 AND +
  When there is no transaction active on an EVSE
    |The Charging Station SHALL calculate the <<composite_schedule_type,CompositeSchedule>> as if there is a transaction ongoing on the EVSE that is using the TxDefaultProfile (if this profile purpose is set)
|K08.FR.07  |When receiving a <<get_composite_schedule_request,GetCompositeScheduleRequest>> with a <<charging_rate_unit_enum_type,chargingRateUnit>>, which is not configured in the configuration variable `ChargingScheduleChargingRateUnit`
  |The Charging Station SHALL respond with <<get_compositie_schedule_response,GetCompositeScheduleResponse>> with status `Rejected`.
|===

=== K09 - Get Charging Profiles

.K09 - Get Charging Profiles
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|No. |Type            |Description

|1   |Name            |Get Charging Profile
|2   |ID              |K09
|{nbsp} d|_Functional block_ |K. Smart Charging
|3   |Objectives      |To enable the CSMS to view the Charging Schedules/limits installed in a Charging Station, these can be installed by the CSMS or some other source.
|4   |Description     |With the <<get_charging_profile_request,GetChargingProfilesRequest>> message the CSMS can ask a Charging Station to report all, or a subset of all the install Charging Profiles from the different possible sources. This can be used for some automatic smart charging control system, or for debug purposes by a CSO.
|{nbsp} d|_Actors_    |Charging Station, CSMS
|{nbsp} d|_Scenario description_
  |**1.** The CSMS asks the Charging Station for the installed charging profiles by sending a <<get_charging_profile_request,GetChargingProfilesRequest>> message. +
  **2.** The Charging Station responds, indicating if it can report Charging Schedules by sending a <<get_charging_profiles_response,GetChargingProfilesResponse>> message. +
  **3.** Charging Station sends a number of <<report_charging_profiles_request,ReportChargingProfilesRequest>> messages to CSMS. +
  **4.** The CSMS acknowledges reception of the reports by sending a <<report_charging_profiles_response,ReportChargingProfilesResponse>> to the Charging Station for every <<report_charging_profiles_request,ReportChargingProfilesRequest>>. +
|5   |Prerequisites   |n/a
|6   |Postcondition(s) |The CSMS knows which charging profiles have been installed in the Charging Station that match the requested parameters.
|===

.Sequence diagram of the use case "Get Charging Profiles"
image::part2/images/figure_108.svg[Sequence diagram of the use case "Get Charging Profiles"]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7   |Error Handling  |When the Charging Station has no charging profiles that match the parameters in the <<get_charging_profile_request,GetChargingProfilesRequest>> the Charging Station SHALL respond with: NoProfiles.
|8   |Remarks         |The charging profiles report can be split over multiple ReportChargingProfilesRequest messages, this can be because charging profiles for different charging sources need to be reported, or because there is just to much data for one message. To indicate that more reports will follow the flag *tbc* can be used.
|===

==== K09 - Get Charging Profiles - Requirements

.K09 - Requirements
[cols="^.^2,<.^6,<.^6,<.^4",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID         |Precondition         |Requirement definition     |Note

|K09.FR.01  |When requestId is set in the <<get_charging_profile_request,GetChargingProfilesRequest>>
  |The Charging Station SHALL set the requestId in every <<report_charging_profiles_request,ReportChargingProfilesRequest>> that is sent as a result of this <<get_charging_profile_request,GetChargingProfilesRequest>>. |{nbsp}
|K09.FR.02  |When the charging profiles are reported in more than one <<report_charging_profiles_request,ReportChargingProfilesRequest>>
  |The Charging Station SHALL set the _tbc_ flag to *true* for all <<report_charging_profiles_request,ReportChargingProfilesRequest>> messages except the last. |{nbsp}
|K09.FR.03  |{nbsp}
  |The CSMS SHALL specify in _chargingProfile_ criteria in <<get_charging_profile_request,GetChargingProfilesRequest>> either: +
  - a (list of) _chargingProfileId(s)_ OR +
  - one or more of the fields _stackLevel_, +
  _chargingLimitSource_ , _chargingProfilePurpose_.
    |These fields are filter values of equal importance, but because a _chargingProfileId_ uniquely identifies a charging profile, the other fields are not needed if _chargingProfileIds_ are used.
|K09.FR.04  |If _evseId_ is set to a value greater than 0 in the <<get_charging_profile_request,GetChargingProfilesRequest>>
  |The Charging Station SHALL report the installed charging profiles for the specified EVSE that match all fields in _chargingProfile_. |{nbsp}
|K09.FR.05  |If _evseId_ is set to 0 in <<get_charging_profile_request,GetChargingProfilesRequest>>
  |The Charging Station SHALL only report charging profiles installed on the Charging Station itself (the grid connection) that match all fields in _chargingProfile_.
    |EVSE #0 can have a `ChargingStationMaxProfile`, `ChargingStationExternalConstraints` or a `TxDefaultProfile`. +
    Note, that a `TxDefaultProfile` is not applied to EVSE #0 but to all individual EVSEs (see K01.FR.14).
|K09.FR.06  |If _evseId_ is NOT set in the <<get_charging_profile_request,GetChargingProfilesRequest>>
  |The Charging Station SHALL report all installed charging profiles that match all fields in _chargingProfile_. |{nbsp}
|===

=== K10 - Clear Charging Profile

.K10 - Clear Charging Profile
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|No. |Type            |Description

|1   |Name            |Clear Charging Profile
|2   |ID              |K10
|{nbsp} d|_Functional block_ |K. Smart Charging
|3   |Objective(s)    |To clear some or all of the charging profiles.
|4   |Description     |If the CSMS wishes to clear some or all of the charging profiles that were previously sent to the Charging Station, then the CSMS sends a <<clear_charging_profile_request,ClearChargingProfileRequest>> to the Charging Station.
|{nbsp} d|_Actors_    |Charging Station, CSMS
|{nbsp} d|_Scenario description_  
  |**1.** The CSMS sends a <<clear_charging_profile_request,ClearChargingProfileRequest>> to the Charging Station. +
  **2.** The Charging Station responds with a <<clear_charging_profile_response,ClearChargingProfileResponse>> specifying whether it was able to process the request in the status.
|5   |Prerequisite(s) |One or more ChargingProfiles are installed.
|6   |Postcondition(s) 
  |**Successful postcondition:** +
  The requested charging profiles are _Successfully_ cleared.

  **Failure postcondition:** +
  The requested charging profiles are _not_ cleared, as no <<charging_profile_type,ChargingProfile>> is found.
|===

.Sequence Diagram of the use case "Clear Charging Profile"
image::part2/images/figure_109.svg[Sequence Diagram of the use case "Clear Charging Profile"]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7   |Error handling |n/a
|8   |Remark(s)      |n/a
|===

==== K10 - Clear Charging Profile - Requirements

.K10 - Requirements
[cols="^.^2,<.^6,<.^6,<.^4",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID         |Precondition         |Requirement definition     |Note

|K10.FR.01  |If the Charging Station does not have any matching <<charging_profile_type,ChargingProfile>>.
  |Upon receipt of a <<clear_charging_profile_request,ClearChargingProfileRequest>>, the Charging Station SHALL respond with the status _Unknown_. |{nbsp}
|K10.FR.02  |{nbsp}
  |The CSMS SHALL either specify a chargingProfile.id OR include one or more of the fields stackLevel, evseId and chargingProfilePurpose in the <<clear_charging_profile_request,ClearChargingProfileRequest>> to specify which Charging Profiles need to be cleared. |{nbsp}
|K10.FR.03  |Upon receipt of a <<clear_charging_profile_request,ClearChargingProfileRequest>> with a specified _chargingProfileId_ AND the <<charging_profile_purpose_enum_type,chargingProfilePurpose>> of the referenced <<charging_profile_type,ChargingProfile>> is NOT `ChargingStationExternalConstraints`
  |The Charging Station SHALL clear the Charging Profile with the matching id and respond with a <<clear_charging_profile_response,ClearChargingProfileResponse>> message with _status_ = `Accepted`. |{nbsp}
|K10.FR.04  |NOT K10.FR.03 AND +
  NOT K10.FR.08 AND +
  Upon receipt of a <<clear_charging_profile_request,ClearChargingProfileRequest>>, with optional values for _evseId_, _chargingProfilePurpose_, _stackLevel_
    |The Charging Station SHALL clear the <<charging_profile_type,ChargingProfile(s)>> that match (as logical AND) the values in the request, except those for that have <<charging_profile_type,ChargingProfile>> = `ChargingStationExternalConstraints` and respond with a <<clear_charging_profile_response,ClearChargingProfileResponse>> message with _status_ = `Accepted`. |{nbsp}
|K10.FR.05  |After clearing one or more Charging Profiles.
  |The Charging Station SHALL recalculate its composite schedule and set the resulting maximum power/current values to all ongoing transactions. |{nbsp}
|K10.FR.06  |{nbsp}
  |The CSMS SHALL NOT set <<charging_profile_purpose_enum_type,chargingProfilePurpose>> to <<charging_station_external_constraints,ChargingStationExternalConstraints>> in a <<clear_charging_profile_request,ClearChargingProfileRequest>>. |{nbsp}
|K10.FR.07  |K10.FR.05 +
  AND the cleared profile has <<charging_profile_purpose_enum_type,chargingProfilePurpose>> = <<tx_default_profile,TxDefaultProfile>>
    |The Charging Station SHALL continue any active transaction, that started with a <<tx_default_profile,TxDefaultProfile>>, as if it was started without a <<tx_default_profile,TxDefaultProfile>>. |{nbsp}
|K10.FR.08  |Upon receipt of a <<clear_charging_profile_request,ClearChargingProfileRequest>>, with optional values for _evseId_, _chargingProfilePurpose_, _stackLevel_ AND +
  the matched <<charging_profile_type,ChargingProfile(s)>> all have <<charging_profile_type,ChargingProfile>> = `ChargingStationExternalConstraints`
    |The Charging Station SHALL respond with a <<clear_charging_profile_response,ClearChargingProfileResponse>> message with _status_ = `Unknown`.
      |Charging profiles for external constraints are disregarded by ClearChargingProfile message.
|K10.FR.09  |Upon receipt of a <<clear_charging_profile_request,ClearChargingProfileRequest>> with a specified _chargingProfileId_ AND +
  the <<charging_profile_purpose_enum_type,chargingProfilePurpose>> of the referenced <<charging_profile_type,ChargingProfile>> = `ChargingStationExternalConstraints`
    |The Charging Station SHALL respond with a <<clear_charging_profile_response,ClearChargingProfileResponse>> message with _status_ = `Unknown`.
      |Charging profiles for external constraints are disregarded by ClearChargingProfile message.
|===

<<<

:sectnums:
=== External Charging Limit based Smart Charging

:sectnums!:
[[k11_set_update_external_charging_limit_with_ongoing_transaction]]
=== K11 - Set / Update External Charging Limit With Ongoing Transaction

.K11 - Set / update external charging limit with ongoing transaction
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|No. |Type            |Description

|1   |Name            |Set / Update External Charging Limit With Ongoing Transaction
|2   |ID              |K11
|{nbsp} d|_Functional block_ |K. Smart Charging
|3   |Objectives      |To inform the CSMS of a charging schedule or charging limit imposed by an External Control System on the Charging Station with ongoing transaction(s).
|4   |Description     |An External Control System sends a charging limit/schedule to a Charging Station. This limit is sent to the CSMS.
|{nbsp} d|_Actors_    |External Control System, Charging Station, CSMS
|{nbsp} d|_Scenario description_  
  |**1.** External control system sends charging limit/schedule to Charging Station. +
  **2.** Optional: Charging Station calculates new charging schedule. +
  **3.** Charging Station adjusts the charging speed of the ongoing transaction(s). +
  **4.** If the charging limit changed by more than: <<limit_change_significance,`LimitChangeSignificance`>>, the Charging Station sends a <<notify_charging_limit_request,NotifyChargingLimitRequest>> message to CSMS with optionally the set charging limit/schedule. +
  **5.** The CSMS responds with <<notify_charging_limit_response,NotifyChargingLimitResponse>> to the Charging Station. +
  **6.** If the charging rate changes by more than: <<limit_change_significance,`LimitChangeSignificance`>>, the Charging Station sends a <<transaction_event_request,TransactionEventRequest>> message to inform the CSMS. +
  **7.** The CSMS responds with <<transaction_event_response,TransactionEventResponse>> to the Charging Station.
|5   |Prerequisites  |Charging Station is not in error state. +
  An external system can set/clear a charging limit/schedule on the Charging Station via another connection than OCPP.
|6   |Postcondition(s) |The ongoing transaction will be limited by the received charging limit from the external system. +
  The CSMS is informed of the new limit/schedule imposed by the external system.
|===

.Sequence diagram of the use case "Setting / Updating External Charging Limit with Ongoing Transaction"
image::part2/images/figure_110.svg[Sequence diagram of the use case "Setting / Updating External Charging Limit with Ongoing Transaction"]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7   |Error Handling |n/a
|8   |Remarks        |The external system could, for example, use IEC 61850 [IEC61850-7-420] or OpenADR <<open_adr,[OPENADR]>> to communicate the grid limit to the Charging Station, but this could be any protocol. Furthermore, an example of an external system is given, in this case a DSO that might set an external charging limit in case of grid problems, but this could be any other external system or reason to set a charging limit.
|===

==== K11 - Set / Update External Charging Limit With Ongoing Transaction - Requirements

.K11 - Requirements
[cols="^.^2,<.^6,<.^6,<.^4",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID         |Precondition         |Requirement definition     |Note

|K11.FR.01  |When an external charging limit/schedule is received during an ongoing transaction
  |The Charging Station SHALL NOT charge the ongoing transaction faster than this given limit/schedule. |{nbsp}
|K11.FR.02  |K11.FR.01 +
  AND +
  Charging limit changed by more than: <<limit_change_significance,`LimitChangeSignificance`>>
    |The Charging Station SHALL inform the CSMS of the new charging limit/schedule imposed by the external system by sending a <<notify_charging_limit_request,NotifyChargingLimitRequest>>. |{nbsp}
|K11.FR.03  |K11.FR.02 +
  AND +
  <<notify_charging_limit_with_schedule,EnableNotifyChargingLimitWithSchedules>> is true
    |The <<notify_charging_limit_request,NotifyChargingLimitRequest>> SHALL contain the charging limits/schedules as set by the external system. |{nbsp}
|K11.FR.04  |K11.FR.01 +
  AND +
  Charging rate changed by more than: <<limit_change_significance,`LimitChangeSignificance`>>
    |The Charging Station SHALL send a <<transaction_event_request,TransactionEventRequest>> message to the CSMS with <<transaction_event_request,trigger>> = <<trigger_reason_enum_type,ChargingRateChanged>> |{nbsp}
|K11.FR.05  |K11.FR.02
  |The Charging Station SHALL NOT set the <<charging_limit_source_enum_type,chargingLimitSource>> to CSO in the <<notify_charging_limit_request,NotifyChargingLimitRequest>>. |{nbsp}
|K11.FR.06  |When an external charging limit/schedule is received
  |The Charging Station SHALL use purpose <<charging_station_external_constraints,ChargingStationExternalConstraints>> when reporting about this limit (e.g. in a <<report_charging_profiles_request,ReportChargingProfilesRequest>>).
    |It is RECOMMENDED to use negative values for the _id_ of a `ChargingStationExternalConstraints` profile, to minimize the risk of a clash with an _id_ that CSMS might use for a (future) charging profile.
|===

=== K12 - Set / Update External Charging Limit Without Ongoing Transaction

.K12 - Set / update external charging limit without ongoing transaction
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|No. |Type            |Description

|1   |Name            |Set / Update External Charging Limit Without Ongoing Transaction
|2   |ID              |K12
|{nbso} d|_Functional block_ |K. Smart Charging
|3   |Objectives      |To inform the CSMS of a charging schedule or charging limit imposed by an external system on the Charging Station for new transactions or on the grid connection.
|4   |Description     |An External Control System sends a charging limit to a Charging Station. This limit is sent to the CSMS.
|{nbsp} d|_Actors_    |External Control System, Charging Station, CSMS
|{nbsp} d|_Scenario description_ 
  |**1.** External Control System sends a charging limit to Charging Station (not during a transaction). +
  **2.** Optional: Charging Station calculates new charging schedule. +
  **3.** Charging Station adjusts the charging speed. +
  **4.** If the charging limit changed by more than: <<limit_change_significance,`LimitChangeSignificance`>>, the Charging Station sends a <<notify_charging_limit_request,NotifyChargingLimitRequest>> message to CSMS with optionally the set charging limit/schedule. +
  **5.** The CSMS responds with a <<notify_charging_limit_response,NotifyChargingLimitResponse>> to the Charging Station.
|5   |Prerequisites   |Charging Station is not in error state. +
  An external system that can set/clear a charging limit/schedule on the Charging Station via another connection than OCPP.
|6   |Postcondition(s)  |New transactions will be limited by the received charging limit from the external system. +
  The CSMS is informed of the new limit/schedule imposed by the external system.
|===

.Sequence diagram of the use case "Set / Update External Charging Limit Without Ongoing Transaction"
image::part2/images/figure_111.svg[Sequence diagram of the use case "Set / Update External Charging Limit Without Ongoing Transaction"]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7   |Error Handling  |n/a
|8   |Remarks         |The external system could, for example, use IEC 61850 <<iec61850_7_420,[IEC61850-7-420]>> or OpenADR <<open_adr,[OPENADR]>> to communicate the grid limit to the Charging Station, but this could be any protocol. Furthermore, an example of an external system is given, in this case a DSO that might set an external charging limit in case of grid problems, but this could be any other external system or reason to set a charging limit.
|===

==== K12 - Set / Update External Charging Limit Without Ongoing Transaction - Requirements

.K12 - Requirements
[cols="^.^2,<.^6,<.^6,<.^4",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID         |Precondition         |Requirement definition     |Note

|K12.FR.01  |When an external charging limit/schedule is received while no transactions are ongoing
  |The total load of all EVSEs SHALL NOT exceed this given limit. |{nbsp}
|K12.FR.02  |K12.FR.01 +
  AND +
  Charging limit changed by more than: <<limit_change_significance,`LimitChangeSignificance`>> 
    |The Charging Station SHALL inform the CSMS of the new charging limit/schedule imposed by the external system by sending a <<notify_charging_limit_request,NotifyChargingLimitRequest>>. |{nbsp}
|K12.FR.03  |K12.FR.02 +
  AND +
<<notify_charging_limit_with_schedule,`EnableNotifyChargingLimitWithSchedules`>> is true
  |The <<notify_charging_limit_request,NotifyChargingLimitRequest>> SHALL contain the charging limit/schedule as set by the external system. |{nbsp}
|K12.FR.04  |K12.FR.02
  |The Charging Station SHALL NOT set the <<charging_limit_source_enum_type,chargingLimitSource>> to CSO in the <<notify_charging_limit_request,NotifyChargingLimitRequest>>. |{nbsp}
|K12.FR.05  |When an external charging limit/schedule is received
  |The Charging Station SHALL use purpose <<charging_station_external_constraints,ChargingStationExternalConstraints>> when reporting about this limit (e.g. in a <<report_charging_profiles_request,ReportChargingProfilesRequest>>).
    |It is RECOMMENDED to use negative values for the _id_ of a `ChargingStationExternalConstraints` profile, to minimize the risk of a clash with an _id_ that CSMS might use for a (future) charging profile.
|===

=== K13 - Reset / Release External Charging Limit

.K13 - Reset / Release External Charging Limit
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|No. |Type            |Description

|1   |Name            |Reset / Release External Charging Limit
|2   |ID              |K13
|{nbsp} d|_Functional block_ |K. Smart Charging
|3   |Objectives      |To release a charging limit that was previously imposed.
|4   |Description     |An external control system sends a signal to release a previously imposed charging limit to a Charging Station. The Charging Station notifies the CSMS about this.
|{nbsp} d|_Actors_    |External control system, Charging Station, CSMS
|{nbsp} d|_Scenario description_ 
  |**1.** External control system release/removes a charging limit/schedule on the Charging Station +
  **2.** When a transaction is ongoing, the Charging Station calculates the new Charging Schedule and adjusts charging speed. +
  **3.** The Charging Station sends a <<cleared_charging_limit_request,ClearedChargingLimitRequest>> to notify the CSMS. +
  **4.** The CSMS acknowledges with a <<cleared_charging_limit_response,ClearedChargingLimitResponse>> to the Charging Station. +
  **5.** When the change has impact on an ongoing charging transaction and is more than: +
  <<limit_change_significance,`LimitChangeSignificance`>>, the Charging Station sends a <<transaction_event_request,TransactionEventRequest>> to notify the CSMS. +
  **6.** The CSMS acknowledges with a <<transaction_event_response,TransactionEventResponse>> to the Charging Station.
|5   |Prerequisites  |Previously, a charging limit was sent to the Charging Station under consideration. +
  An external system that can set/clear a charging limit/schedule on the Charging Station via another connection than OCPP.
|6   |Postcondition(s) |The previously received charging limit is not limiting charging anymore.
|===

.Sequence diagram of the use case "Release / Reset External Charging Limit"
image::part2/images/figure_112.svg[Sequence diagram of the use case "Release / Reset External Charging Limit"]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7   |Error Handling |n/a
|8   |Remarks
  |The external system could, for example, IEC 61850 <<iec61850_7_420,[IEC61850-7-420]>> or OpenADR <<open_adr,[OPENADR]>> to release the grid limit, but this could be any protocol. Furthermore, an example of an external system is given, in this case a DSO that might set an external charging limit in case of grid problems, but this could be any other external system or reason to set a charging limit.
|===

==== K13 - Reset / Release External Charging Limit - Requirements

.K13 - Requirements
[cols="^.^2,<.^5,<.^6",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID         |Precondition         |Requirement definition

|K13.FR.01  |A transaction is ongoing +
  AND +
  External charging limit is released/removed
    |The Charging Station SHALL NOT limit charging anymore based on the previously received limit.
|K13.FR.02  |K13.FR.01
  |The Charging Station SHALL notify the CSMS by sending a <<cleared_charging_limit_request,ClearedChargingLimitRequest>> message.
|K13.FR.03  |K13.FR.01 +
  AND +
  Charging rate changed by more than: <<limit_change_significance,`LimitChangeSignificance`>>
    |The Charging Station SHALL send a <<transaction_event_request,TransactionEventRequest>> message to the CSMS with <<transaction_event_request,trigger>> = <<trigger_reason_enum_type,ChargingRateChanged>>.
|===

=== K14 - External Charging Limit with Local Controller

.K14 - External Charging Limit with Local Controller
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|No. |Type            |Description

|1   |Name            |Handle external charging limit with a local controller
|2   |ID              |K14
|{nbsp} d|_Functional block_ |K. Smart Charging
|3   |Objective(s)   |To adjust the charging limits according to the External Control System requirements.
|4   |Description    |An external control system sends a charging limit to the Local Controller. The Local Controller notifies the CSMS, calculates the new charging schedules and sends a <<set_charging_profile_request,SetChargingProfileRequest>> messages to all Charging Stations for which the charging profile has changed.
|{nbsp} d|_Actors_   |External control system, Local Controller, Charging Station, CSMS
|{nbsp} d|_Scenario description_
  |**1.** External control system sends a charging limit/schedule to Local Controller. +
  **2.** Local Controller sends a <<notify_charging_limit_request,NotifyChargingLimitRequest>> message to the CSMS. +
  **3.** Local Controller calculates new Charging Profiles for all connected Charging Stations. +
  **4.** Local Controller sends a <<set_charging_profile_request,SetChargingProfileRequest>> message to all Charging Stations for which the charging profile has changed. +
  **5.** External control system sends a charging limit/schedule to Local Controller. +
  **6.** Local Controller sends a <<cleared_charging_limit_request,ClearedChargingLimitRequest>> message to the CSMS. +
  **7.** Local Controller calculates new Charging Profiles for all connected Charging Stations. +
  **8.** Local Controller sends a <<clear_charging_profile_request,ClearChargingProfileRequest>> messages to all affected Charging Stations.
|5   |Prerequisite(s)  |Ongoing transaction(s). +
  An external system that can set/clear a charging limit/schedule on Local Controller via another connection than OCPP.
|6   |Postcondition(s) 
  |**Successful postcondition:** +
  The ongoing transactions will be limited by the received charging limit from the external system. +
  The CSMS is informed of the new limit/schedule imposed by the external system.

  **Failure postcondition:** +
  The CSMS is not informed about the changed charging limit. +
  The External Control System is not able to change the charging limit.
|===

.Sequence Diagram: External Charging Limit with Local Controller.
image::part2/images/figure_113.svg[Sequence Diagram: External Charging Limit with Local Controller.]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7   |Error handling |n/a
|8   |Remark(s)      |n/a
|===

==== K14 - External Charging Limit with Local Controller - Requirements

.K14 - Requirements
[cols="^.^2,<.^5,<.^6",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID         |Precondition         |Requirement definition

|K14.FR.01  |When an external charging limit/schedule is received
  |The total load of all Charging Stations SHALL NOT exceed this given limit.
|K14.FR.02  |K14.FR.01 +
  AND +
  Charging limit changed by more than: <<limit_change_significance,`LimitChangeSignificance`>>
    |The Local Controller SHALL inform the CSMS of the new charging limit/schedule imposed by the external system by sending a <<notify_charging_limit_request,NotifyChargingLimitRequest>>.
|K14.FR.03  |When an external charging limit/schedule is released
  |The local controller SHALL notify the CSMS by sending a <<cleared_charging_limit_request,ClearedChargingLimitRequest>>.
|K14.FR.04  |K14.FR.03
  |The local controller SHALL clear the hard limit on Charging Stations by sending a <<clear_charging_profile_request,ClearChargingProfileRequest>> message to the Charging Stations.
|K14.FR.05  |When the Local Controller receives an external charging limit/schedule
  |It SHALL send a <<set_charging_profile_request,SetChargingProfileRequest>> to all Charging Stations for which the charging profile has changed.
|K14.FR.06  |K14.FR.05 
  |The Local Controller SHALL NOT set <<charging_profile_purpose_enum_type,chargingProfilePurpose>> to <<charging_station_external_constraints,ChargingStationExternalConstraints>>.
|===

:sectnums:
[[iso_15118_based_smart_charging]]
=== ISO 15118 based Smart Charging

:sectnums!:
=== K15 - Charging with load leveling based on High Level Communication

.K15 - Charging with load leveling based on High Level Communication
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|No. |Type            |Description

|1   |Name            |Charging with load leveling based on High Level Communication.
|2   |ID              |K15
|{nbsp} d|_Functional block_ |K. Smart Charging
|{nbsp} d|_Reference_ |<<iso15118_1,ISO15118-1>> E1 AC Charging with load leveling based on High Level Communication, and E4 DC charging with load leveling based on High Level Communication.
|3   |Objectives      |See <<iso15118_1,ISO15118-1>>, use case Objective E1, page 29.
|4   |Description     |See <<iso15118_1,ISO15118-1>>, use case Description E1, page 29.
|{nbsp} d|_Actors_    |EV, Charging Station, CSMS.
|5   |Combined scenario description
  |**1.** The EV sends a ChargeParameterDiscoveryReq message to the Charging Station. +
  **2**. The Charging Station sends a <<notify_ev_charging_needs_request,NotifyEVChargingNeedsRequest>> message to the CSMS. +
  **3**. The CSMS sends a <<notify_ev_charging_needs_response,NotifyEVChargingNeedsResponse>> message to the Charging Station. +
  **4.** The CSMS sends a <<set_charging_profile_request,SetChargingProfileRequest>> message to the Charging Station. +
  **5.** The Charging Station sends a SetChargingProfileResponse message to the CSMS. +
  **6.** The Charging Station responds to the EV with a ChargeParameterDiscoveryRes message to the EV. +
  **7.** The EV sends a PowerDeliveryReq message to the Charging Station with ChargeProgress=Start. This marks the point in time when the EVSE provides voltage to its output power outlet and the EV can start to recharge its battery. +
  **8.** The contactor is closed. +
  **9.** The transaction is updated with a <<transaction_event_request,TransactionEventRequest>> message. +
  **10.** A PowerdeliveryRes message is sent to the EV. +
  **11.** Optionally, the Charging Station sends a <<notify_ev_charging_schedule_request,NotifyEVChargingScheduleRequest>> message to the CSMS.
|6   |Prerequisites  |Both the Charging Station and the EV support ISO 15118. +
  The configured TxStartPoint needs to contain at least one of ParkingBayOccupied, EVConnected, Authorized or PowerPathClosed, such that the OCPP transaction is started before ChargeParameterDiscoverReq is sent by EV, such that CSMS can send a TxProfile charging profile.
|7   |Postcondition(s) |See <<iso15118_1,ISO15118-1>>, use case End conditions E1, page 29.
|===

.Sequence Diagram: Charging with load leveling based on High Level Communication
image::part2/images/figure_114.svg[Sequence Diagram: Charging with load leveling based on High Level Communication]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|8   |Error handling
  |The Charging Station needs to use the information from the SetChargingProfileRequest message to create the response to the ISO 15118 ChargeParameterDiscoveryReq towards the EV. This message has a timeout of 60 seconds, which means the SetChargingProfileRequest has to be sent well within 60 seconds after receiving the NotifyEVChargingNeedsRequest. If the Charging Station does not receive the SetChargingProfileRequest in time or when the NotifyEVChargingNeedsResponse has _status_ = `Processing`, then the Charging Station will return a schedule in ChargeParameterDiscoverRes that matches the capabilities of the EVSE. When CSMS sends the SetChargingProfileRequest at a later time, then this will trigger a renegotiation according to use case <<k16_renegotiation_initiated_by_csms,K16 - Renegotiation initiated by CSMS>>.
|9   |Remark(s) |Signed SalesTariffs are currently not supported. If these are needed please use <<p01_data_transfer_to_the_charging_station,P01 - Data Transfer to the Charging Station>> to send these to the Charging Station.
|===

==== K15 - Charging with load leveling based on High Level Communication - Requirements

.K15 - Requirements
[cols="^.^2,<.^6,<.^6,<.^4",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID         |Precondition         |Requirement definition     |Note

|K15.FR.01  |When the Charging Station receives charging needs from the EV
  |The Charging Station SHALL send a <<notify_ev_charging_needs_request,NotifyEVChargingNeedsRequest>> to the CSMS. |{nbsp}
|K15.FR.02  |K15.FR.01
  |In response to a <<notify_ev_charging_needs_request,NotifyEVChargingNeedsRequest>> the CSMS SHALL send a <<notify_ev_charging_needs_response,NotifyEVChargingNeedsResponse>>. |{nbsp}
|K15.FR.03  |K15.FR.02
  |If the CSMS is able to provide a charging schedule, it SHALL indicate this by setting the status field in the <<notify_ev_charging_needs_response,NotifyEVChargingNeedsResponse>> to 'Accepted'. |{nbsp}
|K15.FR.04  |K15.FR.02
  |If the CSMS is not able to provide a charging schedule, it SHALL indicate this by setting the status field in the <<notify_ev_charging_needs_response,NotifyEVChargingNeedsResponse>> to 'Rejected'. |{nbsp}
|K15.FR.05  |K15.FR.02
  |If the CSMS is able to provide a charging schedule; but needs processing time, it SHALL indicate this by setting the status field in the <<notify_ev_charging_needs_response,NotifyEVChargingNeedsResponse>> to 'Processing'.
    |The Charging Station does not have to wait for the <<set_charging_profile_request,SetChargingProfileRequest>>. CSMS will send it later and trigger a renegotiation as per use case K16.
|K15.FR.06  |{nbsp}
  |A <<notify_ev_charging_needs_request,NotifyEVChargingNeedsRequest>> SHALL contain either ACChargingParameters or DCChargingParameters. |{nbsp}
|K15.FR.07  |K15.FR.03 or +
  K15.FR.05
    |The CSMS SHALL send a <<set_charging_profile_request,SetChargingProfileRequest>> with _chargingProfilePurpose_ = `TxProfile` and a _transactionId_ and at most three _chargingSchedule_ and optional _salesTariff_ elements, that each contain no more periods than specified by _maxScheduleTuples_ in <<notify_ev_charging_needs_request,NotifyEVChargingNeedsRequest>> and by device model variable `SmartChargingCtrlr.PeriodsPerSchedule`.
      |The Charging Station will calculate the composite schedule(s) for the EVSE (taking into account a `ChargingStationMaxProfile` or `ChargingStationExternalConstraints` if present) and will convert that to the SAScheduleList format for ISO 15118.
|K15.FR.08  |K15.FR.01
  |The CSMS SHOULD send a <<set_charging_profile_request,SetChargingProfileRequest>> to the Charging Station within 60 seconds.
    |This is to satisfy the ISO 15118 ChargeParameterDiscoveryReq timeout.
|K15.FR.09  |K15.FR.07 +
  AND +
  EV returns a charging profile
    |Charging Station SHALL verify that provided charging profile is within boundaries of the ChargingSchedule from CSMS.
      |In ISO 15118 EV can sent its charging profile as part of PowerDeliveryReq.
|K15.FR.10  |K15.FR.09
  |Charging Station SHALL send the EV charging profile in a <<notify_ev_charging_schedule_request,NotifyEVChargingScheduleRequest>> message to CSMS. |{nbsp}
|K15.FR.11  |K15.FR.10 +
  AND +
  EV charging profile is within limits of CSMS ChargingSchedule
    |CSMS responds with <<notify_ev_charging_schedule_response,NotifyEVChargingScheduleResponse>> with _status_ `Accepted` to Charging Station.
      |Note: Already checked by Charging Station, but CSMS does its own check.
|K15.FR.12  |K15.FR.10 +
  AND +
  EV charging profile is NOT within limits of CSMS ChargingSchedule
    |CSMS responds with <<notify_ev_charging_schedule_response,NotifyEVChargingScheduleResponse>> with _status_ `Rejected` to Charging Station. |{nbsp}
|K15.FR.13  |K15.FR.12
  |CSMS starts new renegotiation as per use case K16. |{nbsp}
|K15.FR.14  |K15.FR.11
  |The Charging Station SHOULD take the schedule from the <<notify_ev_charging_schedule_request,NotifyEVChargingScheduleRequest>> into account when calculating the actual Composite schedule. |{nbsp}
|K15.FR.15  |K15.FR.01 +
  AND +
  Charging Station is offline
    |The Charging Station SHALL use the TxDefaultProfile (if present) and generate a charging schedule within the limits of its composite schedule. |{nbsp}
|K15.FR.16  |K15.FR.07
  |It is RECOMMENDED to configure the Charging Station, such that a TransactionEvent with idToken has been sent prior to the <<notify_ev_charging_needs_request,NotifyEVChargingNeedsRequest>> Message, so that CSMS can take the user into account when creating a charging schedule. |{nbsp}
|K15.FR.17  |When Charging Station receives a <<set_charging_profile_request,SetChargingProfileRequest>> immediately after the transaction has started and before it has sent the <<notify_ev_charging_needs_request,NotifyEVChargingNeedsRequest>> to CSMS
  |The Charging Station SHOULD respond with <<set_charging_profile_response,SetChargingProfileResponse>> with _status_ = `Rejected` and a _statusInfo_ with _reasonCode_ = `InvalidMessageSeq`.
    |CSMS sent profile too early. It does not harm if CS accepts the charging profile instead of rejecting it, as long as it sends a charging profile again when it receives the <<notify_ev_charging_needs_request,NotifyEVChargingNeedsRequest>>.
|K15.FR.18  |K15.FR.03 OR +
  K15.FR.05
    |CSMS IS RECOMMENDED to use only one _chargingSchedule_ in a SetChargingProfileRequest.
      |This ensures that there is no doubt about which schedule the EV will follow, even when no NotifyEVChargingScheduleRequest is received.
|K15.FR.19  |K15.FR.07 +
  AND +
  EV does not return a charging profile
    |Charging Station IS RECOMMENDED to return an EV charging profile as a chargingSchedule in a NotifyEVChargingScheduleRequest message to CSMS that matches the schedule that was selected by the EV (i.e. chargingSchedule.id = SAScheduleTupleId)
      |In ISO 15118-2 the EV charging profile and the selected schedule are returned as _ChargingProfile_ and _SAScheduleTupleId_ in PowerDeliveryReq.
|===

[[k16_renegotiation_initiated_by_csms]]
=== K16 - Renegotiation initiated by CSMS

.K16 - Renegotiation initiated by CSMS
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|No. |Type            |Description

|1   |Name            |Renegotiation initiated by CSMS.
|2   |ID              |K16
|{nbsp} d|_Functional block_ |K. Smart Charging
|3   |Objectives      |To control the charging power or current of a Charging Station
|4   |Description     |The CSMS sends a SetChargingProfileRequest to the Charging Station to influence the power or current drawn by the EV. The CSMS calculates a ChargingSchedule to stay within limits which MAY be imposed by an external system. +
  **Note:** Description of actions between EV and Charging Station is informative only and not mandated by OCPP.
|{nbsp} d|_Actors_    |EV, Charging Station, CSMS
|{nbsp} d|_Scenario description_ 
  |**1** CSMS sends a <<set_charging_profile_request,SetChargingProfileRequest>> to the Charging Station. +
**2** Charging Station responds with a <<set_charging_profile_response,SetChargingProfileResponse>> to the CSMS. +
**3** When EV sends the next CurrentDemandReq (for DC) or ChargingStatusReq (for AC), the +
Charging Station will respond with _evseNotification_ = `ReNegotiation`. +
**4** EV sends a PowerDeliveryReq with _chargeProgress_ = `ReNegotiate` to confirm this. +
**5** Charging Station responds with a PowerDeliveryRes. +
**6** EV sends a ChargeParameterDiscoveryReq. +
**7** Charging Station responds with a ChargeParameterDiscoveryRes with an SAScheduleList that contains the ChargingSchedule data from the <<set_charging_profile_request,SetChargingProfileRequest>>. +
**8** EV sends a PowerDeliveryReq with _chargeProgress_ = `Start` (with an optional charging profile) to confirm this. +
**9** Charging Station responds with PowerDeliveryRes and, if charging was suspended at start of the renegotiation, will resume power delivery. +
**10** If EV provided a charging profile in the previous step, then Charging Station will send a <<notify_ev_charging_schedule_request,NotifyEVChargingScheduleRequest>> to the CSMS.
|5   |Prerequisites     |Charging session started according to use case K15.
|6   |Postcondition(s)  |Charging session uses the new charging profile.
|===

.Renegotiation initiated by CSMS
image::part2/images/figure_115.svg[Renegotiation initiated by CSMS]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7   |Remark(s) |Signed SalesTariffs are currently not supported. If these are needed please use <<p01_data_transfer_to_the_charging_station,P01 - Data Transfer to the Charging Station>> to send these to the Charging Station.
|===

==== K16 - Renegotiation initiated by CSMS - Requirements

[cols="^.^2,<.^6,<.^6,<.^4",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID         |Precondition         |Requirement definition     |Note

|K16.FR.01  |CSMS sends a new <<set_charging_profile_request,SetChargingProfileRequest>>
  |Charging Station SHALL respond with a <<set_charging_profile_response,SetChargingProfileResponse>> with _status_ = `Accepted`. |{nbsp}
|K16.FR.02  |K16.FR.01
  |Charging Station SHALL initiate schedule renegotiation with EV.
    |In ISO 15118 this is done by replying with EVSENotification=`ReNegotiation` to a CurrentDemandReq (for DC) or ChargingStatusReq (for AC) message.
|K16.FR.03  |K16.FR.02
  |Charging Station SHALL provide the ChargingSchedule data to the EV.
    |In ISO 15118 this is done in the ChargeParameterDiscoverRes message.
|K16.FR.04  |EV returns a charging profile
  |Charging Station SHALL verify that provided charging profile is within boundaries of the ChargingSchedule from CSMS.
    |In ISO 15118 EV may provide this as part of the PowerDeliveryReq message.
|K16.FR.05  |K16.FR.04
  |Charging Station SHALL send the EV charging profile in a <<notify_ev_charging_schedule_request,NotifyEVChargingScheduleRequest>> message to CSMS. |{nbsp}
|K16.FR.06  |K16.FR.05 +
  AND +
  EV charging profile is within limits of CSMS ChargingSchedule
    |CSMS responds with <<notify_ev_charging_schedule_response,NotifyEVChargingScheduleResponse>> with _status_ `Accepted` to Charging Station.
      |Note: Already checked by Charging Station, but CSMS does its own check.
|K16.FR.07  |K16.FR.05 +
  AND +
  EV charging profile is NOT within limits of CSMS ChargingSchedule
    |CSMS responds with <<notify_ev_charging_schedule_response,NotifyEVChargingScheduleResponse>> with
_status_ `Rejected` to Charging Station. |{nbsp}
|K16.FR.08  |K16.FR.07
  |CSMS starts new renegotiation as per use case K16. |{nbsp}
|K16.FR.09  |When the Charging Station receives charging needs from the EV
  |The Charging Station SHOULD NOT send a <<notify_ev_charging_needs_request,NotifyEVChargingNeedsRequest>> to the CSMS.
    |CSMS initiated the renegotiation and has just sent a new charging profile, based on the initial charging needs from EV, energy already consumed by EV and whatever information has caused CSMS to update the charging profile. +
    In ISO 15118 charging needs are sent via ChargeParameter-DiscoveryReq.
|K16.FR.10  |K16.FR.04
  |The Charging Station SHOULD take the schedule from the <<notify_ev_charging_schedule_request,NotifyEVChargingScheduleRequest>> into account when calculating the actual Composite schedule. |{nbsp}
|K16.FR.11  |K16.FR.02 +
  AND +
  current or power in new charging schedule is lower than actual current or power
    |The Charging Station SHALL request EV to lower current or power to a value matching the new charging schedule at the first possible opportunity.
      |In ISO 15118 this can be communicated in CurrentDemandRes (for DC) or ChargingStatusRes (for AC).
|K16.FR.12  |K16.FR.09 +
  AND +
  Charging Station sends a <<notify_ev_charging_needs_request,NotifyEVChargingNeedsRequest>>
    |The CSMS SHALL send a <<set_charging_profile_request,SetChargingProfileRequest>>.
      |This situation is not desirable, because charging profile will likely be the same as in K16.FR.01, but this is added for robustness when Charging Station is not adhering to K16.FR.09.
|K16.FR.13  |EV does not return a charging profile
  |Charging Station IS RECOMMENDED to return an EV charging profile as a chargingSchedule in a NotifyEVChargingScheduleRequest message to CSMS that matches the schedule that was selected by the EV (i.e. chargingSchedule.id = SAScheduleTupleId)
    |In ISO 15118-2 the EV charging profile and the selected schedule are returned as _ChargingProfile_ and _SAScheduleTupleId_ in PowerDeliveryReq.
|===

=== K17 - Renegotiation initiated by EV

.K17 - Renegotiation initiated by EV
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|No. |Type            |Description

|1   |Name            |Renegotiation initiated by EV.
|2   |ID              |K16
|{nbsp} d|_Functional block_ |K. Smart Charging
|3   |Objectives      |To let an EV request a new charging schedule.
|4   |Description     |The EV signals the Charging Station that it wants to renegotiate and it provides new charging needs, which the Charging Station sends to the CSMS. Based on this and other parameters, the CSMS calculates a new charging schedule and sends it via SetChargingProfileRequest to Charging Station, which communicates it to the EV. +
  **Note:** Description of actions between EV and Charging Station is informative only and not mandated by OCPP.
|{nbsp} d|_Actors_    |EV, Charging Station, CSMS
|{nbsp} d|_Scenario description_
  |**1** When EV sends a ChargeParameterDiscoveryReq with with charging needs parameters, then Charging Station sends this information in a NotifyEVChargingNeedsRequest to CSMS. +
  **2** CSMS responds with NotifyEVChargingNeedsResponse to Charging Station. +
  **3** CSMS calculates new charging schedule, that tries to accomodate the EV charging needs and still fits within the schedule boundaries imposed by other parameters. +
  **4** CSMS sends a SetChargingProfileRequest with the new schedule to the Charging Station. +
  **5** Charging Station responds with SetChargingProfileResponse with status `Accepted`. +
  **6** Charging Station sends new charging schedule to EV in a ChargeParameterDiscoveryRes message. +
  **7** EV sends a PowerDeliveryReq with _chargeProgress_ = `Start` (with an optional charging profile) to confirm this. +
  **8** Charging Station responds with PowerDeliveryRes and, if charging was suspended at start of the renegotiation, will resume power delivery. +
  **9** If EV provided a charging profile in the previous step, then Charging Station will send a <<notify_ev_charging_schedule_request,NotifyEVChargingScheduleRequest>> to the CSMS.
|5   |Prerequisites    |Charging session started according to use case K15.
|6   |Postcondition(s) |Charging session uses the new charging profile.
|===

.Renegotiation initiated by EV
image::part2/images/figure_116.svg[Renegotiation initiated by EV]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7   |Remark(s)   |Signed SalesTariffs are currently not supported. If these are needed please use <<p01_data_transfer_to_the_charging_station,P01 - Data Transfer to the Charging Station>> to send these to the Charging Station.
|===

==== K17 - Renegotiation initiated by EV - Requirements

.K17 - Requirements
[cols="^.^2,<.^6,<.^6,<.^4",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID         |Precondition         |Requirement definition     |Note

|K17.FR.01  |EV triggers a renegotiation and sends new charging needs
  |The Charging Station SHALL send a <<notify_ev_charging_needs_request,NotifyEVChargingNeedsRequest>> to the CSMS. |{nbsp}
|K17.FR.02  |K17.FR.01
  |In response to a <<notify_ev_charging_needs_request,NotifyEVChargingNeedsRequest>> the CSMS SHALL send a <<notify_ev_charging_needs_response,NotifyEVChargingNeedsResponse>>. |{nbsp}
|K17.FR.03  |K17.FR.02
  |If the CSMS is able to provide a charging schedule, it SHALL indicate this by setting the _status_ field in the <<notify_ev_charging_needs_response,NotifyEVChargingNeedsResponse>> to 'Accepted'. |{nbsp}
|K17.FR.04  |K17.FR.02   
  |If the CSMS is not able to provide a charging schedule, it SHALL indicate this by setting the _status_ field in the <<notify_ev_charging_needs_response,NotifyEVChargingNeedsResponse>> to 'Rejected'. |{nbsp}
|K17.FR.05  |K17.FR.02
  |If the CSMS is able to provide a charging schedule; but needs processing time, it SHALL indicate this by setting the _status_ field in the <<notify_ev_charging_needs_response,NotifyEVChargingNeedsResponse>> to 'Processing'. |{nbsp}
|K17.FR.06  |{nbsp}
  |A <<notify_ev_charging_needs_request,NotifyEVChargingNeedsRequest>> SHALL contain either ACChargingParameters or DCChargingParameters. |{nbsp}
|K17.FR.07  |K17.FR.03 or +
  K17.FR.05
    |The CSMS SHALL send a <<set_charging_profile_request,SetChargingProfileRequest>> with _chargingProfilePurpose_ = `TxProfile` and at most three _chargingSchedule_ and optional salesTariff elements, that each contain no more periods than specified by _maxScheduleTuples_ in <<notify_ev_charging_needs_request,NotifyEVChargingNeedsRequest>> and by device model variable SmartChargingCtrlr.PeriodsPerSchedule. |{nbsp}
|K17.FR.08  |K17.FR.01
  |The CSMS SHOULD send a <<set_charging_profile_request,SetChargingProfileRequest>> to the Charging Station within 60 seconds.
    |This is to satisfy the ISO 15118 ChargeParameterDiscoveryReq timeout.
|K17.FR.09  |K17.FR.07 +
  AND +
  EV returns a charging profile
    |Charging Station SHALL verify that provided charging profile is within boundaries of the ChargingSchedule from CSMS.
      |In ISO 15118 EV can sent its charging profile as part of PowerDeliveryReq.
|K17.FR.10  |K17.FR.09
  |Charging Station SHALL send the EV charging profile in a <<notify_ev_charging_schedule_request,NotifyEVChargingScheduleRequest>> message to CSMS. |{nbsp}
|K17.FR.11  |K17.FR.10 +
  AND +
  EV charging profile is within limits of CSMS ChargingSchedule
    |CSMS responds with <<notify_ev_charging_schedule_response,NotifyEVChargingScheduleResponse>> with _status_ `Accepted` to Charging Station.
      |Note: Already checked by Charging Station, but CSMS does its own check.
|K17.FR.12  |K17.FR.10
  AND +
  EV charging profile is NOT within limits of CSMS ChargingSchedule
    |CSMS responds with <<notify_ev_charging_schedule_response,NotifyEVChargingScheduleResponse>> with _status_ `Rejected` to Charging Station. |{nbsp}
|K17.FR.13  |K17.FR.12
  |CSMS starts new renegotiation as per use case K16. |{nbsp}
|K17.FR.14  |K17.FR.11
  |The Charging Station SHOULD take the schedule from the <<notify_ev_charging_schedule_request,NotifyEVChargingScheduleRequest>> into account when calculating the actual Composite schedule. |{nbsp}
|K17.FR.15  |K17.FR.01 +
  AND +
  Charging Station is offline
    |The Charging Station SHALL use the TxDefaultProfile (if present) and generate a charging schedule within the limits of its composite schedule. |{nbsp}
|K17.FR.16  |K17.FR.07 +
  EV does not return a charging profile
    |Charging Station IS RECOMMENDED to return an EV charging profile as a chargingSchedule in a NotifyEVChargingScheduleRequest message to CSMS that matches the schedule that was selected by the EV (i.e. chargingSchedule.id  SAScheduleTupleId)
      |In ISO 15118-2 the EV charging profile and the selected schedule are returned as _ChargingProfile_ and _SAScheduleTupleId_ in PowerDeliveryReq.
|===
