= Referenced Components and Variables
:!chapter-number:

:sectnums:
[[controller_components]]
== Controller Components

This section gives an overview of the 'Controller' components, which are introduced in OCPP 2.0. A controller component can be recognized by the 'Ctrlr' suffix and is responsible for the configuration of a certain functionality. Most of the <<referenced_components_and_variables,'Referenced'>> components that are described in this document, are 'Controller' components.

The table below contains a summary of all Controller components, for more details, please refer to Part 2 - Appendices.


[cols="<.^2,<.^6",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|Controller     |Component Description

|AlignedDataCtrlr |Responsible for configuration relating to the reporting of clock-aligned meter data.
|AuthCacheCtrlr |Responsible for configuration relating to the use of a local cache for authorization for Charging Station use.
|AuthCtrlr |Responsible for configuration relating to the use of authorization for Charging Station use.
|CHAdeMOCtrlr |Responsible for configuration relating to the CHAdeMO controller
|ClockCtrlr |Provides a means to configure management of time tracking by Charging Station.
|CustomizationCtrlr |Responsible for configuration relating to custom vendor-specific implementations, using the DataTransfer message and CustomData extensions.
|DeviceDataCtrlr |Responsible for configuration relating to the exchange and storage of Charging Station device model data.
|DisplayMessageCtrlr |Responsible for configuration relating to the display of messages to Charging Station users.
|ISO15118Ctrlr |Responsible for configuration relating to the ISO 15118 controller
|LocalAuthListCtrlr |Responsible for configuration relating to the use of local authorization lists for Charging Station use.
|MonitoringCtrlr |Responsible for configuration relating to the exchange of monitoring event data.
|OCPPCommCtrlr |Responsible for configuration relating to information exchange between Charging Station and CSMS.
|ReservationCtrlr |Responsible for configuration relating to reservations.
|SampledDataCtrlr |Responsible for configuration relating to the reporting of sampled meter data.
|SecurityCtrlr |Responsible for configuration relating to security of communications between Charging Station and CSMS.
|SmartChargingCtrlr |Responsible for configuration relating to Smart Charging.
|TariffCostCtrlr |Responsible for configuration relating to tariff and cost display.
|TxCtrlr |Responsible for configuration relating to transaction characteristics and behaviour.
|===

Every Controller component has an 'Enabled' variable. This variable can be used to enable/disable a certain functionality. Any data in the charging station is not part of the controller component, so when disabling a functionality, any relating data stored in the Charging Station will not be changed or removed. +
For example: if ReservationCtrlr is disabled when there is an active reservation, the EVSE will become available, but the reservation entries will still be there - they are just not used. If afterwards ReservationCtrlr is enabled again, the reservation entries will become active again as long as they have not expired and no transaction is in progress. If a transaction has started in the mean time, that transaction remains active. The reservation is then considered expired.

<<<

[[referenced_components_and_variables]]
== Referenced Components and Variables

Below follows a list of all Component Variable combinations with a role standardized in this specification.

These Configuration Variables replace the Configuration Keys from OCPP 1.x

The list is split by functionality: <<general,General>>, <<security_related,Security>>, <<authorization_related,Authorization>>, <<local_authorization_list_management_related,Local Authorization List Management related>>, <<authorization_cache_related,Authorization Cache>>, <<transaction_related,Transaction>>, <<metering_related,Metering>>, <<reservation_related,Reservation>>, <<smart_charging_related,Smart Charging>>, <<tariff_cost_related,Tariff & Cost>>, <<diagnostics_related,Diagnostics>>, <<display_message_related,Display Message>> and <<charging_infrastructure_related,Charging Infrastructure related>>.

A required Configuration Variable mentioned under a particular function block only has to be supported by the Charging Station if it supports that functional block.

Please see chapter 4 in "Part 1 - Architecture & Topology" about the addressing of Components and Variables in the Device Model.

Requirements for all the Configuration Variables in this document:

- All variables that are writable SHALL have the VariableAttribute field: _persistence_ = true, and SHALL thus be stored in a persistent way.
- Any fields not defined SHALL be left empty.
- Any field marked with a * (Asterisk) can be of any possible value.
- When the AttributeType is NOT given, the CSMS and Charging Station SHALL assume the AttributeType to be Actual.

[cols="^.^1s,10",%autowidth.stretch]
|===
|NOTE |See _'OCPP 2.0 Part 4 - JSON over Websockets implementation guide'_ for a number of Configuration Variables that are specific to controlling the JSON/Websocket behavior.
|===

[[general]]
=== General

[cols="^.^1s,10",%autowidth.stretch]
|===
|NOTE |WebSocket-related variables are described in <<ocpp2_0_part4,"OCPP-2.0.1 Part 4 JSON over WebSockets">>.
|===

==== `ActiveNetworkProfile`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|OCPPCommCtrlr
.3+|Variable |variableName 2+d|ActiveNetworkProfile
  |variableAttributes |mutability d|ReadOnly
  |variableCharacteristics |dataType d|integer
|Description 3+d|Indicates the configuration profile the station uses at that moment to connect to the network. This configuration variable only has to be implemented when NetworkConnectionProfile is implemented.
|===

[[allow_new_sessions_pending_firmware_update]]
==== `AllowNewSessionsPendingFirmwareUpdate`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|ChargingStation
.3+|Variable |variableName 2+d|AllowNewSessionsPendingFirmwareUpdate
  |variableAttributes |mutability d|ReadWrite
  |variableCharacteristics |dataType d|boolean
|Description 3+d|Indicates whether new sessions can be started on EVSEs, while Charging Station is waiting for all EVSEs to become Available in order to start a pending firmware update. +
  When a firmware update is waiting to be installed and this variable exists and has the value _true_, then, the Charging Station will not set free EVSEs to Unavailable, pending the update. This means that it may take longer until there is a point in time when all EVSEs of the Charging Station are free and it can perform the firmware update.
|===

==== `DefaultMessageTimeout`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
|Component |componentName 2+d|OCPPCommCtrlr
.5+|Variable |variableName 2+d|MessageTimeout
  |variableInstance 2+d|Default
  |variableAttributes |mutability d|ReadOnly
  .2+|variableCharacteristics |unit d|s
    |dataType d|integer
|Description 3+d|The purpose of the message timeout is to be able to consider a request message as not sent and continue with other tasks when the message did not arrive due to communication errors or software failure. The message timeout setting in a Charging Station can be configured in the messageTimeout field in the _NetworkConnectionProfile_.
|===

[[file_transfer_protocols]]
==== `FileTransferProtocols`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
|Component |componentName 2+d|OCPPCommCtrlr
.3+|Variable |variableName 2+d|FileTransferProtocols
  |variableAttributes |mutability d|ReadOnly
  |variableCharacteristics |dataType d|MemberList
|Description 3+d|List of supported file transfer protocols.

  Possible values: FTP, FTPS, HTTP, HTTPS, SFTP.
|===

==== `HeartbeatInterval`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|OCPPCommCtrlr
.5+|Variable |variableName 2+d|HeartbeatInterval
  |variableAttributes |mutability d|ReadWrite
  .3+|variableCharacteristics |unit d|s
      |dataType d|integer
      |minLimit d|1
|Description 3+d|Interval of inactivity (no OCPP exchanges) with CSMS after which the Charging Station should send <<heartbeat_request,HeartbeatRequest>>.
|===

[[network_configuration_priority]]
==== `NetworkConfigurationPriority`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
|Component |componentName 2+d|OCPPCommCtrlr
.5+|Variable |variableName 2+d|NetworkConfigurationPriority
  .2+|variableAttributes |attributeType d|Actual
    |mutability d|ReadWrite
  .2+|variableCharacteristics |dataType d|SequenceList
    |valueList d|List of possible values
|Description 3+d|A comma separated ordered list of the priority of the possible Network Connection Profiles. The list of possible available profile slots for the network configuration profiles SHALL be reported, via the valueList characteristic of this Variable.
|===

[[network_profile_connection_attempts]]
==== `NetworkProfileConnectionAttempts`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
|Component |componentName 2+d|OCPPCommCtrlr
.3+|Variable |variableName 2+d|NetworkProfileConnectionAttempts
  |variableAttributes |mutability d|ReadWrite
  |variableCharacteristics |dataType d|integer
|Description 3+d|Specifies the number of connection attempts the Charging Station executes before switching to a different profile.
|===

[[offline_threshold]]
==== `OfflineThreshold`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
|Component |componentName 2+d|OCPPCommCtrlr
.4+|Variable |variableName 2+d|OfflineThreshold
  |variableAttributes |mutability d|ReadWrite
  .2+|variableCharacteristics |unit d|s
    |dataType d|integer
|Description 3+d|When the offline period of a Charging Station exceeds the OfflineThreshold it is recommended to send a <<status_notification_request,StatusNotificationRequest>> for all its Connectors when the Charging Station is back online.
|===

==== `QueueAllMessages`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|OCPPCommCtrlr
.3+|Variable |variableName 2+d|QueueAllMessages
  |variableAttributes |mutability d|ReadWrite
  |variableCharacteristics |dataType d|boolean
|Description 3+d|When this variable is set to _true_, the Charging Station will queue all message until they are delivered to the CSMS. +
  When set to _false_ the Charging Station will only queue Transaction related messages as required in: E04.FR.01.and other requirements +
  When this variable is the to _true_, and the Charging Station is running low on memory, the Charging Station SHALL drop TransactionEvent messages last, and when dropping measurements/meter data, the Charging Station SHALL drop intermediate values first (1st value, 3th value, 5th etc), not start dropping values from the beginning or end of the measurements/meter data. Default = false
|===

[[message_attempts_transaction_event]]
==== `MessageAttemptsTransactionEvent`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
|Component |componentName 2+d|OCPPCommCtrlr
.4+|Variable |variableName 2+d|MessageAttempts
  |variableInstance 2+d|TransactionEvent
  |variableAttributes |mutability d|ReadWrite
  |variableCharacteristics |dataType d|integer
|Description 3+d|How often the Charging Station should try to submit a <<transaction_event_request,TransactionEventRequest>> message when the CSMS fails to process it.
|===

[[message_attempt_interval_transaction_event]]
==== `MessageAttemptIntervalTransactionEvent`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
|Component |componentName 2+d|OCPPCommCtrlr
.6+|Variable |variableName 2+d|MessageAttemptInterval
  |variableInstance 2+d|TransactionEvent
  .2+|variableAttributes |attributeType d|Actual
    |mutability d|ReadWrite
  .2+|variableCharacteristics |unit d|s
    |dataType d|integer
|Description 3+d|How long the Charging Station should wait before resubmitting a <<transaction_event_request,TransactionEventRequest>> message that the CSMS failed to process.
|===

[[unlock_on_ev_side_disconnect]]
==== `UnlockOnEVSideDisconnect`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
|Component |componentName 2+d|OCPPCommCtrlr
.3+|Variable |variableName 2+d|UnlockOnEVSideDisconnect
  |variableAttributes |mutability d|ReadWrite/ReadOnly
  |variableCharacteristics |dataType d|boolean
|Description 3+d|When set to true, the Charging Station SHALL unlock the cable on the Charging Station side when the cable is unplugged at the EV. For an EVSE with only fixed cables, the mutability SHALL be ReadOnly and the actual value SHALL be false. For a charging station with fixed cables and sockets, the variable is only applicable to the sockets.
|===

==== `WebSocketPingInterval`

This configuration variable is described in <<ocpp2_0_part4,"OCPP-2.0.1 Part 4 JSON over WebSockets">>.

==== `ResetRetries`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
|Component |componentName 2+d|OCPPCommCtrlr
.3+|Variable |variableName 2+d|ResetRetries
  |variableAttributes |mutability d|ReadWrite
  |variableCharacteristics |dataType d|integer
|Description 3+d|Number of times to retry a reset of the Charging Station when a reset was unsuccessful.
|===

==== `MessageFieldLength`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|OCPPCommCtrlr
.4+|Variable |variableName 2+d|FieldLength
  |variableInstance 2+d|<message>.<field>
  |variableAttributes |mutability d|ReadOnly
  |variableCharacteristics |dataType d|integer
|Description 3+d|This variable is used to report the length of <field> in <message> when it is larger than the length that is defined in the standard OCPP message schema.
|===

[[items_per_message_get_report]]
==== `ItemsPerMessageGetReport`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
|Component |componentName 2+d|DeviceDataCtrlr
.4+|Variable |variableName 2+d|ItemsPerMessage
  |variableInstance 2+d|GetReport
  |variableAttributes |mutability d|ReadOnly
  |variableCharacteristics |dataType d|integer
|Description 3+d|Maximum number of ComponentVariable entries that can be sent in one <<get_report_request,GetReportRequest>> or <<get_monitoring_report_request,GetMonitoringReportRequest>> message.
|===

[[items_per_message_get_variables]]
==== `ItemsPerMessageGetVariables`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
|Component |componentName 2+d|DeviceDataCtrlr
.4+|Variable |variableName 2+d|ItemsPerMessage
  |variableInstance 2+d|GetVariables
  |variableAttributes |mutability d|ReadOnly
  |variableCharacteristics |dataType d|integer
|Description 3+d|Maximum number of GetVariableData objects in <<get_variables_request,GetVariablesRequest>>.
|===

[[bytes_per_message_get_report]]
==== `BytesPerMessageGetReport`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
|Component |componentName 2+d|DeviceDataCtrlr
.4+|Variable |variableName 2+d|BytesPerMessage
  |variableInstance 2+d|GetReport
  |variableAttributes |mutability d|ReadOnly
  |variableCharacteristics |dataType d|integer
|Description 3+d|Message Size (in bytes) - puts constraint on <<get_report_request,GetReportRequest>> or <<get_monitoring_report_request,GetMonitoringReportRequest>> message size.
|===

[[bytes_per_message_get_variables]]
==== `BytesPerMessageGetVariables`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
|Component |componentName 2+d|DeviceDataCtrlr
.4+|Variable |variableName 2+d|BytesPerMessage
  |variableInstance 2+d|GetVariables
  |variableAttributes |mutability d|ReadOnly
  |variableCharacteristics |dataType d|integer
|Description 3+d|Message Size (in bytes) - puts constraint on <<get_variables_request,GetVariablesRequest>> message size.
|===

[[configuration_value_size]]
==== `ConfigurationValueSize`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|DeviceDataCtrlr
.4+|Variable |variableName 2+d|ConfigurationValueSize
  |variableAttributes |mutability d|ReadOnly
  .2+|variableCharacteristics |dataType d|integer
    |maxLimit d|1000
|Description 3+d|This Configuration Variable can be used to limit the following fields: SetVariableData.attributeValue and VariableCharacteristics.valueList. The max size of these values will always remain equal.
|===

[[reporting_value_size]]
==== `ReportingValueSize`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|DeviceDataCtrlr
.4+|Variable |variableName 2+d|ReportingValueSize
  |variableAttributes |mutability d|ReadOnly
  .2+|variableCharacteristics |dataType d|integer
    |maxLimit d|2500
|Description 3+d|This Configuration Variable can be used to limit the following fields: GetVariableResult.attributeValue, VariableAttribute.value and EventData.actualValue. The max size of these values will always remain equal.
|===

[[items_per_message_set_variables]]
==== `ItemsPerMessageSetVariables`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
|Component |componentName 2+d|DeviceDataCtrlr
.4+|Variable |variableName 2+d|ItemsPerMessage
  |variableInstance 2+d|SetVariables
  |variableAttributes |mutability d|ReadOnly
  |variableCharacteristics |dataType d|integer
|Description 3+d|Maximum number of SetVariableData objects in <<set_variables_request,SetVariablesRequest>>.
|===

==== `BytesPerMessageSetVariables`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
|Component |componentName 2+d|DeviceDataCtrlr
.4+|Variable |variableName 2+d|BytesPerMessage
  |variableInstance 2+d|SetVariables
  |variableAttributes |mutability d|ReadOnly
  |variableCharacteristics |dataType d|integer
|Description 3+d|Message Size (in bytes) - puts constraint on <<set_variables_request,SetVariablesRequest>> message size.
|===

==== `DateTime`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
|Component |componentName 2+d|ClockCtrlr
.3+|Variable |variableName 2+d|DateTime
  |variableAttributes |mutability d|ReadOnly
  |variableCharacteristics |dataType d|DateTime
|Description 3+d|Contains the current date and time.
|===

[[ntp_source]]
==== `NtpSource`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|ClockCtrlr
.4+|Variable |variableName 2+d|NtpSource
  |variableAttributes |mutability d|ReadWrite
  .2+|variableCharacteristics |dataType d|OptionList
    |valuesList |DHCP, manual
|Description 3+d|When an NTP client is implemented, this variable can be used to configure the client: Use the NTP server provided via DHCP, or use the manually configured NTP server.
|===

[[ntp_server_uri]]
==== `NtpServerUri`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|ClockCtrlr
.4+|Variable |variableName 2+d|NtpServerUri
  |variableInstance 2+d|Single digit, multiple servers allowed, primary NtpServer has instance '1', the secondary has instance '2'. etc
  |variableAttributes |mutability d|ReadWrite
  |variableCharacteristics |dataType d|string
|Description 3+d|When an NTP client is implemented, this variable can be used to configure the client: This contains the address of the NTP server.

  Multiple NTP servers can be configured. These can be back-up NTP servers. If the NTP client supports it, it can also connect to multiple NTP servers simultaneous to get a more reliable time source.
|===

[[timeoffset]]
==== `TimeOffset`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|ClockCtrlr
.3+|Variable |variableName 2+d|TimeOffset
  |variableAttributes |mutability d|ReadWrite
  |variableCharacteristics |dataType d|string
|Description 3+d|Configured current local time offset in the format: "+01:00", "-02:00" etc.

  When a TimeOffset is used, it is advised not to implement: <<timezone,`TimeZone`>>. If a Charging Station has implemented both <<timeoffset,`TimeOffset`>> and <<timezone,`TimeZone`>> it is RECOMMENDED to not use both at the same time.

  The time offset is for display purposes.
|===

[[next_time_offset_transition_datetime]]
==== `NextTimeOffsetTransitionDateTime`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|ClockCtrlr
.3+|Variable |variableName 2+d|NextTimeOffsetTransitionDateTime
  |variableAttributes |mutability d|ReadWrite
  |variableCharacteristics |dataType d|DateTime
|Description 3+d|Date time of the next time offset transition. On this date time, the clock displayed to the EV driver will be given the new offset as configured via <<time_offset_next_transition,`TimeOffsetNextTransition`>>. +
  This can be used to manually configure the next start or end of a daylight saving time period.
|===

[[time_offset_next_transition]]
==== `TimeOffsetNextTransition`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|ClockCtrlr
.4+|Variable |variableName 2+d|TimeOffset
  |variableInstance 2+d|NextTransition
  |variableAttributes |mutability d|ReadWrite
  |variableCharacteristics |dataType d|string
|Description 3+d|Next local time offset in the format: "+01:00", "-02:00" etc. +
  New offset that will be set on the next time offset transition as configured via <<next_time_offset_transition_datetime,`NextTimeOffsetTransitionDateTime`>>. +
  This can be used to manually configure the offset for the start or end of the daylight saving time period.
|===

[[timesource]]
==== `TimeSource`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
|Component |componentName 2+d|ClockCtrlr
.4+|Variable |variableName 2+d|TimeSource
  |variableAttributes |mutability d|ReadWrite
  .2+|variableCharacteristics |dataType d|SequenceList
    |valuesList d|List of all implemented time sources. Possible values: Heartbeat, NTP, GPS, RealTimeClock, MobileNetwork, RadioTimeTransmitter
|Description 3+d|Via this variable, the Charging Station provides the CSMS with the option to configure a clock source, if more than 1 are implemented.

  By providing a list of possible sources, the CSO can configure fallback sources.

  Example: +
  "NTP,Heartbeat" means, use NTP, but when none of the NTP servers responses, use time synchronization via Heartbeat.

  NOTE: RadioTimeTransmitter: At various locations around the globe, low-frequency radio transmitters provide accurate local time information e.g. DCF77 in Germany, MSF in the United Kingdom, JJY in Japan etc. Such aradio time clock can be used as a time source for a Charging Station. The Charging Station shall convert the broadcasted time to UTC. For this <<timezone,`TimeZone`>>, <<timeoffset,`TimeOffset`>>, <<next_time_offset_transition_datetime,`NextTimeOffsetTransitionDateTime`>> and <<time_offset_next_transition,`TimeOffsetNextTransition`>> can be used.
|===

[[timezone]]
==== TimeZone

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|ClockCtrlr
.3+|Variable |variableName 2+d|TimeZone
  |variableAttributes |mutability d|ReadWrite
  |variableCharacteristics |dataType d|string
|Description 3+d|Configured current local time zone in the format: "Europe/Oslo", "Asia/Singapore" etc.

  When a time zone is used, it is advised not to implement: <<timeoffset,`TimeOffset`>>. If a Charging Station has implemented both <<timeoffset,`TimeOffset`>> and <<timezone,`TimeZone`>> it is RECOMMENDED to not use both at the same time.

  The time zone is for display purposes.
|===

==== `TimeAdjustmentReportingThreshold`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|ClockCtrlr
.4+|Variable |variableName 2+d|TimeAdjustmentReportingThreshold
  |variableAttributes |mutability d|ReadWrite
  .2+|variableCharacteristics |unit d|s
    |dataType d|integer
|Description 3+d|When the clock time is adjusted forwards or backwards for more then TimeAdjustmentReportingThreshold number of seconds, a SecurityEventNotification( "SettingSystemTime" ) is sent by the charging station. A reasonable value is 20 seconds.
|===

==== `CustomImplementationEnabled`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|CustomizationCtrlr
.4+|Variable |variableName 2+d|CustomImplementationEnabled
  |variableInstance 2+d|<VendorId>
  |variableAttributes |mutability d|ReadWrite
  |variableCharacteristics |dataType d|boolean
|Description 3+d|This standard configuration variable can be used to enable/disable custom implementations that the Charging Station supports.

{nbsp}

It is recommended to first check if the custom behavior is able to be implemented using the device model, otherwise DataTransfer message(s) and/or CustomData fields can be used.
|===

[[security_related]]
=== Security related

[[basic_auth_password]]
==== `BasicAuthPassword`

The basic authentication password is used for HTTP Basic Authentication. The configuration value is write-only, so that it cannot be accidentally stored in plaintext by the CSMS when it reads out all configuration values.

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|SecurityCtrlr
.4+|Variable |variableName 2+d|BasicAuthPassword
  |variableAttributes |mutability d|WriteOnly
  .2+|variableCharacteristics |dataType d|string
    |maxLimit d|40 (Max length of the BasicAuthPassword)
|Description 3+d|The basic authentication password is used for HTTP Basic Authentication. The password SHALL be a randomly chosen passwordString with a sufficiently high entropy, consisting of minimum 16 and maximum 40 characters (alpha-numeric characters and the special characters allowed by passwordString). The password SHALL be sent as a UTF-8 encoded string (NOT encoded into octet string or base64). This configuration variable is write-only, so that it cannot be accidentally stored in plaintext by the CSMS when it reads out all configuration variables. This configuration variable is required unless only "security profile 3 - TLS with client side certificates" is implemented.
|===

==== `Identity`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|SecurityCtrlr
.4+|Variable |variableName 2+d|Identity
  |variableAttributes |mutability d|ReadOnly or ReadWrite
  .2+|variableCharacteristics |dataType d|string
    |maxLimit d|48 (Charging Station Identity)
|Description 3+d|The Charging Station identity. identity is an <<primitive_datatypes,identifierString>>, however because this value is also used as the basic authentication username, the colon character ':' SHALL not be used. +
Maximum length was chosen to ensure compatibility with EVSE ID from <<emi3_b0,[EMI3-BO]>> "Part 2: business objects".
|===

==== `OrganizationName`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
|Component |componentName 2+d|SecurityCtrlr
.3+|Variable |variableName 2+d|OrganizationName
  |variableAttributes |mutability d|ReadWrite
  |variableCharacteristics |dataType d|string
|Description 3+d|This configuration variable is used to set the organization name of the CSO or an organization trusted by the CSO. It is used to set the O (_organizationName_) RDN in the subject field of the client certificate. See also A00.FR.509.
|===

==== `CertificateEntries`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
|Component |componentName 2+d|SecurityCtrlr
.4+|Variable |variableName 2+d|CertificateEntries
  |variableAttributes |mutability d|ReadOnly
  .2+|variableCharacteristics |dataType d|integer
    |maxLimit d|Maximum number of Certificates installed at any time.
|Description 3+d|Amount of Certificates currently installed on the Charging Station.
|===

[[security_profile]]
==== `SecurityProfile`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
|Component |componentName 2+d|SecurityCtrlr
.3+|Variable |variableName 2+d|SecurityProfile
  |variableAttributes |mutability d|ReadOnly
  |variableCharacteristics |dataType d|integer
|Description 3+d|This configuration variable is used to report the security profile used by the Charging Station.
|===

[[additional_root_certificate_check]]
==== `AdditionalRootCertificateCheck`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|SecurityCtrlr
.3+|Variable |variableName 2+d|AdditionalRootCertificateCheck
  |variableAttributes |mutability d|ReadOnly
  |variableCharacteristics |dataType d|boolean
|Description 3+d|When set to true, only one certificate (plus a temporarily fallback certificate) of certificateType <<install_certificate_use_enum_type,CSMSRootCertificate>> is allowed to be installed at a time. When installing a new CSMS Root certificate, the new certificate SHALL replace the old one AND the new CSMS Root Certificate MUST be signed by the old CSMS Root Certificate it is replacing. +
This configuration variable is required unless only "security profile 1 - Unsecured Transport with Basic Authentication" is implemented. Please note that security profile 1 SHOULD only be used in trusted networks.

  _Note: When using this additional security mechanism please be aware that the Charging Station needs to perform a full certificate chain verification when the new CSMS Root certificate is being installed. However, once the old CSMS Root certificate is set as the fallback certificate, the Charging Station needs to perform a partial certificate chain verification when verifying the server certificate during the TLS handshake. Otherwise the verification will fail once the old CSMS Root (fallback) certificate is either expired or removed._

  _Note 2: The statement that the variable is required, means that the configuration variable must be present, but does NOT indicate that the feature must be implemented. This is an optional feature. By setting the value to false, the Charging Station indicates that it does not support this feature, whereas true means that it does support the feature._
|===

[[max_certificate_chainsize]]
==== `MaxCertificateChainSize`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|SecurityCtrlr
.4+|Variable |variableName 2+d|MaxCertificateChainSize
  |variableAttributes |mutability d|ReadOnly
  .2+|variableCharacteristics |dataType d|integer
    |maxLimit d|10000
|Description 3+d|This configuration variable can be used to limit the size of the 'certificateChain' field from the <<certificate_signed_request,CertificateSignedRequest>> PDU. This value SHOULD NOT be set too small. The smaller this value, the less security architectures the Charging Station will support. It is RECOMMENDED to set at least a size of 5600. This will allow the Charging Station to support most security architectures.
|===

[[cert_signing_wait_minimum]]
==== `CertSigningWaitMinimum`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|SecurityCtrlr
.4+|Variable |variableName 2+d|CertSigningWaitMinimum
  |variableAttributes |mutability d|ReadWrite
  .2+|variableCharacteristics |unit d|s
    |dataType d|integer
|Description 3+d|This configuration variable defines how long the Charging Station has to wait before generating another CSR, in the case the CSMS accepts the SignCertificateRequest, but never returns the signed certificate back. This value will be doubled after every attempt. The amount of attempts is configured at <<cert_signing_repeat_times,CertSigningRepeatTimes>> If the certificate signing process is slow, this setting allows the CSMS to tell the Charging Station to allow more time.
|===

[[cert_signing_repeat_times]]
==== `CertSigningRepeatTimes`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|SecurityCtrlr
.3+|Variable |variableName 2+d|CertSigningRepeatTimes
  |variableAttributes |mutability d|ReadWrite
  |variableCharacteristics |dataType d|integer
|Description 3+d|This variable can be used to configure the amount of times the Charging Station SHALL double the previous back-off time, starting with the number of seconds configured at <<cert_signing_wait_minimum,CertSigningWaitMinimum>>, every time the back-off time expires without having received the CertificateSignedRequest containing the from the CSR generated signed certificate. When the maximum number of increments is reached, the Charging Station SHALL stop resending the SignCertificateRequest, until it is requested by the CSMS using a TriggerMessageRequest.
|===

[[authorization_related]]
=== Authorization related

[[auth_enabled]]
==== AuthEnabled

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|AuthCtrlr
.3+|Variable |variableName 2+d|Enabled
  |variableAttributes |mutability d|ReadWrite
  |variableCharacteristics |dataType d|boolean
|Description 3+d|If set to _false_, then no authorization is done before starting a transaction or when reading an idToken. If an idToken was provided, then it will be put in the _idToken_ field of the TransactionEventRequest. If no idToken was provided, then _idToken_ in TransactionEventRequest will be left empty and type is set to `NoAuthorization`.
|===

[[additional_info_items_permessage]]
==== `AdditionalInfoItemsPerMessage`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|AuthCtrlr
.3+|Variable |variableName 2+d|AdditionalInfoItemsPerMessage
  |variableAttributes |mutability d|ReadOnly
  |variableCharacteristics |dataType d|integer
|Description 3+d|Maximum number of AdditionalInfo items that can be sent in one message. This configuration variable only has to be implemented when AdditionalInfo is implemented.
|===

[[offline_tx_for_unknown_id_enabled]]
==== `OfflineTxForUnknownIdEnabled`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|AuthCtrlr
.3+|Variable |variableName 2+d|OfflineTxForUnknownIdEnabled
  |variableAttributes |mutability d|ReadWrite
  |variableCharacteristics |dataType d|boolean
|Description 3+d|If this key exists, the Charging Station supports <<unknown_offline_authorization,Unknown Offline Authorization>>. If this key reports a value of _true_, <<unknown_offline_authorization,Unknown Offline Authorization>> is enabled.
|===

[[authorize_remote_start]]
==== `AuthorizeRemoteStart`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
|Component |componentName 2+d|AuthCtrlr
.3+|Variable |variableName 2+d|AuthorizeRemoteStart
  |variableAttributes |mutability d|ReadOnly or ReadWrite. Choice is up to Charging Station implementation.
  |variableCharacteristics |dataType d|boolean
|Description 3+d|Whether a remote request to start a transaction in the form of <<request_start_transaction_request,RequestStartTransactionRequest>> message should be authorized beforehand like a local action to start a transaction.
|===

[[local_authorize_offline]]
==== `LocalAuthorizeOffline`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
|Component |componentName 2+d|AuthCtrlr
.3+|Variable |variableName 2+d|LocalAuthorizeOffline
  |variableAttributes |mutability d|ReadWrite
  |variableCharacteristics |dataType d|boolean
|Description 3+d|Whether the Charging Station, when _Offline_, will start a transaction for locally-authorized identifiers.
|===

[[local_pre_authorize]]
==== `LocalPreAuthorize`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
|Component |componentName 2+d|AuthCtrlr
.3+|Variable |variableName 2+d|LocalPreAuthorize
  |variableAttributes |mutability d|ReadWrite
  |variableCharacteristics |dataType d|boolean
|Description 3+d|Whether the Charging Station, when online, will start a transaction for locally-authorized identifiers without waiting for or requesting an <<authorize_response,AuthorizeResponse>> from the CSMS.
|===

[[master_pass_group_id]]
==== `MasterPassGroupId`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|AuthCtrlr
.4+|Variable |variableName 2+d|MasterPassGroupId
  |variableAttributes |mutability d|ReadWrite
  .2+|variableCharacteristics |dataType d|string
    |maxLimit |36 (The maximum string length of MasterPassGroupId)
|Description 3+d|IdTokens that have this id as groupId belong to the Master Pass Group. Meaning they can stop any ongoing transaction, but cannot start transactions. This can, for example, be used by law enforcement personal to stop any ongoing transaction when an EV has to be towed away.
|===

==== `DisableRemoteAuthorization`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|AuthCtrlr
.3+|Variable |variableName 2+d|DisableRemoteAuthorization
  |variableAttributes |mutability d|ReadWrite
  |variableCharacteristics |dataType d|boolean
|Description 3+d|When set to true this instructs the Charging Station to not issue any AuthorizationRequests, but only use Authorization Cache and Local Authorization List to determine validity of idTokens.

Note: The difference between *AuthCtrlr.DisableRemoteAuthorization* and *AuthCacheCtrlr.DisablePostAuthorization* is that the latter only disables re-authorization of tokens that are as not-Accepted in the Authorization Cache or Local Authorization List, whereas *AuthCtrlr.DisableRemoteAuthorization* disables all authorization with CSMS.
|===

[[authorization_cache_related]]
=== Authorization Cache related

[[auth_cache_enabled]]
==== `AuthCacheEnabled`

[cols="^.^1s,10",%autowidth.stretch]
|===
|NOTE |When the value of this variable is changed, the content of the authorization cache should not be altered.
|===

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|AuthCacheCtrlr
.3+|Variable |variableName 2+d|Enabled
  |variableAttributes |mutability d|ReadWrite
  |variableCharacteristics |dataType d|boolean
|Description 3+d|If this variable exists and reports a value of _true_, Authorization Cache is enabled.
|===

==== `AuthCacheAvailable`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|AuthCacheCtrlr
.3+|Variable |variableName 2+d|Available
  |variableAttributes |mutability d|ReadOnly
  |variableCharacteristics |dataType d|boolean
|Description 3+d|If this variable exists and reports a value of _true_, Authorization Cache is supported, but not necessarily enabled.
|===

[[auth_cache_lifetime]]
==== `AuthCacheLifeTime`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|AuthCacheCtrlr
.4+|Variable |variableName 2+d|LifeTime
  |variableAttributes |mutability d|ReadWrite
  .2+|variableCharacteristics |unit d|s
    |dataType d|integer
|Description 3+d|Indicates how long it takes until a token expires in the authorization cache since it is last used.
|===

==== `AuthCacheStorage`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|AuthCacheCtrlr
.4+|Variable |variableName 2+d|Storage
  |variableAttributes |mutability d|ReadOnly
  .2+|variableCharacteristics |dataType d|integer
    |maxLimit d|The maximum number of bytes
|Description 3+d|Indicates the number of bytes currently used by the <<authorization_cache,Authorization Cache>>. MaxLimit indicates the maximum number of bytes that can be used by the <<authorization_cache,Authorization Cache>>.
|===

==== `AuthCachePolicy`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|AuthCacheCtrlr
.4+|Variable |variableName 2+d|Policy
  |variableAttributes |mutability d|ReadWrite
  .2+|variableCharacteristics |dataType d|OptionList
    |valuesList d|LRU, LFU, FIFO, CUSTOM
|Description 3+d|Cache Entry Replacement Policy: least recently used, least frequently used, first in first out, other custom mechanism.
|===

==== `AuthCacheDisablePostAuthorize`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|AuthCacheCtrlr
.3+|Variable |variableName 2+d|DisablePostAuthorize
  |variableAttributes |mutability d|ReadWrite
  |variableCharacteristics |dataType d|boolean
|Description 3+d|When set to true this variable disables the behavior to request authorization for an idToken that is stored in the cache with a status other than Accepted, as stated in C10.FR.03 and C12.FR.05.
|===

[[local_authorization_list_management_related]]
=== Local Authorization List Management related

[[local_auth_list_enabled]]
==== `LocalAuthListEnabled`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|LocalAuthListCtrlr
.3+|Variable |variableName 2+d|Enabled
  |variableAttributes |mutability d|ReadWrite
  |variableCharacteristics |dataType d|boolean
|Description 3+d|If this variable exists and reports a value of _true_, <<local_authorization_list,Local Authorization List>> is enabled.
|===

[[local_auth_list_entries]]
==== `LocalAuthListEntries`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|when `LocalAuthListAvailable` is _true_
|Component |componentName 2+d|LocalAuthListCtrlr
.4+|Variable |variableName 2+d|Entries
  |variableAttributes |mutability d|ReadOnly
  .2+|variableCharacteristics |dataType d|integer
    |maxLimit d|The maximum number of IdTokens that can be stored in the <<local_authorization_list,Local Authorization List>>.
|Description 3+d|Amount of IdTokens currently in the <<local_authorization_list,Local Authorization List>>. +
  The maxLimit of this variable SHALL be provided to report the maximum number of IdTokens that can be stored in the <<local_authorization_list,Local Authorization List>>.
|===

[[local_auth_list_available]]
==== `LocalAuthListAvailable`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|LocalAuthListCtrlr
.3+|Variable |variableName 2+d|Available
  |variableAttributes |mutability d|ReadOnly
  |variableCharacteristics |dataType d|boolean
|Description 3+d|If this variable exists and reports a value of _true_, <<local_authorization_list,Local Authorization List>> is supported.
|===

[[items_per_message_send_local_list]]
==== `ItemsPerMessageSendLocalList`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|when `LocalAuthListAvailable` is _true_
|Component |componentName 2+d|LocalAuthListCtrlr
.3+|Variable |variableName 2+d|ItemsPerMessage
  |variableAttributes |mutability d|ReadOnly
  |variableCharacteristics |dataType d|integer
|===

[[bytes_per_message_send_local_list]]
==== `BytesPerMessageSendLocalList`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|when `LocalAuthListAvailable` is _true_
|Component |componentName 2+d|LocalAuthListCtrlr
.3+|Variable |variableName 2+d|BytesPerMessage
  |variableAttributes |mutability d|ReadOnly
  |variableCharacteristics |dataType d|integer
|===

==== `LocalAuthListStorage`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|LocalAuthListCtrlr
.4+|Variable |variableName 2+d|Storage
  |variableAttributes |mutability d|ReadOnly
  .2+|variableCharacteristics |dataType d|integer
    |maxLimit d|The maximum number of bytes
|Description 3+d|Indicates the number of bytes currently used by the <<local_authorization_list,Local Authorization List>>. MaxLimit indicates the maximum number of bytes that can be used by the <<local_authorization_list,Local Authorization List>>.
|===

==== `LocalAuthListDisablePostAuthorize`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|LocalAuthListCtrlr
.3+|Variable |variableName 2+d|DisablePostAuthorize
  |variableAttributes |mutability d|ReadWrite
  |variableCharacteristics |dataType d|boolean
|Description 3+d|When set to _true_ this variable disables the behavior to request authorization for an idToken that is stored in the local authorization list with a status other than Accepted, as stated in C14.FR.03.
|===

==== `LocalAuthListSupportsExpiryDateTime`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|LocalAuthListCtrlr
.3+|Variable |variableName 2+d|SupportsExpiryDateTime
  |variableAttributes |mutability d|ReadOnly
  |variableCharacteristics |dataType d|boolean
|Description 3+d|When set to _true_ Charging Station will disregard idTokens for authorization as if not present in the Local Authorization List when current date/time is past the value of _cacheExpiryDateTime_. +
  Note, that _cacheExpiryDateTime_ does not affect the behavior of SendLocalListRequest or GetLocalListRequest messages.
|===

[[transaction_related]]
=== Transaction related

[[ev_connection_timeout]]
==== `EVConnectionTimeOut`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
|Component |componentName 2+d|TxCtrlr
.4+|Variable |variableName 2+d|EVConnectionTimeOut
  |variableAttributes |mutability d|ReadWrite
  .2+|variableCharacteristics |unit d|s
    |dataType d|integer
|Description 3+d|Interval from between "starting" of a transaction until incipient transaction is automatically canceled, due to failure of EV driver to (correctly) insert the charging cable connector(s) into the appropriate socket(s). The Charging Station SHALL go back to the original state, probably: 'Available'. "Starting" might be the swiping of the RFID, pressing a start button, a RequestStartTransactionRequest being received etc.
|===

[[stop_tx_on_ev_side_disconnect]]
==== `StopTxOnEVSideDisconnect`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
|Component |componentName 2+d|TxCtrlr
.3+|Variable |variableName 2+d|StopTxOnEVSideDisconnect
  |variableAttributes |mutability d|ReadWrite or ReadOnly, depending on Charging Station implementation.
  |variableCharacteristics |dataType d|boolean
|Description 3+d|When set to _true_, the Charging Station SHALL deauthorize the transaction when the cable is unplugged from the EV.
|===

[[tx_before_accepted_enabled]]
==== `TxBeforeAcceptedEnabled`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|TxCtrlr
.3+|Variable |variableName 2+d|TxBeforeAcceptedEnabled
  |variableAttributes |mutability d|ReadWrite
  |variableCharacteristics |dataType d|boolean
|Description 3+d|With this configuration variable the Charging Station can be configured to allow charging before having received a <<boot_notification_response,BootNotificationResponse>> with <<registration_status_enum_type,RegistrationStatus>>: Accepted. See: <<transactions_before_being_accepted_by_a_csms,Transactions before being accepted by a CSMS>>.
|===

[[tx_start_point]]
==== `TxStartPoint`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
|Component |componentName 2+d|TxCtrlr
.4+|Variable |variableName 2+d|TxStartPoint
  |variableAttributes |mutability d|ReadOnly or ReadWrite. Choice is up to Charging Station implementation.
  .2+|variableCharacteristics |dataType d|MemberList
    |valueList d|See <<tx_start_stop_point_values,TxStartStopPoint values>> for allowed values. It is not required to implement all possible values.
|Description 3+d|Defines when the Charging Station starts a new transaction: first <<transaction_event_request,TransactionEventRequest>>: eventType = Started. +
  When any event in the given list occurs, the Charging Station SHALL start a transaction. +
  The Charging Station SHALL only send the Started event once for every transaction. +
  It is advised to put all events that should be part of a transaction in the list, in case the start event never occurs. Because the possible events don’t always have to come in the same order it is possible to provide a list of events. Which ever comes first will then cause a transaction to be started. For example: EVConnected, Authorized would mean that a transaction is started when an EV is detected (Cable is connected), or when an EV Driver swipes his RFID card en the CSMS successfully authorizes the ID for charging.
|===

[[tx_stop_point]]
==== `TxStopPoint`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
|Component |componentName 2+d|TxCtrlr
.4+|Variable |variableName 2+d|TxStopPoint
  |variableAttributes |mutability d|ReadOnly or ReadWrite. Choice is up to Charging Station implementation.
  .2+|variableCharacteristics |dataType d|MemberList
    |valueList d|See <<tx_start_stop_point_values,TxStartStopPoint values>> for allowed values. It is not required to implement all possible values.
|Description 3+d|Defines when the Charging Station ends a transaction: last <<transaction_event_request,TransactionEventRequest>>: eventType = Ended. +
  When any event in the given list is no longer valid, the Charging Station SHALL end the transaction. +
  The Charging Station SHALL only send the Ended event once for every transaction.
|===

[[tx_start_stop_point_values]]
==== TxStartStopPoint values

===== TxStartPoint values

The following table lists the values allowed for the <<tx_start_point,`TxStartPoint`>> variable. These values represent logical steps or events that (may) occur during a charging session. When such an event occurs, and it is listed in in the <<tx_start_point,`TxStartPoint`>> variable, then this marks the start of a transaction.

[cols="<.^3s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|Value          |Description

|ParkingBayOccupancy
  |An object (probably an EV) is detected in the parking/charging bay.
|EVConnected
  |Both ends of the Charging Cable have been connected (if this can be detected, else detection of a cable being plugged into the socket), or for wireless charging: initial communication between EVSE and EV is established.
|Authorized
  |Driver or EV has been authorized, this can also be some form of anonymous authorization like a start button.
|PowerPathClosed
  |All preconditions for charging have been met, power can flow. This event is the logical AND of `EVConnected` and `Authorized` and should be used if a transaction is supposed to start when EV is connected and authorized. Despite its name, this event is not related to the state of the power relay. Note: There may be situations where `PowerPathClosed` does not imply that charging starts at that moment, e.g. because of delayed charging or a battery that is too hot.
|EnergyTransfer
  |Energy is being transferred between EV and EVSE.
|DataSigned
  |The moment when the signed meter value is received from the fiscal meter, that is used in the TransactionEventRequest with _context_ = `Transaction.Begin` and _triggerReason_ = `SignedDataReceived`. This TxStartPoint might be applicable when legislation exists that only allows a billable transaction to start when the first signed meter value has been received.
|===

[[tx_stop_point_values]]
===== TxStopPoint values

The following table lists the values allowed for the <<tx_stop_point,`TxStopPoint`>> variable. These values represent logical steps or events that (may) occur during a charging session. When such an event occurs, and it is listed in in the <<tx_stop_point,`TxStopPoint`>> variable, then this marks the end of a transaction.

The values are the same as for <<tx_start_point,`TxStartPoint`>>, but in this case the meaning is different, since it refers to the ending of the event, rather than the start. For use with <<tx_stop_point,`TxStopPoint`>> each value should be interpreted as if it had "Not" prefixed to it. See the following table:

[cols="<.^3s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|Value          |Description

|ParkingBayOccupancy 
  |An object (probably an EV) is no longer detected in the parking/charging bay.
|EVConnected 
  |One or both ends of the Charging Cable have been disconnected (if this can be detected, else detection of a cable being unplugged from the socket), or for wireless charging: communication between EVSE and EV is lost.
|Authorized 
  |Driver or EV is no longer authorized, this can also be some form of anonymous authorization like a start button. The end of authorization will cause the Charging Station to stop the energy transfer, after which the TransactionEventRequest with eventType = Ended will be transmitted.
|PowerPathClosed 
  |All preconditions for charging are no longer met. This event is the logical OR of EVConnected and Authorized and should be used if a transaction is supposed to end when EV is disconnected and/or deauthorized. This will cause the Charging Station to stop the energy transfer, after which the TransactionEventRequest with eventType = Ended will be transmitted. It is exactly the same as having the values EVConnected, Authorized in <<tx_stop_point,`TxStopPoint`>>. +
  Despite its name, this event is not related to the state of the power relay.
|EnergyTransfer
  |Energy is not being transferred between EV and EVSE. +
  This is not recommended to use as a `TxStopPoint`, because it will stop the transaction as soon as EV or EVSE (temporarily) suspend the charging.
|DataSigned |This condition has no meaning as a `TxStopPoint` and should not be used as such.
|===

[[max_energy_on_invalid_id]]
==== `MaxEnergyOnInvalidId`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|TxCtrlr
.4+|Variable |variableName 2+d|MaxEnergyOnInvalidId
  |variableAttributes |mutability d|ReadWrite
  .2+|variableCharacteristics |unit d|Wh
    |dataType d|integer
|Description 3+d|Maximum amount of energy in Wh delivered when an identifier is deauthorized by the CSMS after start of a transaction.
|===

[[stop_tx_on_invalid_id]]
==== `StopTxOnInvalidId`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
|Component |componentName 2+d|TxCtrlr
.3+|Variable |variableName 2+d|StopTxOnInvalidId
  |variableAttributes |mutability d|ReadWrite
  |variableCharacteristics |dataType d|boolean
|Description 3+d|whether the Charging Station will deauthorize an ongoing transaction when it receives a non-_Accepted_ authorization status in <<transaction_event_response,TransactionEventResponse>> for this transaction.
|===

[[metering_related]]
=== Metering related

==== `SampledDataEnabled`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|SampledDataCtrlr
.3+|Variable |variableName 2+d|Enabled
  |variableAttributes |mutability d|ReadWrite
  |variableCharacteristics |dataType d|boolean
|Description 3+d|If this variable reports a value of _true_, Sampled Data is enabled.
|===

==== `SampledDataAvailable`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|SampledDataCtrlr
.3+|Variable |variableName 2+d|Available
  |variableAttributes |mutability d|ReadOnly
  |variableCharacteristics |dataType d|boolean
|Description 3+d|If this variable reports a value of _true_, Sampled Data is supported.
|===

[[sampled_data_sign_readings]]
==== `SampledDataSignReadings`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|SampledDataCtrlr
.3+|Variable |variableName 2+d|SignReadings
  |variableAttributes |mutability d|ReadWrite
  |variableCharacteristics |dataType d|boolean
|Description 3+d|If set to _true_, the Charging Station SHALL include signed meter values in the <<transaction_event_request,TransactionEventRequest>> to the CSMS. Some Charging Stations might only be able to sign `Transaction.Begin` and `Transaction.End` meter values. When a Charging Station does not support signed meter values it SHALL NOT report this variable.
|===

[[sampled_data_tx_ended_measurands]]
==== `SampledDataTxEndedMeasurands`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
|Component |componentName 2+d|SampledDataCtrlr
.4+|Variable |variableName 2+d|TxEndedMeasurands
  |variableAttributes |mutability d|ReadWrite
  .2+|variableCharacteristics |dataType d|MemberList
    |maxLimit d|The maximum length of the CSV formatted string, to be defined by the implementer.
|Description 3+d|Sampled measurands to be included in the _meterValues_ element of <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Ended>>), every <<sampled_data_tx_ended_interval,`SampledDataTxEndedInterval`>> seconds from the start of the transaction until and including the last measurands at the end of the transaction. +
  The Charging Station reports the list of supported <<measurand_enum_type,Measurands>> in <<variable_characteristics_type,VariableCharacteristicsType.valuesList>> of this variable. This way the CSMS knows which <<measurand_enum_type,Measurands>> it can put in the `TxEndedSampledData`.

  When left empty, no sampled measurands SHALL be put into the <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Ended>>).
|===

[[sampled_data_tx_ended_interval]]
==== `SampledDataTxEndedInterval`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
|Component |componentName 2+d|SampledDataCtrlr
.4+|Variable |variableName 2+d|TxEndedInterval
  |variableAttributes |mutability d|ReadWrite
  .2+|variableCharacteristics |unit d|s
    |dataType d|integer
|Description 3+d|Interval between sampling of metering (or other) data, intended to be transmitted in the <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Ended>>) message. For transaction data (evseId>0), samples are acquired and transmitted only in the <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Ended>>) message.

  A value of "0" (numeric zero), by convention, is to be interpreted to mean that only the values taken at the start and end of a transaction SHALL be transmitted (no intermediate values). A TxEndedInterval = 0 is recommended, since other values may result in a lot of data to be transmitted in the <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Ended>>) message.
|===

[[sampled_data_tx_started_measurands]]
==== `SampledDataTxStartedMeasurands`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
|Component |componentName 2+d|SampledDataCtrlr
.4+|Variable |variableName 2+d|TxStartedMeasurands
  |variableAttributes |mutability d|ReadWrite
  .2+|variableCharacteristics |dataType d|MemberList
    |maxLimit d|The maximum length of the CSV formatted string, to be defined by the implementer.
|Description 3+d|Sampled measurand(s) to be taken at the start of any transaction to be included in the meterValues field of the first <<transaction_event_request,TransactionEventRequest>> message send at the start of a transaction (eventType = Started). +
  The Charging Station reports the list of supported <<measurand_enum_type,Measurands>> in <<variable_characteristics_type,VariableCharacteristicsType.valuesList>> of this variable. This way the CSMS knows which <<measurand_enum_type,Measurands>> it can put in the `SampledDataTxStartedMeasurands`.

  If the Charging Station has a meter, recommended to use as default: "Energy.Active.Import.Register"
|===

[[sampled_data_tx_updated_measurands]]
==== `SampledDataTxUpdatedMeasurands`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
|Component |componentName 2+d|SampledDataCtrlr
.4+|Variable |variableName 2+d|TxUpdatedMeasurands
  |variableAttributes |mutability d|ReadWrite
  .2+|variableCharacteristics |dataType d|MemberList
    |maxLimit d|The maximum length of the CSV formatted string, to be defined by the implementer.
|Description 3+d|Sampled measurands to be included in the meterValues element of every <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Updated>>), every <<sampled_data_tx_updated_interval,`SampledDataTxUpdatedInterval`>> seconds from the start of the transaction. +
  The Charging Station reports the list of supported <<measurand_enum_type,Measurands>> in <<variable_characteristics_type,VariableCharacteristicsType.valuesList>> of this variable. This way the CSMS knows which <<measurand_enum_type,Measurands>> it can put in the `SampledDataTxUpdatedMeasurands`.

  If the Charging Station has a meter, recommended to use as default: "Energy.Active.Import.Register"
|===

[[sampled_data_tx_updated_interval]]
==== `SampledDataTxUpdatedInterval`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
|Component |componentName 2+d|SampledDataCtrlr
.4+|Variable |variableName 2+d|TxUpdatedInterval
  |variableAttributes |mutability d|ReadWrite
  .2+|variableCharacteristics |unit d|s
    |dataType d|integer
|Description 3+d|Interval between sampling of metering (or other) data, intended to be transmitted via <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Updated>>) messages. For transaction data (evseId>0), samples are acquired and transmitted periodically at this interval from the start of the charging transaction.

A value of "0" (numeric zero), by convention, is to be interpreted to mean that no sampled data should be transmitted during the transaction.
|===

==== `AlignedDataEnabled`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|AlignedDataCtrlr
.3+|Variable |variableName 2+d|Enabled
  |variableAttributes |mutability d|ReadWrite
  |variableCharacteristics |dataType d|boolean
|Description 3+d|If this variable reports a value of _true_, Aligned Data is enabled.
|===

==== `AlignedDataAvailable`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|AlignedDataCtrlr
.3+|Variable |variableName 2+d|Available
  |variableAttributes |mutability d|ReadOnly
  |variableCharacteristics |dataType d|boolean
|Description 3+d|If this variable reports a value of _true_, Aligned Data is supported.
|===

[[aligned_data_measurands]]
==== `AlignedDataMeasurands`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
|Component |componentName 2+d|AlignedDataCtrlr
.4+|Variable |variableName 2+d|Measurands
  |variableAttributes |mutability d|ReadWrite
  .2+|variableCharacteristics |dataType d|MemberList
    |maxLimit d|The maximum length of the CSV formatted string, to be defined by the implementer.
|Description 3+d|Clock-aligned measurand(s) to be included in <<metervalues_request,MeterValuesRequest>> or <<transaction_event_request,TransactionEventRequest>>, every <<aligned_data_interval,`AlignedDataInterval`>> seconds. For all the allowed values see: <<measurand_enum_type,Measurand>>. +
  The Charging Station reports the list of supported <<measurand_enum_type,Measurands>> in <<variable_characteristics_type,VariableCharacteristicsType.valuesList>> of this variable. This way the CSMS knows which <<measurand_enum_type,Measurands>> it can put in the `AlignedDataMeasurands`.
|===

[[aligned_data_interval]]
==== `AlignedDataInterval`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
|Component |componentName 2+d|AlignedDataCtrlr
.4+|Variable |variableName 2+d|Interval
  |variableAttributes |mutability d|ReadWrite
  .2+|variableCharacteristics |unit d|s
    |dataType d|integer
|Description 3+d|Size (in seconds) of the clock-aligned data interval, intended to be transmitted in the <<metervalues_request,MeterValuesRequest>> or <<transaction_event_request,TransactionEventRequest>> message. This is the size (in seconds) of the set of evenly spaced aggregation intervals per day, starting at 00:00:00 (midnight). For example, a value of 900 (15 minutes) indicates that every day should be broken into 96 15-minute intervals. +
  When clock aligned data is being transmitted, the interval in question is identified by the start time and (optional) duration interval value, represented according to the ISO8601 standard. +
  A value of "0" (numeric zero), by convention, is to be interpreted to mean that no clock-aligned data should be transmitted.
|===

[[aligned_data_send_during_idle]]
==== `AlignedDataSendDuringIdle`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
.2+|Component |componentName 2+d|AlignedDataCtrlr
  |evse 2+d|*
.3+|Variable |variableName 2+d|SendDuringIdle
  |variableAttributes |mutability d|ReadWrite
  |variableCharacteristics |dataType d|boolean
|Description 3+d|If set to _true_, the Charging Station SHALL NOT send clock aligned meter values when a transaction is ongoing. When an EVSE is specified, it SHALL stop sending the clock aligned meter values for this EVSE when it has an ongoing transaction. When no EVSE is specified, it SHALL stop sending the clock aligned meter values when any transaction is ongoing on this Charging Station.
|===

[[aligned_data_sign_readings]]
==== `AlignedDataSignReadings`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|AlignedDataCtrlr
.3+|Variable |variableName 2+d|SignReadings
  |variableAttributes |mutability d|ReadWrite
  |variableCharacteristics |dataType d|boolean
|Description 3+d|If set to _true_, the Charging Station SHALL include signed meter values in the <<sampled_value_type,SampledValueType>> in the <<transaction_event_request,TransactionEventRequest>> to the CSMS for those measurands defined in `AlignedDataTxEndedMeasurands`. +
  When a Charging Station does not support signed meter values it SHALL NOT report this variable.
|===

[[aligned_data_tx_ended_measurands]]
==== `AlignedDataTxEndedMeasurands`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
|Component |componentName 2+d|AlignedDataCtrlr
.4+|Variable |variableName 2+d|TxEndedMeasurands
  |variableAttributes |mutability d|ReadWrite
  .2+|variableCharacteristics |dataType d|MemberList
    |maxLimit d|The maximum length of the CSV formatted string, to be defined by the implementer.
|Description 3+d|Clock-aligned periodic measurand(s) to be included in the meterValues element of <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Ended>>) for every <<aligned_data_tx_ended_interval,`AlignedDataTxEndedInterval`>> of the transaction. +
  The Charging Station reports the list of supported <<measurand_enum_type,Measurands>> in <<variable_characteristics_type,VariableCharacteristicsType.valuesList>> of this variable. This way the CSMS knows which <<measurand_enum_type,Measurands>> it can put in the `TxEndedAlignedData`.

  When left empty, no Clock-aligned measurands SHALL be put into the <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Ended>>).
|===

[[aligned_data_tx_ended_interval]]
==== `AlignedDataTxEndedInterval`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
|Component |componentName 2+d|AlignedDataCtrlr
.4+|Variable |variableName 2+d|TxEndedInterval
  |variableAttributes |mutability d|ReadWrite
  .2+|variableCharacteristics |unit d|s
    |dataType d|integer
|Description 3+d|Size (in seconds) of the clock-aligned data interval, intended to be transmitted in the <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Ended>>) message. This is the size (in seconds) of the set of evenly spaced aggregation intervals per day, starting at 00:00:00 (midnight). For example, a value of 900 (15 minutes) indicates that every day should be broken into 96 15-minute intervals. +
  When clock aligned data is being collected, the interval in question is identified by the start time and (optional) duration interval value, represented according to the ISO8601 standard. All intervals are transmitted (if so enabled) at the end of the transaction in 1 TransactionEventRequest (<<transaction_event_enum_type,eventType = Ended>>) message. +
  This is not a recommended practice, since the size of the message can become very large.
|===

==== `PublicKeyWithSignedMeterValue`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|OCPPCommCtrlr
.4+|Variable |variableName 2+d|PublicKeyWithSignedMeterValue
  |variableAttributes |mutability d|ReadWrite
  .2+|variableCharacteristics |dataType d|OptionList
    |valueList d|Never,OncePerTransaction,EveryMeterValue
|Description 3+d|This Configuration Variable can be used to configure whether a public key needs to be sent with a signed meter value. Note, that the field is required, so it needs to be present as an empty string when the public key is not sent.
|===

[[sampled_data_register_values_without_phases]]
==== `SampledDataRegisterValuesWithoutPhases`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|SampledDataCtrlr
.3+|Variable |variableName 2+d|RegisterValuesWithoutPhases
  |variableAttributes |mutability d|ReadWrite
  |variableCharacteristics |dataType d|boolean
|Description 3+d|If this variable reports a value of _true_, then meter values of measurand `Energy.Active.Import.Register` will only report the total energy over all phases without reporting the individual phase values. +
  If this variable is absent or _false_, then the value for each phase is reported, possibly also with a total value (depending on the meter).
|===

[[reservation_related]]
=== Reservation related

==== `ReservationEnabled`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|ReservationCtrlr
.3+|Variable |variableName 2+d|Enabled
  |variableAttributes |mutability d|ReadWrite
  |variableCharacteristics |dataType d|boolean
|Description 3+d|Whether Reservation is enabled.
|===

==== `ReservationAvailable`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|ReservationCtrlr
.3+|Variable |variableName 2+d|Available
  |variableAttributes |mutability d|ReadOnly
  |variableCharacteristics |dataType d|boolean
|Description 3+d|Whether Reservation is supported.
|===

[[reservation_non_evse_specific]]
==== `ReservationNonEvseSpecific`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|ReservationCtrlr
.3+|Variable |variableName 2+d|NonEvseSpecific
  |variableAttributes |mutability d|ReadOnly
  |variableCharacteristics |dataType d|boolean
|Description 3+d|If this configuration variable is present and set to _true_: Charging Station supports Reservation where EVSE id is not specified.
|===

[[smart_charging_related]]
=== Smart Charging related

==== `SmartChargingEnabled`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|SmartChargingCtrlr
.3+|Variable |variableName 2+d|Enabled
  |variableAttributes |mutability d|ReadWrite
  |variableCharacteristics |dataType d|boolean
|Description 3+d|Whether Smart Charging is enabled.
|===

==== `SmartChargingAvailable`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|SmartChargingCtrlr
.3+|Variable |variableName 2+d|Available
  |variableAttributes |mutability d|ReadOnly
  |variableCharacteristics |dataType d|boolean
|Description 3+d|Whether Smart Charging is supported.
|===

[[ac_phase_switching_supported]]
==== `ACPhaseSwitchingSupported`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|SmartChargingCtrlr
.3+|Variable |variableName 2+d|ACPhaseSwitchingSupported
  |variableAttributes |mutability d|ReadOnly
  |variableCharacteristics |dataType d|boolean
|Description 3+d|This variable can be used to indicate an on-load/in-transaction capability. If defined and true, this EVSE supports the selection of which phase to use for 1 phase AC charging.
|===

==== `ChargingProfileMaxStackLevel`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
|Component |componentName 2+d|SmartChargingCtrlr
.3+|Variable |variableName 2+d|ProfileStackLevel
  |variableAttributes |mutability d|ReadOnly
  |variableCharacteristics |dataType d|integer
|Description 3+d|Maximum acceptable value for _stackLevel_ in a ChargingProfile. Since the lowest _stackLevel_ is 0, this means that if SmartChargingCtrlr.ProfileStackLevel = 1, there can be at most 2 valid charging profiles per <<charging_profile_purpose,Charging Profile Purpose>> per EVSE.
|===

==== `ChargingScheduleChargingRateUnit`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
|Component |componentName 2+d|SmartChargingCtrlr
.3+|Variable |variableName 2+d|RateUnit
  |variableAttributes |mutability d|ReadOnly
  |variableCharacteristics |dataType d|MemberList
|Description 3+d|A list of supported quantities for use in a <<charging_schedule_type,ChargingSchedule>>. +
  Allowed values: 'A' and 'W'
|===

==== `PeriodsPerSchedule`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
|Component |componentName 2+d|SmartChargingCtrlr
.3+|Variable |variableName 2+d|PeriodsPerSchedule
  |variableAttributes |mutability d|ReadOnly
  |variableCharacteristics |dataType d|integer
|Description 3+d|Maximum number of periods that may be defined per <<charging_schedule_type,ChargingSchedule>>.
|===

==== `ExternalControlSignalsEnabled`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|SmartChargingCtrlr
.3+|Variable |variableName 2+d|ExternalControlSignalsEnabled
  |variableAttributes |mutability d|ReadOnly or ReadWrite. Choice is up to Charging Station implementation.
  |variableCharacteristics |dataType d|boolean
|Description 3+d|Indicates whether a Charging Station should respond to external control signals that influence charging.
|===

[[notify_charging_limit_with_schedule]]
==== `NotifyChargingLimitWithSchedules`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|SmartChargingCtrlr
.3+|Variable |variableName 2+d|NotifyChargingLimitWithSchedules
  |variableAttributes |mutability d|ReadWrite
  |variableCharacteristics |dataType d|boolean
|Description 3+d|Indicates if the Charging Station should include the externally set charging limit/schedule in the message when it sends a <<notify_charging_limit_request,NotifyChargingLimitRequest>> message. This might increase the data usage significantly, especially when an external system sends new profiles/limits with a short interval. Default is false when omitted.
|===

[[phases_3_to_1]]
==== Phases3to1

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|SmartChargingCtrlr
.3+|Variable |variableName 2+d|Phases3to1
  |variableAttributes |mutability d|ReadOnly
  |variableCharacteristics |dataType d|boolean
|Description 3+d|If defined and true, this Charging Station supports switching from 3 to 1 phase during a transaction.
|===

[[charging_profile_entries]]
==== `ChargingProfileEntries`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
|Component |componentName 2+d|SmartChargingCtrlr
.5+|Variable |variableName 2+d|Entries
  |variableInstance 2+d|ChargingProfiles
  |variableAttributes |mutability d|ReadOnly
  .2+|variableCharacteristics |dataType d|integer
    |maxLimit d|Maximum number of Charging profiles installed at any time.
|Description 3+d|Amount of Charging profiles currently installed on the Charging Station.
|===

[[limit_change_significance]]
==== `LimitChangeSignificance`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
|Component |componentName 2+d|SmartChargingCtrlr
.3+|Variable |variableName 2+d|LimitChangeSignificance
  |variableAttributes |mutability d|ReadWrite
  |variableCharacteristics |dataType d|decimal
|Description 3+d|If at the Charging Station side a change in the limit in a ChargingProfile is lower than this percentage, the Charging Station MAY skip sending a <<notify_charging_limit_request,NotifyChargingLimitRequest>> or a <<transaction_event_request,TransactionEventRequest>> message to the CSMS. It is RECOMMENDED to set this key to a low value. See <<smart_charging_signals_to_a_charging_station_from_multiple_actors,Smart Charging signals to a Charging Station from multiple actors>>.
|===

[[tariff_cost_related]]
=== Tariff & Cost related

==== `TariffEnabled`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|TariffCostCtrlr
.4+|Variable |variableName 2+d|Enabled
  |variableInstance 2+d|Tariff
  |variableAttributes |mutability d|ReadWrite
  |variableCharacteristics |dataType d|boolean
|Description 3+d|Whether Tariff is enabled.
|===

==== `TariffAvailable`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|TariffCostCtrlr
.4+|Variable |variableName 2+d|Available
  |variableInstance 2+d|Tariff
  |variableAttributes |mutability d|ReadOnly
  |variableCharacteristics |dataType d|boolean
|Description 3+d|Whether Tariff is supported.
|===

[[tariff_fallback_message]]
==== `TariffFallbackMessage`

Required for Charging Stations supporting Tariff Information.

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
|Component |componentName 2+d|TariffCostCtrlr
.4+|Variable |variableName 2+d|TariffFallbackMessage
  |variableAttributes |mutability d|ReadWrite
  .2+|variableCharacteristics |dataType d|string
    |maxLimit d|255
|Description 3+d|Message (and/or tariff information) to be shown to an EV Driver when there is no driver specific tariff information available.
|===

==== `CostEnabled`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|TariffCostCtrlr
.4+|Variable |variableName 2+d|Enabled
  |variableInstance 2+d|Cost
  |variableAttributes |mutability d|ReadWrite
  |variableCharacteristics |dataType d|boolean
|Description 3+d|Whether Cost is enabled.
|===

==== `CostAvailable`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|TariffCostCtrlr
.4+|Variable |variableName 2+d|Available
  |variableInstance 2+d|Cost
  |variableAttributes |mutability d|ReadOnly
  |variableCharacteristics |dataType d|boolean
|Description 3+d|Whether Cost is supported.
|===

[[total_cost_fallback_message]]
==== `TotalCostFallbackMessage`

Required for Charging Stations supporting Tariff Information.

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
|Component |componentName 2+d|TariffCostCtrlr
.4+|Variable |variableName 2+d|TotalCostFallbackMessage
  |variableAttributes |mutability d|ReadWrite
  .2+|variableCharacteristics |dataType d|string
    |maxLimit d|255
|Description 3+d|Message to be shown to an EV Driver when the Charging Station cannot retrieve the cost for a transaction at the end of the transaction.
|===

[[currency]]
==== `Currency`

Required for Charging Stations supporting Tariff Information.

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
|Component |componentName 2+d|TariffCostCtrlr
.4+|Variable |variableName 2+d|Currency
  |variableAttributes |mutability d|ReadWrite
  .2+|variableCharacteristics |dataType d|string
    |maxLimit d|3
|Description 3+d|Currency used by this Charging Station in a ISO 4217 <<iso4217,[ISO4217]>> formatted currency code.
|===

[[diagnostics_related]]
=== Diagnostics related

==== `MonitoringEnabled`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|MonitoringCtrlr
.3+|Variable |variableName 2+d|Enabled
  |variableAttributes |mutability d|ReadWrite
  |variableCharacteristics |dataType d|boolean
|Description 3+d|Whether Monitoring is enabled.
|===

==== `MonitoringAvailable`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|MonitoringCtrlr
.3+|Variable |variableName 2+d|Available
  |variableAttributes |mutability d|ReadOnly
  |variableCharacteristics |dataType d|boolean
|Description 3+d|Whether Monitoring is supported.
|===

[[items_per_message_clear_variable_monitoring]]
==== `ItemsPerMessageClearVariableMonitoring`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|MonitoringCtrlr
.4+|Variable |variableName 2+d|ItemsPerMessage
  |variableInstance 2+d|ClearVariableMonitoring
  |variableAttributes |mutability d|ReadOnly
  |variableCharacteristics |dataType d|integer
|Description 3+d|Maximum number of IDs in a <<clear_variable_monitoring_request,ClearVariableMonitoringRequest>>.
|===

[[items_per_message_set_variable_monitoring]]
==== `ItemsPerMessageSetVariableMonitoring`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
|Component |componentName 2+d|MonitoringCtrlr
.4+|Variable |variableName 2+d|ItemsPerMessage
  |variableInstance 2+d|SetVariableMonitoring
  |variableAttributes |mutability d|ReadOnly
  |variableCharacteristics |dataType d|integer
|Description 3+d|Maximum number of <<set_monitoring_data_type,SetMonitoringData>> elements that can be sent in one <<set_variable_monitoring_request,SetVariableMonitoringRequest>> message.
|===

[[bytes_per_message_clear_variable_monitoring]]
==== `BytesPerMessageClearVariableMonitoring`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|MonitoringCtrlr
.4+|Variable |variableName 2+d|BytesPerMessage
  |variableInstance 2+d|ClearVariableMonitoring
  |variableAttributes |mutability d|ReadOnly
  |variableCharacteristics |dataType d|integer
|Description 3+d|Message Size (in bytes) - puts constraint on <<clear_variable_monitoring_request,ClearVariableMonitoringRequest>> message size.
|===

[[bytes_per_message_set_variable_monitoring]]
==== `BytesPerMessageSetVariableMonitoring`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
|Component |componentName 2+d|MonitoringCtrlr
.4+|Variable |variableName 2+d|BytesPerMessage
  |variableInstance 2+d|SetVariableMonitoring
  |variableAttributes |mutability d|ReadOnly
  |variableCharacteristics |dataType d|integer
|Description 3+d|Message Size (in bytes) - puts constraint on <<set_variable_monitoring_request,SetVariableMonitoringRequest>> message size.
|===

[[offline_monitoring_event_queuing_severity]]
==== `OfflineMonitoringEventQueuingSeverity`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|MonitoringCtrlr
.3+|Variable |variableName 2+d|OfflineQueuingSeverity
  |variableAttributes |mutability d|ReadWrite
  |variableCharacteristics |dataType d|integer
|Description 3+d|When set and the Charging Station is offline , the Charging Station shall queue any <<notify_event_request,NotifyEventRequest>> messages triggered by a monitor with a severity number equal to or lower than the severity configured here. Value ranging from 0 (Emergency) to 9 (Debug).
|===

==== `ActiveMonitoringBase`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|MonitoringCtrlr
.3+|Variable |variableName 2+d|ActiveMonitoringBase
  |variableAttributes |mutability d|ReadOnly
  |variableCharacteristics |dataType d|OptionList
|Description 3+d|Shows the currently used MonitoringBase. Valid values according MonitoringBaseEnumType: `All`, `FactoryDefault`, `HardwiredOnly`.
|===

==== `ActiveMonitoringLevel`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|MonitoringCtrlr
.3+|Variable |variableName 2+d|ActiveMonitoringLevel
  |variableAttributes |mutability d|ReadOnly
  |variableCharacteristics |dataType d|integer
|Description 3+d|Shows the currently used MonitoringLevel. Valid values are severity levels of SetMonitoringLevelRequest: 0-9.
|===

[[display_message_related]]
=== Display Message related

==== `DisplayMessageEnabled`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|DisplayMessageCtrlr
.3+|Variable |variableName 2+d|Enabled
  |variableAttributes |mutability d|ReadWrite
  |variableCharacteristics |dataType d|boolean
|Description 3+d|Whether Display Message is enabled.
|===

==== `DisplayMessageAvailable`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|DisplayMessageCtrlr
.3+|Variable |variableName 2+d|Available
  |variableAttributes |mutability d|ReadOnly
  |variableCharacteristics |dataType d|boolean
|Description 3+d|Whether Display Message is supported.
|===

[[number_of_display_messages]]
==== `NumberOfDisplayMessages`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
|Component |componentName 2+d|DisplayMessageCtrlr
.4+|Variable |variableName 2+d|DisplayMessages
  |variableAttributes |mutability d|ReadOnly
  .2+|variableCharacteristics |dataType d|integer
    |maxLimit d|Maximum number of different messages that can configured in this Charging Station simultaneous, via <<set_display_message_request,SetDisplayMessageRequest>>.
|Description 3+d|Amount of different messages that are currently configured in this Charging Station, via <<set_display_message_request,SetDisplayMessageRequest>>
|===

[[display_message_supported_formats]]
==== `DisplayMessageSupportedFormats`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
|Component |componentName 2+d|DisplayMessageCtrlr
.3+|Variable |variableName 2+d|SupportedFormats
  |variableAttributes |mutability d|ReadOnly
  |variableCharacteristics |dataType d|MemberList
|Description 3+d|List of message formats supported by this Charging Station. Possible values: <<message_format_enum_type,MessageFormat>>.
|===

[[display_message_supported_priorities]]
==== `DisplayMessageSupportedPriorities`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
|Component |componentName 2+d|DisplayMessageCtrlr
.3+|Variable |variableName 2+d|SupportedPriorities
  |variableAttributes |mutability d|ReadOnly
  |variableCharacteristics |dataType d|MemberList
|Description 3+d|List of the priorities supported by this Charging Station. Possible values: <<message_priority_enum_type,MessagePriority>>.
|===

[[charging_infrastructure_related]]
=== Charging Infrastructure related

[[available]]
==== `Available`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
.4+|Components .3+|componentName 2+d|ChargingStation
    2+d|EVSE
    2+d|Connector
  |evse 2+d|* (_for EVSE and Connector_)
.3+|Variable |variableName 2+d|Available
  |variableAttributes |mutability d|ReadOnly
  |variableCharacteristics |dataType d|boolean
|Description 3+d|When _true_ the Component exists and is locally configured/wired for use, but may not be (remotely) Enabled. This variable is required on any Component that can be reported by the Charging Station. As a minimum it shall exist on ChargingStation, EVSE and Connector.
|Note 3+d|If any other variables are reported for a Component, then reporting _Available_ does not add much value and may be omitted. However, the variable needs to exist, because it can be queried for by a GetCustomReport request for all Components that are 'available'.

  EVSE and Connector components are addressed on their respective tier. So, EVSE #1 is addressed as component EVSE on tier _evse_ = 1 and connector #1 on this EVSE is addressed as component Connector on tier _evse_ = 1, _connector_ = 1.
|===

==== `AvailabilityState`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
.3+|Components .2+|componentName 2+d|ChargingStation
    2+d|EVSE
  |evse 2+d|* (_for EVSE_)
.4+|Variable |variableName 2+d|AvailabilityState
  |variableAttributes |mutability d|ReadOnly
  .2+|variableCharacteristics |dataType d|optionList
    |valuesList d|Available, Occupied, Reserved, Unavailable, Faulted
|Description 3+d|This variable reports current availability state for the ChargingStation and EVSE. If a Connector has its own availability state independent of the EVSE, then this variable may be used to report the Connector’s availability state. As such it replicates ConnectorStatus values reported in StatusNotification messages.

  An EVSE component is addressed on its own tier. So, EVSE #1 is addressed as component EVSE on tier _evse_ = 1.
|===

[[allow_reset]]
==== `AllowReset`
[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
.2+|Component |componentName 2+d|EVSE
  |evse 2+d|*
.3+|Variable |variableName 2+d|AllowReset
  |variableAttributes |mutability d|ReadOnly
  |variableCharacteristics |dataType d|boolean
|Description 3+d|Component can be reset. Can be used to announce that an EVSE can be reset individually.
|===

==== `ConnectorType`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
.2+|Component |componentName 2+d|Connector
    |evse 2+d|*
.3+|Variable |variableName 2+d|ConnectorType
  |variableAttributes |mutability d|ReadOnly
  |variableCharacteristics |dataType d|string
|Description 3+d|Value of the type of connector as defined by ConnectorEnumType in "Part 2 - Specification" plus additionally: `cGBT`, `cChaoJi`, `OppCharge`.
|===

[[phase_rotation]]
==== `PhaseRotation`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
.2+|Component |componentName 2+d|*
    |evse 2+d|*
.3+|Variable |variableName 2+d|PhaseRotation
  |variableAttributes |mutability d|ReadOnly or ReadWrite.
  |variableCharacteristics |dataType d|String
|Description 3+d|This variable describes the phase rotation of a Component relative to its parent Component, using a three letter string consisting of the letters: R, S, T and x.

  {nbsp}

  The letter 'R' can be identified as phase 1 (L1), 'S' as phase 2 (L2), 'T' as phase 3 (L3). +
  The lower case 'x' is used to designate a phase that is not connected. +
  An empty string means that phase rotation is not applicable or not known.

  {nbsp}

  Certain measurands, like voltage and current, are reported with a phase relative to the grid connection. In order to support this, all components in the chain from Connector to ElectricalFeed need to have a value for PhaseRotation.

  {nbsp}

  Some examples: +
  "" (unknown) +
  "RST" (Standard Reference Phasing) +
  "RTS" (Reversed Reference Phasing) +
  "SRT" (Reversed 240 degree rotation) +
  "STR" (Standard 120 degree rotation) +
  "TRS" (Standard 240 degree rotation) +
  "TSR" (Reversed 120 degree rotation) +
  "RSx" (Two phases connected) +
  "Rxx" (One phase connected)
|===

==== `SupplyPhases`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
.4+|Components .3+|componentName 2+d|ChargingStation
    2+d|EVSE
    2+d|Connector
  |evse 2+d|* (_for EVSE and Connector_)
.3+|Variable |variableName 2+d|SupplyPhases
  |variableAttributes |mutability d|ReadOnly
  |variableCharacteristics |dataType d|integer
|Description 3+d|Number of alternating current phases connected/available. 1 or 3 for AC, 0 means DC (no alternating phases). Null value indicates that the number of phases (e.g. in use) is unknown.
|===

==== `Power`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes (_maxLimit only_)
.2+|Component |componentName 2+d|EVSE
  |evse 2+d|*
.4+|Variable |variableName 2+d|Power
  |variableAttributes |mutability d|ReadOnly
  .2+|variableCharacteristics |dataType d|decimal
    |maxLimit d|decimal
|Description 3+d|The variableCharacteristic _maxLimit_, that holds the maximum power that this EVSE can provide, is required. The _Actual_ value of the instantaneous (real) power is desired, but not required.
|===

==== Example Reporting of EVSEs and Connectors via device model

The following example illustrates how the device model reports EVSEs and Connectors for an example charging station that has two EVSEs, of which EVSE #1 has one Type2 connector and EVSE #2 has two connectors: CCS and CHAdeMO.

[cols="<.^3,<.^1,<.^1,<.^2,<.^3,<.^2,<.^2,<.^3,<.^2,<.^2,<.^2",%autowidth.stretch,options="header",frame=all,grid=all]
|===
4+|Component 2+|Variable 2+|VariableAttribute 3+|VariableCharacteristics

s|name s|evse id s|evse connectorId s|instance s|name s|instance s|type s|value s|dataType s|maxLimit s|supportsMonitoring

|ChargingStation |{nbsp} |{nbsp} |{nbsp} |Available |{nbsp} |Actual |true |boolean |{nbsp} |false
|ChargingStation |{nbsp} |{nbsp} |{nbsp} |AvailabilityState |{nbsp} |Actual |Available |boolean |{nbsp} |false
|ChargingStation |{nbsp} |{nbsp} |{nbsp} |SupplyPhases |{nbsp} |Actual |integer |3 |{nbsp} |false
|ChargingStation |{nbsp} |{nbsp} |{nbsp} |ACCurrent |"L1" |Actual |decimal |45.0 |{nbsp} |true
|ChargingStation |{nbsp} |{nbsp} |{nbsp} |ACCurrent |"L2" |Actual |decimal |44.9 |{nbsp} |true
|ChargingStation |{nbsp} |{nbsp} |{nbsp} |ACCurrent |"L3" |Actual |decimal |44.9 |{nbsp} |true
|EVSE |1 |{nbsp} |"left" |Available |{nbsp} |Actual |true |boolean |{nbsp} |false
|EVSE |1 |{nbsp} |"left" |AvailabilityState |{nbsp} |Actual |Available |optionList |{nbsp} |false
|EVSE |1 |{nbsp} |"left" |SupplyPhases |{nbsp} |Actual |3 |integer |{nbsp} |false
|EVSE |1 |{nbsp} |"left" |Power |{nbsp} |Actual |0.0 |decimal |22000.0 |true
|Connector |1 |1 |{nbsp} |Available |{nbsp} |Actual |true |boolean |{nbsp} |false
|Connector |1 |1 |{nbsp} |ConnectorType |{nbsp} |Actual |sType2 |string |{nbsp} |false
|Connector |1 |1 |{nbsp} |SupplyPhases |{nbsp} |Actual |3 |integer |{nbsp} |false
|EVSE |2 |{nbsp} |"right" |Available |{nbsp} |Actual |true |boolean |{nbsp} |false
|EVSE |2 |{nbsp} |"right" |AvailabilityState |{nbsp} |Actual |Occupied |optionList |{nbsp} |false
|EVSE |2 |{nbsp} |"right" |SupplyPhases |{nbsp} |Actual |0 |integer |{nbsp} |false
|EVSE |2 |{nbsp} |"right" |Power |{nbsp} |Actual |41000.0 |decimal |50000.0 |true
|Connector |2 |1 |{nbsp} |Available |{nbsp} |Actual |true |boolean |{nbsp} |false
|Connector |2 |1 |{nbsp} |AvailabilityState |{nbsp} |Actual |Occupied |optionList |{nbsp} |false
|Connector |2 |1 |{nbsp} |ConnectorType |{nbsp} |Actual |cCCS2 |string |{nbsp} |false
|Connector |2 |1 |{nbsp} |SupplyPhases |{nbsp} |Actual |0 |integer |{nbsp} |false
|Connector |2 |2 |{nbsp} |Available |{nbsp} |Actual |true |boolean |{nbsp} |false
|Connector |2 |2 |{nbsp} |AvailabilityState |{nbsp} |Actual |Unavailable |optionList |{nbsp} |false
|Connector |2 |2 |{nbsp} |ConnectorType |{nbsp} |Actual |cG105 |string |{nbsp} |false
|Connector |2 |2 |{nbsp} |SupplyPhases |{nbsp} |Actual |0 |integer |{nbsp} |false
|===

[cols="^.^1s,10",%autowidth.stretch]
|===
|NOTE |An instance name has been given to the EVSEs in this example. This is to illustrate that it is allowed to provide an instance name even if only one instance of the component exists. It is not required to do so. +
  The variable Voltage of ChargingStation has been added to show an example of a multi-instance variable. +
  Not all VariableAttributes and VariableCharacteristics are shown in the table.
|===

=== ISO 15118 Related

[[central_contract_validation_allowed]]
==== `CentralContractValidationAllowed`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|ISO15118Ctrlr
.3+|Variable |variableName 2+d|CentralContractValidationAllowed
  |variableAttributes |mutability d|ReadWrite
  |variableCharacteristics |dataType d|boolean
|Description 3+d|If this variable exists and has the value _true_, then Charging Station can provide a contract certificate that it cannot validate, to the CSMS for validation as part of the AuthorizeRequest.
|===

[[contract_validation_offline]]
==== `ContractValidationOffline`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|yes
|Component |componentName 2+d|ISO15118Ctrlr
.3+|Variable |variableName 2+d|ContractValidationOffline
  |variableAttributes |mutability d|ReadWrite
  |variableCharacteristics |dataType d|boolean
|Description 3+d|If this variable is _true_, then Charging Station will try to validate a contract certificate when it is offline.
|===

==== `ProtocolSupportedByEV`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
.2+|Component |componentName 2+d|ConnectedEV
  |evse 2+d|*
.4+|Variable |variableName 2+d|ProtocolSupportedByEV
  |variableInstance 2+d|<Priority>
  |variableAttributes |mutability d|ReadOnly
  |variableCharacteristics |dataType d|string
|Description 3+d|A string with the following comma-separated items: +
  "<uri>,<major>,<minor>". +
  This is information from the SupportedAppProtocolReq message from ISO 15118 +
  Each priority is given its own variable instance. Priority is a number from 1 to 20 as a string. E.g. "1" or "2". +
  Example: +
  - ConnectedEV.ProtocolSupportedByEV["1"]  "urn:iso:15118:2:2013:MsgDef,2,0" +
  - ConnectedEV.ProtocolSupportedByEV["2"]  "urn:iso:15118:2:2010:MsgDef,1,0"
|===

==== `ProtocolAgreed`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
.2+|Component |componentName 2+d|ConnectedEV
  |evse 2+d|*
.3+|Variable |variableName 2+d|ProtocolAgreed
  |variableAttributes |mutability d|ReadOnly
  |variableCharacteristics |dataType d|string
|Description 3+d|A string with the following comma-separated items: +
  "<uri>,<major>,<minor>". +
  This is the protocol uri and version information that was agreed upon between EV and EVSE in the supportedAppProtocolReq handshake from ISO 15118. +
  Example: "urn:iso:15118:2:2013:MsgDef,2,0"
|===

[[iso15118_pnc_enabled]]
==== `ISO15118PnCEnabled`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|ISO15118Ctrlr
.3+|Variable |variableName 2+d|PnCEnabled
  |variableAttributes |mutability d|ReadWrite
  |variableCharacteristics |dataType d|boolean
|Description 3+d|If this variable is _true_, then ISO 15118 plug and charge as described by use case <<authorization_using_contract_certificates,C07 - Authorization using Contract Certificates>> is enabled. +
  If this variable is _false_, then ISO 15118 plug and charge as described by use case <<authorization_using_contract_certificates,C07 - Authorization using Contract Certificates>> is disabled.
|===

==== `ISO15118V2GCertificateInstallationEnabled`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|ISO15118Ctrlr
.3+|Variable |variableName 2+d|V2GCertificateInstallationEnabled
  |variableAttributes |mutability d|ReadWrite
  |variableCharacteristics |dataType d|boolean
|Description 3+d|If this variable is _true_, then ISO 15118 V2G Charging Station certificate installation as described by use case <<update_charging_station_certificate_by_request_of_csms,A02 - Update Charging Station Certificate by request of CSMS>> and <<update_charging_station_certificate_initiated_by_the_charging_station,A03 - Update Charging Station Certificate initiated by the Charging Station>> is enabled. +
  If this variable is _false_, then ISO 15118 V2G Charging Station certificate installation as described by use case <<update_charging_station_certificate_by_request_of_csms,A02 - Update Charging Station Certificate by request of CSMS>> and <<update_charging_station_certificate_initiated_by_the_charging_station,A03 - Update Charging Station Certificate initiated by the Charging Station>> is disabled.
|===

==== `ISO15118ContractCertificateInstallationEnabled`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|ISO15118Ctrlr
.3+|Variable |variableName 2+d|ContractCertificateInstallationEnabled
  |variableAttributes |mutability d|ReadWrite
  |variableCharacteristics |dataType d|boolean
|Description 3+d|If this variable is _true_, then ISO 15118 contract certificate installation/update as described by use case <<m01_certificate_installation_ev,M01 - Certificate installation EV>> and <<m02_certificate_update_ev,M02 - Certificate Update EV is enabled>>. +
  If this variable is _false_, then ISO 15118 contract certificate installation/update as described by use case <<m01_certificate_installation_ev,M01 - Certificate installation EV>> and <<m02_certificate_update_ev,M02 - Certificate Update EV is disabled>>.
|===

==== `ISO15118RequestMeteringReceipt`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|ISO15118Ctrlr
.3+|Variable |variableName 2+d|RequestMeteringReceipt
  |variableAttributes |mutability d|ReadWrite
  |variableCharacteristics |dataType d|boolean
|Description 3+d|If this variable is _true_, then Charging Station shall request a metering receipt from EV before sending a fiscal meter value to CSMS.
|===

==== `ISO15118SeccId`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
.2+|Component |componentName 2+d|ISO15118Ctrlr
  |evse 2+d|* (optional)
.3+|Variable |variableName 2+d|SeccId
  |variableAttributes |mutability d|ReadWrite
  |variableCharacteristics |dataType d|string
|Description 3+d|The name of the SECC in the string format as required by ISO 15118. +
  It is used as the *commonName* (CN) of the SECC leaf certificate. +
  Example: "DE-ICE-S-0003C4D5578786756453309675436-2"
|===

==== `ISO15118CountryName`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|ISO15118Ctrlr
evse * (optional)
.3+|Variable |variableName 2+d|CountryName
  |variableAttributes |mutability d|ReadWrite
  |variableCharacteristics |dataType d|string
|Description 3+d|The countryName of the SECC in the ISO 3166-1 format. +
  It is used as the *countryName* (C) of the SECC leaf certificate. +
  Example: "DE"
|===

==== `ISO15118OrganizationName`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
|Component |componentName 2+d|ISO15118Ctrlr
evse * (optional)
.3+|Variable |variableName 2+d|OrganizationName
  |variableAttributes |mutability d|ReadWrite
  |variableCharacteristics |dataType d|string
|Description 3+d|The organizationName of the CSO operating the charging station. +
  It is used as the *organizationName* (O) of the SECC leaf certificate. +
  Example: "John Doe Charging Services Ltd" +
  Note: This value will usually be identical to SecurityCtrlr.OrganizationName, but it does not have to be.
|===

==== `ISO15118EvseId`

[cols="<.^2s,<.^3s,<.^3s,<.^5",%autowidth.stretch,frame=all,grid=all]
|===
|Required 3+d|no
.2+|Component |componentName 2+d|EVSE
  |evse 2+d|*
.3+|Variable |variableName 2+d|ISO15118EvseId
  |variableAttributes |mutability d|ReadWrite
  |variableCharacteristics |dataType d|string
|Description 3+d|The name of the EVSE in the string format as required by ISO 15118 and IEC 63119-2. +
  Example: "DE*ICE*E*1234567890*1"
|===
