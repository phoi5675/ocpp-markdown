= OCPP 2.0.1
:doctype: book
:toc: 
:toclevels: 2
:toc-title: Table of Contents
:icons: font
:icon-set: far

[discrete]
== Part 1 - Architecture & Topology

Edition 3 FINAL, 2024-05-06

<<<

[discrete]
== Disclaimer

Copyright © 2010 - 2024 Open Charge Alliance. All rights reserved.

This document is made available under the _*Creative Commons Attribution-NoDerivatives 4.0 International Public License*_ +
(https://creativecommons.org/licenses/by-nd/4.0/legalcode).

<<<

[discrete]
== Version History

[%autowidth.stretch,options="header,autowidth"]
|===
|Version |Date |Description

|2.0.1 Edition 3 |2024-05-06 |OCPP 2.0.1 Edition 3. All errata from OCPP 2.0.1 Part 1 until and including Errata 2024-04 have been merged into this version of the specification.
|2.0.1 |2020-03-31 |Final version of OCPP 2.0.1
|2.0   |2018-04-11 |OCPP 2.0 April 2018 +
                    First release of this Architecture & Topology document
|===

== Introduction

=== Goal of this document

The goal of this document is to describe a number of architecture related topics for OCPP 2.0.1.

OCPP was originally intended for two way communication between a backoffice, in OCPP the _Charging Station Management System_ (in this document: CSMS) and a Charging Station. The protocol has become more advanced and with every new revision new functionalities and options are added. It has evolved into a protocol that can be used in different architectures for different types of Charging Stations.

This document describes, in addition to the original "simple" setup CSMS <> Charging Station, a number of topologies as an additional explanation for using OCPP. Furthermore, the Device Management concept to configure and monitor any type of Charging Station, the OCPP Information Model and the 3-tier model are explained.

This document is partially **informative** and partially **normative** and is not intended to limit the use of OCPP. However, it does add an explanation what kind of use of OCPP the creators of OCPP had in mind when creating this version of the specification. This document is therefore also intended to support the reader of the protocol specification in Part 2 of OCPP to understand how it can be used.

=== Terms and abbreviations

This section contains the terminology and abbreviations that are used throughout this document.

==== Terms

[%autowidth.stretch,options="header,autowidth"]
|===
|Term       |Meaning
^s|Charging Station |The Charging Station is the physical system where EVs can be charged. A Charging Station has one or more EVSEs.
^s|Connector |The term Connector, as used in this specification, refers to an independently operated and managed electrical outlet on a Charging Station. In other words, this corresponds to a single physical Connector. In some cases an EVSE may have multiple physical socket types and/or tethered cable/Connector arrangements(i.e. Connectors) to facilitate different vehicle types (e.g. four-wheeled EVs and electric scooters).
^s|EVSE |An EVSE is considered as an independently operated and managed part of the Charging Station that can deliver energy to one EV at a time.
^s|Local port Smart Meter |The Local port on a Smart Meter is a port (for example serial) on a digital electricity meter that provides access to information about meter readings and usage.
|===

==== Abbreviations

[%autowidth.stretch,options="header,autowidth"]
|===
|Abbreviation     |Meaning

^|DSO     |Distribution System Operator
^|CSO     |Charging Station Operator
^|CSMS    |Charging Station Management System
^|EMS     |Energy Management System. In this document this is defined as a device that manages the local loads (consumption an production) based on local and/or contractual constraints and/or contractual incentives. It has additional inputs, such as sensors and controls from e.g. PV, battery storage.
^|EVSE    |Electric Vehicle Supply Equipment
^|LC      |Local Controller. In this document this is defined as a device that can send messages to its Charging Stations, independently of the CSMS. A typical usage for this is the local smart charging case described in the Smart Charging chapter of Part 2 of OCPP, where a Local Controller can impose charge limits on its Charging Stations.
^|LP      |Local Proxy. Acts as a message router.
|===

== 3-tier model

_This section is informative._

To understand the terminology in the OCPP specification, it is important to understand the starting point of this specification. The OCPP specification uses the term Charging Station as the physical system where EVs can be charged. A Charging Station can have one or more EVSEs (Electric Vehicle Supply Equipment). An EVSE is considered as a part of the Charging Station that can deliver energy to one EV at a time. The term Connector, as used in this specification, refers to an independently operated and managed electrical outlet on a Charging Station, in other words, this corresponds to a single physical Connector. In some cases an EVSE may have multiple physical socket types and/or tethered cable/connector arrangements to facilitate different vehicle types (e.g. four- wheeled EVs and electric scooters). This setup is referred to as the 3-tier model and visualized in the figure below.

.3-tier model as used in OCPP
image::part1/images/figure_1.svg[3-tier model as used in OCPP]

[cols="^.^1s,10",%autowidth.stretch]
|===
|NOTE |This section describes the charging infrastructure on a logical level for communication purposes. We do not wish to impose a mapping onto physical hardware. This is a manufacturer’s choice. For example, the EVSE might be integrated into a Charging Station and to look as just a part of that device, but it might just as well have its own casing and live outside of the physical entity Charging Station, for example a charging plaza with 20 EVSEs and Connectors which communicates via 1 modem as 1 Charging Station to the CSMS is seen by OCPP as 1 Charging Station.
|===

<<<

== Information Model

_This section is informative._

Given the growing complexity of the messages of OCPP, OCPP 2.0.1 is based on an _Information Model_ as a blueprint for the messages and inherent schemas of OCPP. With an information model, we mean a logical object set, describing real objects with all their properties. This provides an informative representation of information structure in the protocol. Furthermore, it enables making objects within OCPP reusable and enables consistent definition of messages and automatically generated message schemas (Part 3).

The Information Model is a model, also called Domain Model or Core Model, based on which the OCPP messages and datatypes are generated. These datatypes are extracted from the the OCPP 1.6 specification and are named Core DataTypes and Qualified DataTypes. The figure below illustrates how the DataTypes in the information model are built up.

In part 2 - Specification, chapter Datatypes, some DataTypes have the Common: prefix. This originates from the Information Model. It means that the DataType is able to be shared among other DataTypes and Messages. This has no impact on the OCPP implementation of a device.

.Example datatypes
image::part1/images/figure_2.svg[Example datatypes]

The Information Model is divided into a number of "functions" to have a better overview of the model (thus for readability):

- Transactions
- SmartCharging
- Metering
- Security (Profiles/Authorization)
- Communication
- SecondaryActorSchedule

For more details about the actual model per function, please refer to the appendix.

<<<

[[device_model]]
== Device Model: Addressing Components and Variables.

The Device Model refers to a generalized mechanism within OCPP to enable any model of Charging Station to report how it is build up, so it can be managed from any CSMS. To manage a Charging Station with the Device Model (i.e. "to manage a device") a number of messages and use cases is defined to configure and monitor a Charging Station in detail, without defining the structure of the Charging Station in advance. To be able do do this, OCPP provides a generalized mechanism to allow the exchange of a wide range of information about Charging Station. This version of the Device Model has the 3-tier model (Charging Station, EVSE, Connector) as its starting point, which means that any description created with the Device Model follows these three tiers. The remainder of this chapter describes how the data (and associated meta-data) looks like that can be exchanged between a Charging Station and a CSMS. The use cases and messages that are used to manage a device are _not_ described here, but in Part 2 of the specification. This chapter only focuses on the data model.

=== Components

In OCPP 2.0.1, a Charging Station is modelled as a set of _"Components"_ , typically representing physical devices (including any external equipment to which it is connected for data gathering and/or control), logical functionality, or logical data entities. _Components_ of different types are primarily identified by a ComponentName, that is either the name of a _standardized_ component (see OCPP part 2c), or a custom/non-standardized component name, for new, pre-standardized equipment, vendor specific extensions, etc.

_ChargingStation_ (TopLevel), _EVSE_ , and _Connector_ represent the three major "tiers" of a Charging Station, and constitute an implicit "location-based" addressing scheme that is widely used in many OCPP data structures. Each "tier" has a component of the same name, which represents the tier. For example, EVSE 1 on a Charging Station is represented by the component named "EVSE" (no instance name) with " _evseId_ = 1". In the same manner, Connector 1 on EVSE 1 is represented by the component named "Connector" (no instance name) with " _evseId_ = 1, _connectorId_ = 1".

By default, all _components_ are located at the _ChargingStation_ tier, but individual instances of any component can be associated with a specific _EVSE_ , or a specific _Connector_ (on a specific EVSE) by including EVSE or EVSE and Connector identification numbers as part of a component addressing reference.

Additionally, there can be more than one instance of a component (in the functional dimension), representing multi-occurrence physical or logical components (e.g. power converter modules, fan banks, resident firmware images, etc.).

Each distinct _component_ instance is uniquely identified by an (optional) _componentInstance_ addressing key. When no _componentInstance_ is provided, then the default or only instance of a _component_ is referenced.

_Components_ do not in themselves hold data: all externally accessible data associated with each component instance is represented by a set of _variables_ that can be read, set, and/or monitored for changes. The relationship of a Component with one or more Variables is illustrated in below.

.Component and variables
image::part1/images/figure_3.svg[Component and variables]

The table below illustrates some common components (by their standardized component-names), and examples of the hierarchical location levels at which they typically occur for a basic home charger and a typical public Charging Station.

[%autowidth.stretch,cols="1,1,1",options="header",frame=all,grid=all]
|===
3.+<|Basic home charger example configuration

s|ChargingStation tier    s|EVSE tier    s|Connector tier
|ChargingStation (itself, as a whole) |EVSE (itself, as a whole) |Connector (itself, as a whole)
|RadioLink |ControlMetering |PlugRetentionLock
|TokenReader |OverCurrentBreaker |{nbsp}
|Controller   |RCD  |{nbsp}
|{nbsp}       |ChargingStatusIndicator  |{nbsp}
|===

[%autowidth.stretch,cols="1,1,1",options="header",frame=all,grid=all]
|===
3.+<|Public Charging Station example configuration

s|ChargingStation tier s|EVSE tier s|Connector tier
|ChargingStation (itself, as a whole) |EVSE (itself, as a whole) |Connector (itself, as a whole)
|ElectricalFeed |ElectricalFeed |AccessProtection
|TokenReader |TokenReader |PlugRetentionLock
|Display     |Display     |{nbsp}
|FiscalMetering |FiscalMetering  |{nbsp}
|Clock          |ControlMetering |{nbsp}
|Controller     |OverCurrentBreaker |{nbsp}
|{nbsp}         |RCD                |{nbsp}
|{nbsp}         |ChargingStatusIndicator  |{nbsp}
|===

=== Variables

Every _component_ has a number of _variables_ , that can, as appropriate, be used to hold, set, read, and/or report on all (externally visible) data applicable to that _component_ , including configuration parameters, measured values (e.g. a current or a temperature) and/or monitored changes to variable values.

Although many _components_ can have associated _variables_ that are, by their nature, specific to the component type (e.g. _ConnectorType_ for a _Connector_ component), there are a minimal set of standardized _variables_ that are used to provide standardized high level event notification and state/status reporting (e.g. _Problem_ , _Active_ ) on a global and/or selective basis, and also to report component presence, availability, etc. during the inventorying/discovery process (e.g. _Available_ , _Enabled_ ). A Charging Station is not required to report the base variables: _Present_ , _Available_ and _Enabled_ when they are readonly and set to _true_. When a Charging Station does not report: _Present_ , _Available_ and/or _Enabled_ the Central System SHALL assume them to be readonly and set to _true_ Variables can be any of a range of common general-purpose data types (boolean, integer, decimal, date-time, string), but also can have their allowable values constrained to particular ranges, enumeration lists, sets, or ordered lists.

To support complex components, there can be more than one instance of any given variable name associated with any components (e.g. power converter modules reporting temperature, current, or voltage at multiple points).

Each distinct _variable_ instance is uniquely identified by an (optional) _variableInstance_ addressing key string value. When no _variableInstance_ is provided, then the default or only instance of a _variable_ is referenced.

=== Characteristics and Attributes

Each _variable_ , in addition to its primary ( _"Actual"_ ) value, can have a set of associated secondary data that is linked to the same primary _variable_ name and _variableInstance_.

This greatly avoids cluttering the _variables_ namespace with confusing clusters of ancillary variable names (e.g. FanSpeed, FanSpeedUnits, MinimumFanSpeed, BaseFanSpeed) that lack consistence and discoverability.

The ancillary variable data includes:

* Variable characteristics meta-data (read-only)
** Unit of measure (V,W,kW,kWh, etc.)
** Data type (Integer, Decimal, String, Date, OptionList, etc.)
** Lower limit
** Upper limit
** List of allowed values for enumerated variables
* Variable attributes (read-write):
** Actual value
** Target value
** Configured lower limit
** Configured upper limit
** Mutability (whether the value can be altered or not, e.g. ReadOnly or ReadWrite)
** Persistence (whether the value is preserved in case of a reboot or power loss)

The relationship of a Variable with one or more VariableAttributes is illustrated in the figure below.

.Variable attributes and characteristics
image::part1/images/figure_4.svg[Variable attributes and characteristics]

There is a difference between how to implement (physical) devices and (virtual) controller components, using the DeviceModel. A (virtual) controller component has to be implementing as described in part 2 chapter the "Referenced Components and Variables".

These kind of components/variables are only using the variableAttribute type 'Actual'. Depending on if this variableAttribute is writable, the CSMS can use this to set a new value.

(Physical) devices are a bit more complex to implement. For example, there is a fan with a fan speed, that has a (physical) limit with a range of 0 - 1000. But it should not be allowed to set the value below 200, because the fan can stop functioning. And it should not be set above 500, because that would be bad for the fan on the long run. When implementing this device using the DeviceModel, it can be defined as follows:

[cols="<.^1s,<.^1s,<.^1s,<.^3",%autowidth.stretch,frame=all,grid=all]
|===
|Component         |name                 2.+d|Fan
.13+|Variable   |name                 2.+d|FanSpeed
                 .3+|variableAttribute 1     |type d|Actual
                                              |value d|<The current fan speed value of the fan.>
                                              |mutability d|ReadOnly
                 .3+|variableAttribute 2     |type  d|Target
                                              |value d|<The CSMS can use this value to adjust the fan speed. The Charging Station SHALL try to keep the actual value at the target value.>
                                              |mutability d|ReadWrite
                 .2+|variableAttribute 3     |type  d|MaxSet
                                              |value d|<The value '500' from the example. The target may not be set above this value.>
                 .2+|variableAttribute 4     |type  d|MinSet
                                              |value d|<The value '200' from the example. The target may not be set below this value.>
                 .2+|variableCharacteristics |maxLimit d|<The value '1000' from the example. This could be the physical max limit of the fan.>
                                              |minLimit d|<The value '0' from the example. This could be the physical min limit of the fan. This could also be -1000, if the fan is also able to rotate in the other direction.>
|Description 3+d|This is an example of how a fan could be defined using the DeviceModel.
|===

When trying to set the target with value 600, the Charging Station will first check the allowed min and max values/limits and reject the set. If the target value is set to 500, the value is within range and the Charging Station will allow the set and start to adjust the actual fan speed. If the actual fan speed is measured to be 502, it’s out of range. But it should be reported to the CSMS, so the actual value of a physical component should be updated without checking the min and max values/limits.

=== Monitoring

Optional monitoring settings can be associated with a variable, that allow changes to _variable_ ( _Actual_ ) values are to be reported to the CSMS as event notifications.

These include:

* Monitoring value
* Monitoring type: upper threshold, lower threshold, delta, periodic
* Severity level when reporting the event

The following table show which MonitorType/dataType combinations are possible.

[%autowidth.stretch,cols="<.^s,8*^.^",options="header"]
|===
|{nbsp}           |string |decimal |integer |dateTime |boolean |OptionList |SequenceList |MemberList
|UpperThreshold   |{nbsp} |X       |X       |{nbsp}   |{nbsp}  |{nbsp}     |{nbsp}       |{nbsp}
|LowerThreshold   |{nbsp} |X       |X       |{nbsp}   |{nbsp}  |{nbsp}     |{nbsp}       |{nbsp}
|Delta            |X      |X       |X       |X        |X       |X          |X            |X
|Periodic         |X      |X       |X       |{nbsp}   |X       |X          |X            |X
|PeriodicClockAligned |X      |X       |X       |{nbsp}   |X       |X          |X            |X
|===

* For _UpperThreshold_ and _LowerThreshold_ the value represents the to be exceeded value by the actual value of the variable.
* For _Delta_ this value represents the change in value comparing with the actual value from the moment the monitor was set.
** When the dataType of the variable is integer or decimal, this value represents the difference to be reached to trigger the monitor.
** When the dataType of the variable is dateTime the unit of measure will be in seconds.
** When the dataType of the variable is string, boolean, OptionList, SequenceList or MemberList, this value is ignored. +
  The monitor will be triggered by every change in the actual value.
* When a delta monitor is triggered OR when the Charging Station has rebooted, the Charging Station shall set a new momentary value.
* For _Periodic_ and _PeriodicClockAligned_ the value represents the interval in seconds.

The relationship between a Variable and one or more VariableMonitoring elements is illustrated in the figure below.

.Variables and monitoring
image::part1/images/figure_5.svg[Variables and monitoring]

=== Standardized lists of Components and Variables

To provide some level of interoperability between different Charging Stations and CSMSs, besides the above defined model of _Components_ and _Variables_ , part 2 - appendices of the OCPP specification provides a list of standardized names for Components and Variables. The idea of this lists is to make sure that _if_ a Charging Station and CSMS want to exchange information about a component, they both use the same name and description _if_ it is listed in the OCPP specification. For names of a _Components_ or _Variables_ that are not listed in the specification, bilateral appointments between Charging Station manufacturer and CSMS are to be made. In these cases it is advised to provide feedback to the Open Charge Alliance to be able to include new/additional _Components_ and _Variables_ in new versions of OCPP.

=== Minimum Device Model

Since the Device Model is a _generalized_ mechanism which can be applied to any model of Charging Station, the complexity of different implementations can vary. It consists of a number of use cases and messages that are not all required. This section describes the minimum part of the Device Model that needs to be implemented to create a working implementation of OCPP 2.0.1.

The Device Model introduces Components and Variables that can be used for configuring and monitoring a Charging Station. A number of these Components and Variables are included in the list of _Referenced Components and Variables_ (grouped by Functional Block) in Part 2 of the specification. When implementing a Functional Block, ALL required Configuration Variables that belong to a Functional Block SHALL be implemented. The required Configuration Variables from the _General_ section SHALL also be implemented for all implementations of OCPP 2.0.1.

The following table describes which messages are required or optional to implement for all use cases that are part of the Device Model implementation.

[%autowidth.stretch,cols="<.^2,<.^3",frame=all,grid=all,options="header"]
|===
2.+s|Use cases / messages that are part of a minimium Device Model implementation

s|Use case              s|Messages
|_B05 Set Variables_    |SetVariables message MUST be implemented
|_B06 Get Variables_    |GetVariables message MUST be implemented.
|_B07 Get Base Report_  |GetBaseReport message MUST be implemented and MUST support ConfigurationInventory and FullInventory. The content of these reports depends on the implementation of the Charging Station. It is up to the implementer to decide which components and variables exist in the implementation.

2.+s|Additional use cases / messages that are _not_ part of a minimium Device Model implementation
s|Use case              s|Messages
|_B08 Get Custom Report_ |GetCustomReport message is optional.
|_N02 Get Monitoring Report_ |GetMonitoringReportRequest message is optional.
|_N03 Set Monitoring Base_   |SetMonitoringBaseRequest message is optional.
|_N04 Set Variable Monitoring_ |SetVariableMonitoringRequest message is optional.

|_N05 Set Monitoring Level_ |SetMonitoringLevelRequest message is optional.
|_N06 Clear/Remove Monitoring_ |ClearVariableMonitoringRequest message is optional.
|_N07 Alert Event_ |it is RECOMMENDED that NotifyEventRequest is implemented in the Charging Station even when monitoring is not implemented, so that this can be used to report built-in monitoring events.
|_N08 Periodic Event_ |see N07.
|===

<<<

== Information Model vs. Device Model

As described above, the terms Information Model and Device Model refer to different concepts. The Information Model refers to a model of the information structure upon which the messages and datatypes in OCPP are based, whereas the Device Model refers to a generalized mechanism within OCPP to enable any model of Charging Station to report how it is build up so, it can be managed from any CSMS without defining the structure of the Charging Station in advance.

The messages that are used for Device Management are therefore part of the Information Model and the objects that are used for modelling a device ( _'Component'_ and _'Variable'_ ) are also part of the Information Model.

<<<

== Using OCPP for other purposes than EV charging

As indicated in the introduction of this document, OCPP is primarily intended for two way communication between a CSMS and a Charging Station. However, with the addition of the Device Model as described in the chapter <<device_model,Device Model>>, OCPP can additionally be used for other purposes. For example, the reporting of Events or Status changes in transformers or stand-alone battery packs might also be useful for companies that are rolling out EV charging infrastructure. In this example, a BootNotification could be used to connect these devices to a management system. In the device model a device that is not a Charging Station, can be recognized by the fact that the component Charging Station is not present at the top level. At the moment the OCPP specification does not provide use cases for non Charging Station devices. However, they may be added in a future version of OCPP.

<<<

== Numbering

_This section is normative._

=== EVSE numbering

To enable the CSMS to address all the EVSEs of a Charging Station, EVSEs MUST always be numbered in the same way.

EVSEs numbering (evseIds) MUST be as follows:

* The EVSEs MUST be sequentially numbered, starting from 1 at every Charging Station (no numbers may be skipped).
* evseIds MUST never be higher than the total number of EVSEs of a Charging Station
* For operations initiated by the CSMS, evseId 0 is reserved for addressing the entire Charging Station.
* For operations initiated by the Charging Station (when reporting), evseId 0 is reserved for the Charging Station main controller.

Example: A Charging Station with 3 EVSEs: All EVSEs MUST be numbered with the IDs: 1, 2 and 3. It is advisable to number the EVSEs of a Charging Station in a logical way: from left to right, top to bottom incrementing.

=== Connector numbering

To enable the CSMS to address all the Connectors of a Charging Station, Connectors MUST always be numbered in the same way.

Connector numbering (connectorIds) MUST be as follows:

* The connectors are numbered (increasing) starting at connectorId 1 on every EVSE
* Every connector per EVSE has a unique number
* ID of the first Connector of an EVSE MUST be 1
* Additional Connectors of the same EVSE MUST be sequentially numbered (no numbers may be skipped)
* connectorIds MUST never be higher than the total number of connectors on that EVSE

Example: A Charging Station with 3 EVSEs that each have 2 connectors, is numbered as follows:

* EVSE 1 has connectors with connectorId 1 and 2
* EVSE 2 has connectors with connectorId 1 and 2
* EVSE 3 has connectors with connectorId 1 and 2

=== Transaction IDs

TransactionIds are now generated by the Charging Station and MUST be unique on this Charging Station for every started transaction.

In OCPP 1.x this was done by the CSMS.

The format of the transaction ID is left to implementation. This MAY for example be an incremental number or an UUID.

<<<

== Topologies supported by OCPP

This chapter shows a number of topologies for using OCPP. As indicated in the introduction, OCPP was originally used for a setup where each Charging Station communicates directly with the CSMS. It is important to keep in mind that OCPP has no knowledge of the topology of the Charging Station network. The following figure shows the possible components in a setup using OCPP and the relations between these components:

.Possible components in a setup using OCPP
image::part1/images/figure_6.svg[Possible components in a setup using OCPP]

=== Charging Station(s) directly connected to CSMS

**Description**

This is the basic setup for using OCPP.

.Charging Station directly connected to CSMS
image::part1/images/figure_7.svg[Charging Station directly connected to CSMS]

[[multiple_charging_stations_connected_to_csms_via_local_proxy]]
=== Multiple Charging Stations connected to CSMS via Local Proxy

**Description**

In some situations it is desirable to route all communications for a group of Charging Stations through a single network node (i.e. modem, router, etc.). A typical example is the situation where a number of a Charging Stations are located in an underground parking garage with little or no access to the mobile network. In order to provide access to mobile data the Charging Stations are linked to a central data communications unit over a LAN. This central unit connects to the mobile network and acts as a proxy between CSMS and Charging Stations. Such a unit is called a "local proxy" (LP) in OCPP. A local proxy acts as a message router. Neither the CSMS nor the Charging Stations are aware of the topology of the network. For the Charging Stations in the group the local proxy "is" the CSMS. Similarly, for the CSMS the local proxy "is" the Charging Station. The diagram below illustrates this configuration.

.Multiple Charging Stations connected to CSMS via Local Proxy
image::part1/images/figure_8.svg[Multiple Charging Stations connected to CSMS via Local Proxy]

=== Multiple Charging Stations connected to CSMS via Local Controller

**Description**

Whereas a <<multiple_charging_stations_connected_to_csms_via_local_proxy,local proxy>> does little more than route OCPP messages, a Local Controller can send messages to its Charging Stations, independently of the CSMS. A typical usage for this is the local smart charging case described in the Smart Charging chapter of Part 2 of OCPP, where a Local Controller can impose charge limits on its Charging Stations. In order for a Local Controller to be addressed by the CSMS, it needs to have its own Charging Station identity. From the point of view from OCPP, the Local Controller will just be a Charging Station (without any EVSEs/Connectors). The CSMS will possess the logic to deal with the Local Controller in order to support, for example, local smart charging. It is up to the implementation of the CSMS, whether the group topology is manually configured or deduced from the network based on IP addresses and information in BootNotifications. The diagram below illustrate this configuration.

.Multiple Charging Stations connected to CSMS via Local Controller
image::part1/images/figure_9.svg[Multiple Charging Stations connected to CSMS via Local Controller]

[cols="^.^1s,10",%autowidth.stretch]
|===
|NOTE |Technically this topology can be realized in multiple ways. When using this setup with websockets, this implies that when a Charging Station connects to the Local Controller, it should open a websocket connection with the same address to the CSMS. The advantages of this approach is that the Local Controller can see all the messages and act on it, messages don’t have to wait, firmware updates etc. on the Charging Stations are possible and the CSMS does not need special software. It could (in big installations) lead to a lot of websocket connections between CSMS and LC needed. For further information, please refer to OCPP implementation guide in Part 4.
|===

=== Non-OCPP Charging Stations connected to CSMS via OCPP Local Controller.

**Description**

This setup has multiple non-OCPP Charging Stations that are abstracted away using a OCPP enabled Local Controller. When

applying OCPP in this situation, the LC should be considered as a Charging Station with many EVSEs or the LC should act as

multiple OCPP Charging Stations (having their own Charging Station Identity).

.Multiple non-OCPP Charging Stations connected to CSMS via Local Controller
image::part1/images/figure_10.svg[Multiple non-OCPP Charging Stations connected to CSMS via Local Controller]

=== DSO control signals to CSMS

**Description**

This is a set up in which the CSMS is the only application sending signals to a its Charging Stations, but the CSMS receives smart charging signals from a DSO based on (most likely) grid constraints. This means that a non-OCPP signal such as OpenADR or OSCP is received and based on this signal, the CSMS limits charging on its Charging Stations. CSOs that want full control over their Charging Station use this architecture, this way they are in control of the amount of energy being used by their Charging Stations. This can be done by sending charging profiles / charging schedules to Charging Stations.

.Smart Charging - DSO control signals to CSMS
image::part1/images/figure_11.svg[Smart Charging - DSO control signals to CSMS]

=== Parallel control by CSMS and EMS

**Description**

In a (semi-)private situation where a Charging Station is not only connected to the CSMS, but also to an Energy Management System, some form of parallel control should be supported. OCPP should at least be used for Charging Station maintenance, but OCPP 2.0.1 also supports reporting external smart charging control limits. So if the Energy Management System decides that charging at a later time is "better", the Energy Management System can impose an external limit (e.g. 0) to a Charging Station, which the Charging Station in turn can report to the CSMS via OCPP. The Energy Management System might get input from e.g. Local port of Smart Meter to prevent overloading connection but can also have other reasons for not charging (e.g. weather conditions).

.Parallel control by CSMS and EMS
image::part1/images/figure_12.svg[Parallel control by CSMS and EMS]

<<<

== Part 1 Appendix: OCPP Information Model

=== Explanation of UML representation and message generation

In the next paragraph, the UML schemes of the OCPP Information Model are shown. The model is based on the Common Information Model (CIM) and to some extent to the CEFACT naming standards (only part of the standard). The objects in the model are named _BusinessComponents_ and inherit properties from the CIM _IdentifiedObject_ , such as MRID and Name. In the UML diagrams the attributes that are inherited from _IdentifiedObject_ are shown under the _IdentifiedObject_ stereotype (between < < > >).

Other attributes are listed under the stereotype < < Content > >.

The messages in OCPP are derived from the model represented in the next paragraph, in a 3 step process:

.Process from information Model to Messages / schemes
image::part1/images/figure_13.svg[Process from information Model to Messages / schemes]

After creating the Information Model, the messages are created based on the Information Model. However, in this transition (first arrow), some rules are (manually) applied for modelling messages. The most important rule that is applied, is that messages containing a reference to a <class> with only one <field>, are replaced by a field with the name <class><field>. For example, if a message contains a Transaction, with only an Id, this is replaced by a transactionId.

In the next step, when generating the messages and datatypes section of Part 2 of the specification, for readability, all Core DataTypes such as _CounterType_ , are replaced by the Primitive DataType they refer to (except for enumerations) in this example _integer_.

=== Visual Representation of OCPP Information Model

.OCPP Information Model: Transactions
image::part1/images/figure_14.svg[OCPP Information Model: Transactions]

.OCPP Information Model: SmartCharging
image::part1/images/figure_15.svg[OCPP Information Model: SmartCharging]

.OCPP Information Model: Metering
image::part1/images/figure_16.svg[OCPP Information Model: Metering]

.OCPP Information Model: Device Model
image::part1/images/figure_17.svg[OCPP Information Model: Device Model]

.OCPP Information Model: Security-Profiles
image::part1/images/figure_18.svg[OCPP Information Model: Security-Profiles]

.OCPP Information Model: Security-Authorization
image::part1/images/figure_19.svg[OCPP Information Model: Security-Authorization]

.OCPP Information Model: Communication
image::part1/images/figure_20.svg[OCPP Information Model: Communication]

.OCPP Information Model: SecondaryActorSchedule
image::part1/images/figure_21.svg[OCPP Information Model: SecondaryActorSchedule]
