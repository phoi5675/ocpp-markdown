[[e_transactions]]
= E. Transactions
:!chapter-number:

<<<

:sectnums:
:sectnumlevels: 5
== Introduction

이 기능 블록은 OCPP 트랜잭션 관련 기능을 설명합니다. 트랜잭션은 충전기에서 시작/중지됩니다. 언제든지 EVSE에서는 ​​최대 하나의 트랜잭션만 활성화될 수 있습니다.

[[flexible_transaction_start_stop]]
=== Flexible transaction start/stop

가능한 한 많은 비즈니스 사례를 지원하고 특정 비즈니스 사례에 필요하지 않은 경우 너무 많은 메시지를 보내는 것을 방지하기 위해 OCPP 2.0.1은 트랜잭션 시작 및 중지의 유연한 구성을 지원합니다.

이를 위해 다음 구성 변수가 정의됩니다.

- <<tx_start_point,`TxStartPoint`>>
- <<tx_stop_point,`TxStopPoint`>>

이 두 구성 변수를 사용하면 트랜잭션을 시작할 시점을 정의할 수 있습니다. <<transaction_event_request,TransactionEventRequest>> (eventType = Started) 및 트랜잭션을 중지할 시점을 정의할 수 있습니다. <<transaction_event_request,TransactionEventRequest>> (eventType = Ended)

OCPP 2.0.1에서 트랜잭션의 유연한 시작/중지 지점이 도입됨에 따라 트랜잭션 정의를 제공하는 것이 중요합니다.

****
트랜잭션은 CSMS에서 기록하는 청구 세션의 일부입니다. 시작 및 종료 시간이 있는 단일 시간 프레임입니다. 운영자는 정보를 청구에 사용할 수 있습니다.
****

충전기 운영자가 TxStartPoint 및 TxStopPoint의 값을 정의해야 하지만(충전기에서 읽기 전용 값으로 미리 설정된 경우 제외), 모든 조합이 합리적인 것은 아닙니다.

다음 세 가지 변형이 가장 일반적입니다.

- 연결 시간이 청구되는 경우 시작 및 정지 지점은 `EVConnected` 여야 합니다.
- 사용 시간이 청구되는 경우 시작 지점은 `EVConnected`, Authorized, 정지 지점은 `EVConnected` 여야 합니다. +
(인증이 먼저 이루어지는 경우 충전기가 이미 '사용 중'으로 간주됨).
- 충전 시간이 청구되는 경우 시작 및 정지 지점은 `PowerPathClosed` 여야 합니다. (이는 충전기가 전원을 공급할 준비가 되면 시작되고 인증이 취소되거나 차량이 분리되면 중지됩니다.) 그 사이의 일시 중지(예: SuspendedEV(SE))는 트랜잭션을 종료하지 않습니다. 트랜잭션 중에 수집된 미터 값을 기준으로 에너지 또는 전력량에 대한 청구를 수행할 수 있습니다.

[cols="^.^1s,10",%autowidth.stretch]
|===
|WARNING
  |시작 및 종료 지점의 특정 조합은 시작된 트랜잭션이 결코 중지되지 않는 상황으로 이어질 수 있습니다. 예를 들어, 시작 지점이 `ParkingBayOccupancy` 이고 종료 지점이 `EVConnected` 인 경우 EV가 주차 공간을 점유하면 트랜잭션이 시작되지만 사용자가 EV를 연결하지 않고 단순히 운전해 가는 경우 `ParkingBayOccupancy` 가 종료 지점으로 구성되지 않았기 때문에 트랜잭션이 계속 열려 있습니다.
|===

==== Readonly or Read/Write

OCPP 2.0.1은 트랜잭션 시작/중지 구성 변수에 대해 두 가지 옵션을 지원합니다. RW(읽기-쓰기) 또는 R(읽기 전용) 중 하나가 될 수 있습니다.

충전기가 RW를 지원하는 경우 CSO가 설정을 구성할 수 있습니다. 가능한 모든 설정을 지원하려면 충전기의 소프트웨어가 더 유연해야 합니다.

R만 있는 경우, 설정은 펌웨어에 고정되어 있고, CSO는 충전기가 어떻게 동작할지 알아내기 위해 설정을 읽을 수 있지만 구성할 수는 없습니다. 이렇게 하면 구현이 더 단순해집니다. 대상 시장의 요구 사항이 잘 알려져 있는 경우 유연한 모델을 구현할 필요가 없을 수 있습니다.

==== OCPP 1.6 Transaction compatibility

OCPP 1.6과 유사한 트랜잭션이 필요한 경우, 이 섹션에서는 트랜잭션 시작 및 종료 지점을 구성하는 방법을 설명합니다.

OCPP 1.x에서는 충전기가 StartTransaction.req를 보내야 하는 순간이 매우 정확하게 정의되지 않았습니다. 일반적으로 충전기가 전력을 공급할 준비가 되었을 때, 즉 케이블이 연결되고 사용자가 인증되었을 때 이 작업이 수행되었습니다.

유사한 트랜잭션 시작 동작을 지원하려면 _PowerPathClosed_ 값을 사용해야 합니다. (그리고 완전성을 위해 다음을 추가하세요: _EnergyTransfer_)

.OCPP 1.6 호환 트랜잭션 설정
[cols="<.^2,<.^8",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|구성 변수 |값

|<<tx_start_point,`TxStartPoint`>> |PowerPathClosed
|<<tx_stop_point,`TxStopPoint`>> |EVConnected, Authorized
|===

정지 동작의 경우 _ParkingBayOccupancy_ 를 추가하면 안 됩니다. OCPP 1.6은 이를 지원하지 않았고, 누군가가 '반대' 커넥터를 사용하는 듀얼 소켓 충전기의 경우 EV는 계속 충전중임에도 트랜잭션이 중지될 수 있습니다.

=== TransactionId generation

OCPP 2.0.1의 새로운 기능: 트랜잭션 ID는 이제 충전기에서 생성됩니다.

OCPP 1.x에서는 CSMS가 이를 수행했습니다. 여기에는 몇 가지 단점이 있었습니다. 충전기가 오프라인일 때 트랜잭션 ID가 없는 트랜잭션이 있었습니다.

충전기에서 생성된 트랜잭션 ID는 해당 충전기에서 고유해야 합니다. 충전기의 수명 동안 동일한 트랜잭션 ID를 두 번 사용해서는 안 됩니다. 또한 충전기가 재부팅되거나, 전원을 껐다가 다시 켜거나, 펌웨어를 업데이트하거나, 수리할 때도 마찬가지입니다.

OCPP는 사용할 알고리즘을 지정하지 않지만 UUID를 사용하는 것이 좋습니다.

[[delivering_transaction_related_messages]]
=== Delivering transaction-related messages

<<transaction_event_request,TransactionEventRequest>> 메시지의 주요 목적은 CSMS에 나중에 트랜잭션 과금에 사용할 정보를 제공하는 것입니다. CSMS가 트랜잭션 과금에 필요한 모든 정보를 수신하도록 하기 위해 OCPP는 _retrying_ 와 _sequence number_ 라는 두 가지 메커니즘을 사용합니다.

==== Retrying

충전기는 보고해야하는 이벤트가 발생한 후 가능한 한 빨리 CSMS 시스템에 <<transaction_event_request,TransactionEventRequest>> 메시지를 보냅니다.

충전기가 오프라인이거나 전송 중에 메시지를 처리하는 동안 오류가 발생하면 CSMS에 청구 정보가 누락됩니다. CSMS에서 누락된 정보를 복구하기 위해 충전기는 이 정보를 전달하기 위해 재시도해야 합니다. +
충전기가 <<message_timeouts,message timeout period>> 내에 <<transaction_event_request,TransactionEventRequest>> 메시지에 대한 <<transaction_event_response,TransactionEventResponse>>를 수신하지 못하면 충전기는 사용 사례 <<e13_transaction_related_message_not_accepted_by_csms,E13 - Transaction-related message not accepted by CSMS>>에 설명된 재시도 절차를 따라야 합니다.

==== Sequence numbers

<<transaction_event_request,TransactionEventRequest>> 메시지 전달이 실패하고 나중에 재시도될 경우, 결과적으로 <<transaction_event_request,TransactionEventRequest>> 메시지가 충전기에서 트랜잭션 이벤트가 발생한 순서와 다른 순서로 CSMS에 도착할 수 있습니다. 이로 인해 CSMS가 트랜잭션에 대한 모든 <<transaction_event_request,TransactionEventRequest>> 메시지를 수신했는지 알기 어려워질 수 있으며, CSMS는 트랜잭션에 대한 청구를 시작하기 전에 이를 알고 싶어할 수 있습니다.

트랜잭션에 대한 모든 <<transaction_event_request,TransactionEventRequest>> 메시지가 수신되었는지 알 수 있도록 하기 위해 OCPP는 TransactionEventRequest 메시지에서 _sequence number_ 를 사용합니다. 모든 EVSE에 대해 충전기는 해당 EVSE에 대해 생성된 <<transaction_event_request,TransactionEventRequest>> 메시지 수의 카운터를 유지 관리합니다. 새로운 <<transaction_event_request,TransactionEventRequest>> 메시지를 생성할 때 충전기는 요청의 **seqNo** 필드에 EVSE 카운터의 현재 값을 포함한 다음 카운터를 증가시킵니다. 이 메커니즘을 사용하면 CSMS는 다음을 확인하여 트랜잭션에 대한 전체 정보가 있는지 확인할 수 있습니다.

- **seqNo** _a_ 와 함께 트랜잭션 시작에 대한 <<transaction_event_request,TransactionEventRequest>>를 수신했습니다.
- _a_ 보다 큰 **seqNo** _o_ 인 트랜잭션 중지에 대한 <<transaction_event_request,TransactionEventRequest>>를 수신했습니다.
- _a_ 와 _o_ 사이의 모든 정수 _n_ 에 대해 **seqNo** _n_ 이 포함된 트랜잭션에 대한 <<transaction_event_request,TransactionEventRequest>>를 수신했습니다.

[[sequence_number_generation]]
===== Sequence number generation

_이 섹션은 규범적입니다_.

트랜잭션이 시작되면 충전기는 <<transaction_event_request,TransactionEventRequest>> 메시지의 _seqNo_ 필드를 0으로 설정해야 합니다. +
(_seqNo_ 가 지속적으로 증가하는 구현은 여전히 ​​허용됩니다.)

각 <<transaction_event_request,TransactionEventRequest>> 후에 충전기는 _seqNo_ 를 1씩 늘려야 합니다.

=== Authorization

이 기능 블록의 유즈케이스를 단순화하기 위해 EV 운전자가 인증되는 방식은 이러한 유즈케이스에 포함되지 않습니다. 간단히 "사용자 인증 성공" 또는 "EV 운전자가 충전기 및/또는 CSMS에서 인증 되었습니다."와 같이 호출됩니다. 이는 EV 운전자를 인증하는 어떠한 방식일 수 있습니다. 인증에 대한 모든 옵션과 요구 사항은 기능 블록 <<authorization,C Authorization>>을 참조하세요.

=== Clarification for optional fields in TransactionEventRequest

_이 섹션은 정보 제공을 목적으로 합니다._

TransactionEventRequest에는 여러 선택 필드가 포함되어 있습니다. 이러한 필드 중 일부는 한 번만 보내야 하며 모든 TransactionEventRequest에서 반복해서는 안 됩니다. 다음 요약은 이러한 선택 필드와 관련된 요구 사항을 나타냅니다.

**_evse_**

(E01.FR.16) _evse_ 필드는 EV가 연결된 후 발생하는 첫 번째 TransactionEventRequest에서만 제공됩니다. 이후의 모든 TransactionEventRequest에서 반복되지 않습니다.

**_idToken_**

(E03.FR.01) _idToken_ 필드는 트랜잭션이 인증된 후 발생하는 첫 번째 TransactionEventRequest에서 한 번 제공됩니다. +
(E07.FR.02) _idToken_ 필드는 트랜잭션 인증이 완료된 후 발생하는 TransactionEventRequest에서 한 번 제공됩니다. +
(C12.FR.02) 위의 내용은 idToken이 `Accepted` 상태로 인증 캐시에 존재해서 인증된 경우에도 해당합니다. +
(F02.FR.05): 위의 내용은 idToken이 RequestStartTransactionRequest에서 제공된 경우에도 해당합니다.

**_reservationId_**

(E03.FR.03/H01.FR.15) _reservationId_ 필드는 충전기에 예약이 존재했던 idToken에 의해 트랜잭션이 인증되었을 때 발생하는 첫 번째 TransactionEventRequest에서만 제공됩니다. +
(F02.FR.06) 위의 내용은 idToken이 RequestStartTransactionRequest에서 제공된 경우에도 해당합니다.

**_meterValue_**

(E02.FR.09) TransactionEventRequest(_eventType_=`Started`)는 SampledDataCtrlr.TxStartedMeasurands에서 구성된 미터 값을 포함해야 합니다. +
(E02.FR.10) TransactionEventRequest(_eventType_=`Updated`)는 SampledDataCtrlr.TxUpdatedInterval에서 구성된 모든 간격에서 전송되어야 하며 SampledDataCtrlr.TxUpdatedMeasurands에서 구성된 미터 값을 포함해야 합니다. TxUpdatedMeasurands == 0이면 미터 값이 전송되지 않습니다. +
(E06.FR.11) TransactionEventRequest(_eventType_=`Ended`)는 SampledDataCtrlr.TxEndedMeasurands에서 구성된 미터 값을 포함해야 합니다. SampledDataCtrlr.TxEndedInterval == 0인 경우, 트랜잭션 시작 및 종료 시에 가져온 값만 포함됩니다.

**_transactionInfo.chargingState_**

(E02.FR.13) 충전 상태가 변경될 때마다 충전기는 _chargingState_ 를 포함하는 TransactionEventRequest를 보내야 합니다. 즉, TransactionEventRequest(_eventType_=`Started`)는 항상 _chargingState_ 를 갖는데, 상태가 존재하지 않는 상태에서 값으로 바뀌기 때문입니다. +
충전 상태 변경이 유일한 이벤트인 경우 TransactionEventRequest는 _triggerReason_ = `ChargingStateChanged` 를 갖지만, 충전 상태 변경이 _triggerReason_ = `CablePluggedIn` 또는 (`Stop`)`Authorized` 와 같은 다른 이벤트와 함께 발생하는 경우 _chargingState_ 는 해당 메시지의 일부로 보고될 수 있습니다. +
_triggerReason_ = `ChargingStateChanged` 인 TransactionEventRequest는 항상 _chargingState_ 를 포함해야 합니다.

**_transactionInfo.stoppedReason_**

(C15.FR.04, E05.FR.10, E05.FR.08/09, E07.FR.06) _stoppedReason_ 은 값이 `Local` 인 경우를 제외하고 TransactionEventRequest(_eventType_=`Ended`)에 항상 제공되어야 하며, Local인 경우는 생략될 수 있습니다. +
(F03.FR.03, F03.FR.10, F04.FR.03) 위의 내용은 RequestStopTransactionRequest에 의해 중지된 트랜잭션에도 적용되지만, 이 경우 _stoppedReason_ 값은 `Remote` 여야 합니다.

**_transactionInfo.remoteStartId_**

(C05.FR.03, F01.FR.25, F02.FR.01) _remoteStartId_ 는 동일한 _remoteStartId_ 를 사용하여 RequestStartTransactionRequest 이후의 다음 TransactionEventRequest에서 전송되어야 합니다.

<<<

== Use cases & Requirements

=== OCPP transaction mechanism

:sectnums!:
[[e01_start_transaction_options]]
=== E01 - Start Transaction options

.E01 - 트랜잭션 시작
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|번호 |유형 |설명

|1 |이름 |트랜잭션 시작 옵션
|2 |ID |E01
|{nbsp} d|_기능 블록_ |E. 트랜잭션
|3 |목표 |충전기에서 트랜잭션이 시작되었음을 CSMS에 알리는 것.
|4 |설명 |이 사용 사례는 충전기의 구성에 따라 (<<transaction_event_request,TransactionEventRequest>>를 <<transaction_event_enum_type,eventType = Started>>와 함께 전송하여) 충전기가 트랜잭션을 시작할 수 있는 여러 순간에 대해 설명합니다.
|5 d|_Actors_ |충전기, CSMS, EV 운전자
d|S1 d|_시나리오 목표_ |**주차장 점유 감지기가 "EV"를 감지하면 트랜잭션을 시작합니다.**
|{nbsp} d|_시나리오 설명_
  |**1.** EV 운전자가 주차장 점유 감지기가 있는 충전기에 "EV"를 주차하면 감지기가 작동합니다. +
  **2.** 충전기가 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Started>>)를 보내 CSMS에 시작된 트랜잭션에 대해 알립니다(운전자가 아직 알려지지 않은 경우에도). +
  **3.** CSMS가 <<transaction_event_request,TransactionEventRequest>>가 수신되었음을 확인하는 TransactionEventResponse로 응답합니다.
|{nbsp} |필수 조건
  |EVSE에서 ​​진행 중인 트랜잭션이 없습니다. +
  구성 변수: <<tx_start_point,`TxStartPoint`>>에는 다음이 포함됩니다. <<tx_start_stop_point_values,ParkingBayOccupancy>>
|{nbsp} |사후 조건
  |**성공한 사후 조건:** +
  트랜잭션이 진행 중이고 CSMS에 _성공적으로_ 통보되었습니다.

  **실패한 사후 조건:**
  트랜잭션이 _진행 중이 아닙니다_, _또는_ +
  CSMS에 _통보되지 않았습니다_.
|===

.시퀀스 다이어그램: 시작 트랜잭션 옵션 - ParkingBayOccupancy
image::part2/images/figure_39.svg[시퀀스 다이어그램: 시작 트랜잭션 옵션 - ParkingBayOccupancy]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|S2 d|_시나리오 목표_ |충전기와 EV + 간에 통신이 설정되면 트랜잭션을 시작합니다(예: 양쪽에 케이블이 올바르게 연결됨)
|{nbsp} d|_시나리오 설명_
  |**1.** 충전기가 EV와 연결합니다. +
  **2.** 충전기는 <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Started>>)를 보내 CSMS에 시작된 트랜잭션에 대해 알립니다(운전자가 아직 알려지지 않은 경우에도). +
  **3.** CSMS는 <<transaction_event_response,TransactionEventResponse>>로 응답하여 <<transaction_event_request,TransactionEventRequest>>가 수신되었음을 확인합니다.
|{nbsp} |필수 조건
  |EVSE에서 ​​진행 중인 트랜잭션이 없습니다. +
  구성 변수: <<tx_start_point,`TxStartPoint`>> 포함: <<tx_start_stop_point_values,EVConnected>> (Not: <<tx_start_stop_point_values,ParkingBayOccupancy>>)
|{nbsp} |사후 조건
  |**성공적인 사후 조건:** +
  트랜잭션이 진행 중이며 CSMS에 _성공적으로_ 통보되었습니다.

  **실패 사후 조건:** +
  트랜잭션이 _진행되지_ 않음, _또는_ +
  CSMS에 _알려지지_ 않음.
|===

.시퀀스 다이어그램: 트랜잭션 시작 옵션 - EVConnected
image::part2/images/figure_40.svg[시퀀스 다이어그램: 트랜잭션 시작 옵션 - EVConnected]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|S3 d|_시나리오 목표_ |EV 운전자가 충전을 인증받았을 때 트랜잭션을 시작합니다.

|{nbsp} d|_시나리오 설명_
  |**1.** EV 운전자가 자신의 신원을 제공합니다 +
  **2.** 충전기가 제공된 신원을 검증합니다(예: 인증 캐시 또는 인증 요청을 통해). +
  **3.** 충전기는 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Started>>)를 보내 CSMS에 시작된 트랜잭션에 대해 알립니다. +
  **4.** CSMS는 <<transaction_event_response,TransactionEventResponse>>로 응답하여 <<transaction_event_request,TransactionEventRequest>>가 수신되었음을 확인합니다.
|{nbsp} |필수 조건
  |EVSE에서 ​​진행 중인 트랜잭션이 없습니다. +
  구성 변수: <<tx_start_point,`TxStartPoint`>>에는 다음이 포함됩니다. <<tx_start_stop_point_values,Authorized>>(Not: <<tx_start_stop_point_values,ParkingBayOccupancy>>).
|{nbsp} |사후 조건
  |**성공적인 사후 조건:** +
  트랜잭션이 진행 중이고 CSMS에 _성공적으로_ 통보되었습니다.

  **실패 사후 조건:** +
  트랜잭션이 _진행 중이 아닙니다_, _또는_ +
  CSMS에 _통보되지 않았습니다_.
|===

.시퀀스 다이어그램: 트랜잭션 시작 옵션 - 인증됨
image::part2/images/figure_41.svg[시퀀스 다이어그램: 트랜잭션 시작 옵션 - 인증됨]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|S4 d|_시나리오 목표_ |계량기가 요금 청구를 시작하기 전에 첫 번째 서명된 계량기 값을 제공하면 트랜잭션을 시작합니다.

|{nbsp} d|_시나리오 설명_
  |**1.** EV 운전자가 충전기와 EV에 케이블을 연결합니다. +
  **2.** 충전기가 미터에 서명된 값을 요청합니다. +
  **3**. 미터가 서명된 값을 제공합니다(시간이 걸릴 수 있음). +
  **4.** 충전기가 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Started>>)를 보내 CSMS에 시작된 트랜잭션을 알립니다. +
  **5.** CSMS가 <<transaction_event_response,TransactionEventResponse>>로 응답하여 <<transaction_event_request,TransactionEventRequest>>가 수신되었음을 확인합니다.
|{nbsp} |필수 조건
  |EVSE에서 ​​진행 중인 트랜잭션이 없습니다. +
  구성 변수: <<tx_start_point,`TxStartPoint`>>에는 다음이 포함됩니다. <<tx_start_stop_point_values,DataSigned>> (Not: <<tx_start_stop_point_values,ParkingBayOccupancy, EVConnected 또는 Authorized>>). +
  충전기에는 측정된 값에 서명할 수 있는 미터가 있습니다. +
  구성 변수: <<sampled_data_sign_readings,`SampledDataSignReadings`>>가 _true_ 로 설정됨.
|{nbsp} |사후 조건
  |**성공적인 사후 조건:** +
  트랜잭션이 진행 중이고 CSMS에 _성공적으로_ 통보되었습니다.

  **실패 사후 조건:** +
  트랜잭션이 _진행 중이 아닙니다_, _또는_ +
  CSMS에 _통보되지 않았습니다_.
|===

.시퀀스 다이어그램: 트랜잭션 시작 옵션 - DataSigned
image::part2/images/figure_42.svg[시퀀스 다이어그램: 트랜잭션 시작 옵션 - DataSigned]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|S5 d|_시나리오 목표_ |충전을 시작하기 위한 모든 전제 조건이 충족되었지만(인증 및 연결됨) 아직 에너지가 전송되는 않을 경우에도 트랜잭션을 시작.

|{nbsp} d|_시나리오 설명_
  |**1.** EV 운전자는 충전기 및/또는 CSMS에서 인증을 받습니다. +
  **2.** 충전기가 EV에 연결됩니다. +
  **3.** 충전기에서 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Started>>)를 보내 CSMS에 시작된 트랜잭션을 알립니다. +
  **4.** CSMS에서 <<transaction_event_response,TransactionEventResponse>>로 응답하여 <<transaction_event_request,TransactionEventRequest>>가 수신되었음을 확인합니다.
|{nbsp} |필수 조건
  |EVSE에서 ​​진행 중인 트랜잭션이 없습니다. +
  구성 변수: <<tx_start_point,`TxStartPoint`>>에는 다음이 포함됩니다. <<tx_start_stop_point_values,PowerPathClosed>> (Not: <<tx_start_stop_point_values,ParkingBayOccupancy, EVConnected, Authorized 또는 DataSigned>>). +
  충전 케이블이 연결되었습니다.
|{nbsp} |사후 조건
  |**성공 사후 조건:** +
  트랜잭션이 진행 중이고 CSMS에 _성공적으로_ 통보되었습니다.

  **실패 사후 조건:** +
  트랜잭션이 _진행 중이_ 아니거나 +
  CSMS에 _통보되지_ 않았습니다.
|===

.시퀀스 다이어그램: 시작 트랜잭션 옵션 - PowerPathClosed
image::part2/images/figure_43.svg[시퀀스 다이어그램: 시작 트랜잭션 옵션 - PowerPathClosed]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|S6 d|_시나리오 목표_ |에너지 전송이 시작될 때 트랜잭션을 시작합니다.

|{nbsp} d|_시나리오 설명_
  |**1.** EV 운전자는 충전기 및/또는 CSMS에서 인증을 받습니다. +
  **2.** 충전기가 전원 릴레이를 닫습니다. +
  **3.** EV가 충전을 시작하고 에너지 전송이 시작됩니다. +
  **4.** 충전기는 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Started>>)를 보내 CSMS에 시작된 트랜잭션에 대해 알립니다. +
  **5.** CSMS는 <<transaction_event_response,TransactionEventResponse>>로 응답하여 <<transaction_event_request,TransactionEventRequest>>가 수신되었음을 확인합니다.
|{nbsp} |필수 조건 |구성 변수: <<tx_start_point,`TxStartPoint`>>에는 <<tx_start_stop_point_values,EnergyTransfer>>가 포함됩니다(Not: <<tx_start_stop_point_values,ParkingBayOccupancy, EVConnected, Authorized, DataSigned 또는 PowerPathClosed>>).
|{nbsp} |사후 조건
  |**성공적인 사후 조건:** +
  트랜잭션이 진행 중이고 CSMS에 _성공적으로_ 통보되었습니다.

  **실패 사후 조건:** +
  트랜잭션이 _진행 중이_ 아니거나, _또는_ +
  CSMS에 _통보되지_ 않았습니다.
|===

.시퀀스 다이어그램: 시작 트랜잭션 옵션 - EnergyTransfer
image::part2/images/figure_44.svg[시퀀스 다이어그램: 시작 트랜잭션 옵션 - EnergyTransfer]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7 |오류 처리 |n/a
|8 |비고 |n/a
|===

==== E01 - Start Transaction options - Requirements

.E01 - 요구 사항
[cols="^.^2,<.^5,<.^6",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID |사전 조건 |요구 사항 정의

|E01.FR.01 |<<tx_start_point,`TxStartPoint`>>에 다음이 포함됨: +
  <<tx_start_stop_point_values,ParkingBayOccupancy>> +
  AND +
  주차 감지기가 "EV"를 감지합니다. +
  AND +
  아직 트랜잭션이 시작되지 않았습니다.
    |충전기는 트랜잭션을 시작하고 <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Started>>)를 CSMS로 전송해야 합니다.
|E01.FR.02 |<<tx_start_point,`TxStartPoint`>>에는 <<tx_start_stop_point_values,EVConnected>>가 포함됩니다. +
  AND +
  충전기는 EV와 연결되어 있습니다. +
  AND +
  EVSE에서 ​​아직 트랜잭션이 시작되지 않았습니다.
    |충전기는 트랜잭션을 시작하고 <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Started>>)를 CSMS로 전송해야 합니다.
|E01.FR.03 |<<tx_start_point,`TxStartPoint`>>에는 다음이 포함됩니다. <<tx_start_stop_point_values,Authorized>> +
  AND +
  EV 운전자가 인증됨 +
  AND +
  아직 트랜잭션이 시작되지 않음
    |충전기는 트랜잭션을 시작하고 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Started>>)를 CSMS로 보내야 합니다.
|E01.FR.04 |<<tx_start_point,`TxStartPoint`>>에는 다음이 포함됩니다. <<tx_start_stop_point_values,DataSigned>> +
  AND +
  충전기에는 측정된 값에 서명할 수 있는 미터가 있습니다. +
  AND +
  구성 변수: +
  <<sampled_data_sign_readings,`SampledDataSignReadings`>>가 _true_ 로 설정됨. +
  AND +
  충전기에서 서명된 미터 값을 읽었습니다. +
  AND +
  아직 트랜잭션이 시작되지 않았습니다.
    |충전기는 트랜잭션을 시작하고 <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Started>>)를 CSMS로 보내야 합니다.
|E01.FR.05 |<<tx_start_point,`TxStartPoint`>>에는 다음이 포함됩니다. +
  <<tx_start_stop_point_values,PowerPathClosed>> +
  AND +
  EV 운전자가 인증되었습니다. AND +
  충전기가 EV와 연결되어 있습니다. +
  AND +
  EVSE에서 ​​아직 트랜잭션이 시작되지 않았습니다.
    |충전기는 트랜잭션을 시작하고 <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Started>>)를 CSMS로 보내야 합니다.
|E01.FR.06 |<<tx_start_point,`TxStartPoint`>>에는 다음이 포함됩니다. <<tx_start_stop_point_values,EnergyTransfer>> +
  AND +
  에너지 전송이 시작됩니다. +
  AND +
  EVSE에서 ​​아직 트랜잭션이 시작되지 않았습니다.
    |충전기는 트랜잭션을 시작하고 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Started>>)를 CSMS로 보내야 합니다.
|E01.FR.07 |<<transaction_event_request,TransactionEventRequest>>를 만들어야 하는 경우
  |충전기는 <<sequence_number_generation,Sequence Number Generation>>에 지정된 대로 메시지의 **seqNo** 필드를 설정해야 합니다.
|E01.FR.08 |{nbsp}
  |충전기에서 생성된 transactionId는 충전기가 재부팅되거나 수리되거나 펌웨어가 업데이트되는 경우에도 해당 충전기에서 시작한 각 트랜잭션에 대해 고유해야 하며, 동일한 TransactionId를 두 번 생성하지 않도록 해야 합니다.
|E01.FR.09 |<<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Started>>)에서 미터 데이터를 보내도록 구성된 경우, <<metervalues_configuration,Meter Values - Configuration>> 참조 +
  AND +
  EVSE는 트랜잭션 시작 시 알려져 있음
    |충전기는 구성된 측정값을 CSMS로 전송된 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Started>>)에서 _context_ = `Transaction.Begin` 인 선택적 meterValue 필드에 추가하여 트랜잭션 중에 더 자세한 정보를 제공해야 합니다.
|E01.FR.10 |EV 운전자가 이 트랜잭션에 대해 인증을 받은 후
  |충전기는 <<id_token_type,IdTokenType>> 정보가 포함된 <<transaction_event_request,TransactionEventRequest>>를 보내야 합니다.
|E01.FR.11 |E01.FR.10
  |CSMS는 <<transaction_event_request,TransactionEventRequest>>의 식별자의 유효성을 확인해야 합니다.
|E01.FR.12 |E01.FR.11
  |CSMS는 <<transaction_event_response,TransactionEventResponse>>를 보내야 합니다. 여기에는 _idTokenInfo_ 에 인증 상태 값과 _idToken_ 에 대한 _groupIdToken_ 이 포함되어 있어야 합니다.
|E01.FR.13 |이 트랜잭션에서 예약을 종료합니다.
  |다음 <<transaction_event_request,TransactionEventRequest>>에는 reservationId가 포함되어야 합니다.
|E01.FR.14 |특정 EVSE 및 커넥터에 대해 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Started>>)가 전송된 후
  |충전기는 이 트랜잭션이 종료될 때까지 동일한 EVSE의 다른 커넥터에서 다른 트랜잭션을 시작해서는 안 됩니다.
|E01.FR.15 |<<transaction_event_request,TransactionEventRequest>>를 전송할 때
  |충전기는 <<trigger_reason_enum_type,triggerReason>>을 설정하여 CSMS에 이벤트를 트리거한 원인을 알려야 합니다. 사용할 이유는 <<trigger_reason_enum_type,TriggerReasonEnumType>>의 설명에 설명되어 있습니다.
|E01.FR.16 |EV가 충전기에 연결된 후
  |다음 <<transaction_event_request,TransactionEventRequest>>에는 _evse.id_ 와 +
    _evse.connectorId_ 가 포함되어야 합니다.
|E01.FR.17 | <<transaction_event_request,TransactionEventRequest>>에서 미터 데이터를 보내도록 구성된 경우(<<transaction_event_enum_type,eventType = Started>>), 다음을 참조하세요: <<metervalues_configuration,Meter Values - Configuration>> +
  AND +
  EVSE는 트랜잭션 시작 시 알려지지 않음
    |충전기는 _eventType_ = `Started` 에 대한 측정값을 충전이 시작될 때 발생하는 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>)의 컨텍스트 `Transaction.Begin` 과 함께 선택적 meterValue 필드에 추가해야 합니다.
|E01.FR.18 |충전 상태가 변경되는 경우
  |충전기는 _chargingState_ 요소를 포함한 <<transaction_event_request,TransactionEventRequest>>를 보내야 합니다.
|E01.FR.19 |EV가 에너지 전송을 일시적으로 중단할 때
  |충전기는 _chargingState_ = `SuspendedEV` 인 <<transaction_event_request,TransactionEventRequest>>를 보내야 함
|E01.FR.20 |E01.FR.19 AND +
  충전기가 에너지 전송의 일시 중단을 처리할 수 없음
    |충전기는 _chargingState_ = `EVConnected` 인 <<transaction_event_request,TransactionEventRequest>>를 보내야 함.
|===

[[e02_start_transaction_cable_plugin_first]]
==== E02 - Start Transaction - Cable Plugin First

.E02 - 트랜잭션 시작 - 케이블 플러그인 먼저
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|번호 |유형 |설명

|1 |이름 |트랜잭션 시작 - 케이블 플러그인 먼저
|2 |ID |E02
|{nbsp} d|_기능 블록_ |E. 트랜잭션
|3 |목표 |충전기에서 트랜잭션이 시작되었음을 CSMS에 알립니다.
|4 |설명 |EV 운전자는 먼저 충전 케이블을 연결하여 충전기와 상호 작용을 시작합니다. CSMS는 이에 대한 알림을 전송받습니다. 그런 다음 EV와 EVSE 간의 통신이 설정되면 트랜잭션이 시작되고 CSMS에 이에 대한 알림을 전송받습니다. EV가 충전을 시작합니다.
|{nbsp} d|_Actors_ |충전기, CSMS, EV 운전자
|{nbsp} d|_시나리오 설명_
  |**1.** EV 운전자가 충전기에 케이블을 연결합니다. +
  **2.** 충전기는 <<status_notification_request,StatusNotificationRequest>>를 CSMS에 보내서 <<connector_status_enum_type,_Occupied_>>가 된 Connector에 대해 알립니다. +
  **3.** 충전기는 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Started>>)를 보내서 CSMS에 시작된 트랜잭션에 대해 알립니다(운전자가 아직 알려지지 않은 경우에도 해당). +
  **4.** CSMS는 <<transaction_event_response,TransactionEventResponse>>로 응답하여 <<transaction_event_request,TransactionEventRequest>>가 수신되었음을 확인합니다. +
  **5.** EV 운전자는 충전기 및/또는 CSMS에서 인증을 받습니다. +
  **6.** 에너지 전송이 시작됩니다. +
  **7.** 충전기는 <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Updated>>)를 권한 있는 idToken 정보와 함께 CSMS로 보내 충전 상태와 트랜잭션에 속하는 idToken을 알립니다. +
  **8.** CSMS는 <<transaction_event_response,TransactionEventResponse>>를 IdTokenInfo.status _Accepted_ 와 함께 충전기에 응답합니다. +
  **9.** 충전 프로세스 동안 충전기는 트랜잭션 관련 알림을 위해 <<transaction_event_request,TransactionEventRequest>> (Updated) 메시지를 계속 보냅니다.
|{nbsp} d|_대안 시나리오_
  |<<e03_start_transaction_idtoken_first,E03 - Start Transaction - IdToken First>> +
  <<e04_transaction_started_while_charging_station_is_offline,E04 - Offline Start Transaction>> +
  <<e05_start_transaction_id_not_accepted,E05 - Start Transaction - Id not Accepted>>
|5 |필수 조건 |먼저 충전 케이블을 꽂습니다.
|6 |사후 조건
  |**성공한 사후 조건:** +
  트랜잭션이 진행 중이고 CSMS에 _성공적으로_ 알립니다.

  **실패 사후 조건:** +
  트랜잭션이 _진행 중이 아닙니다_. _또는_ +
  CSMS에 _알리지 않습니다_. _또는_ +
  트랜잭션 시작 - ID가 수락되지 않습니다.
|===

.Sequence Diagram: Start Transaction - Cable Plugin First
image::part2/images/figure_45.svg[Sequence Diagram: Start Transaction - Cable Plugin First]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7 |오류 처리 |<<transaction_event_response,TransactionEventResponse>>로 응답하지 못하면 충전기는 <<e12_inform_csms_of_an_offline_occurred_transaction,E12 - Transaction-related message not accepted by CSMS>>에 지정된 대로 동일한 메시지를 다시 시도합니다.
|8 |참고
  |충전기가 인증 캐시를 구현한 경우 <<transaction_event_response,TransactionEventResponse>>를 수신하면 충전기는 캐시 항목을 업데이트합니다.

  위의 시나리오 설명과 시퀀스 다이어그램은 트랜잭션 시작 및 중지에 대한 구성 변수가 다음과 같이 구성된 것을 기반으로 합니다. +
  <<tx_start_point,`TxStartPoint`>>: <<tx_start_stop_point_values,EVConnected, Authorized, DataSigned, PowerPathClosed, EnergyTransfer>> +
  이 유즈케이스는 다른 구성에서도 유효하지만, 그 경우 트랜잭션이 다른 시점에서 시작/종료될 수 있으며, 이는 메시지가 전송되는 순서에 영향을 미칠 수 있습니다. 자세한 내용은 사용 사례를 참조하세요. <<e01_start_transaction_options,E01 - Start Transaction options>> 및 <<e06_stop_transaction_options,E06 - Stop Transaction options>>.
|===

==== E02 - Start Transaction - Cable Plugin First - Requirements

.E02 - 요구 사항
[cols="^.^2,<.^6,<.^6,<.^4",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID |전제 조건 |요구 사항 정의 |참고

|E02.FR.01 |EV 운전자가 이 트랜잭션에 대해 인증된 후.
  |다음 <<transaction_event_request,TransactionEventRequest>>에는 _triggerReason_: <<trigger_reason_enum_type,Authorized>> 그리고 <<id_token_type,IdTokenType>> 정보가 포함되어야 합니다. |{nbsp}
|E02.FR.02 |E02.FR.01 |CSMS는 인증 상태 값을 포함하는 <<transaction_event_response,TransactionEventResponse>>를 보내야 합니다. |{nbsp}
|E02.FR.03 |트랜잭션이 예약을 종료합니다.
  |다음 <<transaction_event_request,TransactionEventRequest>>는 reservationId를 포함해야 합니다.
    |<<h_reservation,H. Reservation>>을 참조하세요.
|E02.FR.04 |{nbsp} |CSMS는 <<transaction_event_request,TransactionEventRequest>>에서 식별자의 유효성을 확인해야 합니다
  |식별자가 오래된 정보를 사용하여 충전기에서 로컬로 인증되었을 수 있기 때문입니다.
|E02.FR.05 |케이블이 꽂혀 있을 때
  |충전기는 <<status_notification_request,StatusNotificationRequest>>를 상태 <<connector_status_enum_type,_Occupied_>>로 보내야 합니다.
    |대신 *component*(name = 'Connector', evse.id = _<x>_, evse.connectorId = _<y>_), variable(name = 'AvailabilityState'), *actualValue* = 'Occupied'에 대한 NotifyEventRequest 메시지를 보내 EVSE _<x>_ 의 Connector _<y>_ 가 현재 점유되었음을 알릴 수 있습니다.(MAY)
|E02.FR.06 |케이블이 꽂혀 있고 `TxStartPoint` 에 EVConnected가 포함되어 있을 때
  |충전기는 <<transaction_event_request,TransactionEventRequest>>를 보내야 합니다. |{nbsp}
|E02.FR.07 |<<transaction_event_request,TransactionEventRequest>>를 생성해야 하는 경우
  |충전기는 <<sequence_number_generation,Sequence Number Generation>>에 지정된 대로 메시지의 **seqNo** 필드를 설정해야 합니다.
    |이렇게 하면 CSMS가 트랜잭션 정보의 완전성을 추적할 수 있습니다.
|E02.FR.08 |{nbsp}
  |충전기에서 생성된 transactionId는 충전기가 재부팅, 수리, 펌웨어 업데이트 등을 수행하더라도 해당 충전기에서 시작한 각 트랜잭션에 대해 고유해야 하며, 동일한 TransactionId를 두 번 생성하지 않도록 해야 합니다. |{nbsp}
|E02.FR.09 | <<transaction_event_request,TransactionEventRequest>>에서 미터 데이터를 보내도록 구성된 경우(<<transaction_event_enum_type,eventType = Started>>), 다음을 참조하세요: <<metervalues_configuration,Meter Values - Configuration>> +
  AND +
  EVSE는 트랜잭션 시작 시 알려져 있음
    |충전기는 구성된 측정값을 CSMS로 전송된 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Started>>)의 _context_ = `Transaction.Begin` 인 선택적 meterValue 필드에 추가하여 트랜잭션 중에 더 자세한 정보를 제공해야 합니다. |{nbsp}
|E02.FR.10 |<<transaction_event_request,TransactionEventRequest>>에서 미터 데이터를 보내도록 구성된 경우(<<transaction_event_enum_type,eventType = Updated>>), 다음을 참조하세요: <<metervalues_configuration,Meter Values - Configuration>>
  |충전기는 구성된 측정값을 CSMS로 전송된 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>)의 선택적 meterValue 필드에 추가하여 트랜잭션 중에 더 자세한 정보를 제공해야 합니다. |{nbsp}
|E02.FR.11 |E02.FR.10 +
  AND +
  <<transaction_event_request,TransactionEventRequest>>에 대한 미터 데이터 양이 너무 많은 경우(<<transaction_event_enum_type,eventType = Updated>>)
    |충전기는 미터 데이터를 동일한 _timestamp_ 를 사용하여 여러 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>) 메시지로 분할할 수 있습니다. |{nbsp}
|E02.FR.13 |충전 상태가 변경되는 경우
  |충전기는 chargingState 요소를 포함하여 <<transaction_event_request,TransactionEventRequest>>를 보내야 합니다. |{nbsp}
|E02.FR.14 |<<sampled_data_sign_readings,`SampledDataSignReadings`>>는 _true_ 입니다.
  |충전기는 서명된 미터 값을 검색하여 sampledValues의 _signedMeterValue_ 필드에 넣어야 합니다. |{nbsp}
|E02.FR.15 |<<transaction_event_request,TransactionEventRequest>>를 보낼 때
  |충전기는 <<trigger_reason_enum_type,triggerReason>>을 설정하여 CSMS에 이벤트를 트리거한 원인을 알려야 합니다. +
  사용할 이유는 <<trigger_reason_enum_type,TriggerReasonEnumType>>의 설명에 설명되어 있습니다. |{nbsp}
|E02.FR.16 |트랜잭션이 시작된 후
  |충전기는 <<trigger_reason_enum_type,trigger event>>가 발생할 때 트랜잭션 중에 추가 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>) 메시지를 보낼 수 있습니다.(MAY) |{nbsp}
|E02.FR.17 |_TriggerReasonEnumType_ 에 나열된 트랜잭션 관련 트리거 이벤트가 발생하고 트랜잭션이 진행 중인 경우.
  |충전기는 발생한 이벤트에 해당하는 _triggerReason_ 과 함께 <<transaction_event_request,TransactionEventRequest>>를 보내야 합니다.
    |두 개의 트리거 이유가 겹치는 경우 더 구체적인 사유를 사용해야 합니다. 예를 들어 케이블이 연결된 경우 _ChargingStateChanged_ 가 아닌 triggerReason = _CablePluggedIn_ 을 사용해야 합니다. 하지만 각 트리거에 대해 별도의 <<transaction_event_request,TransactionEventRequest>> 메시지를 보내는 것이 금지된 것은 아닙니다.
|E02.FR.18 |에너지 전송이 시작될 때 AND 충전기가 사용된 단계 수를 보고할 수 있는 경우
  |충전기는 _numberOfPhasesUsed_ 필드를 사용하여 사용된 단계 수를 제공해야 합니다. |{nbsp}
|E02.FR.19 |E02.FR.18 AND +
  트랜잭션 중에 사용된 단계 수가 변경되는 경우
    |충전기는 _numberOfPhasesUsed_ 필드를 사용하여 조정된 사용된 단계 수를 제공해야 합니다. |{nbsp}
|E02.FR.20 |트랜잭션이 이전에 인증되지 않았고 AND +
  충전기가 _idToken_ 을 인증하여 충전을 시작하는 경우
    |충전기의 다음 <<transaction_event_request,TransactionEventRequest>>는 _idToken_ 을 포함하고 _triggerReason_ = `Authorized` 를 가져야 합니다.
      |인증이 성공하지 못하면 이 이벤트가 실행 중인 트랜잭션에 영향을 미치지 않으므로 TransactionEventRequest가 전송되지 않습니다. (충전 중지를 위한 인증은 E07 참조).
|E02.FR.21 | <<transaction_event_request,TransactionEventRequest>>에서 미터 데이터를 보내도록 구성된 경우(<<transaction_event_enum_type,eventType = Started>>), 다음을 참조하세요: <<metervalues_configuration,Meter Values - Configuration>> +
  AND +
  EVSE는 트랜잭션 시작 시 알려져있지 않음
    |충전기는 충전이 시작될 때 발생하는 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>)에서 _context_ = `Transaction.Begin` 인 선택적 meterValue 필드에 _eventType_ = `Started` 에 대한 측정값을 추가해야 합니다. |{nbsp}
|===

<<<

[[e03_start_transaction_idtoken_first]]
=== E03 - Start Transaction - IdToken First

.E03 - 트랜잭션 시작 - IdToken 먼저
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|번호 |유형 |설명

|1 |이름 |트랜잭션 시작 - IdToken 먼저
|2 |ID |E03
|{nbsp} d|_기능 블록_ |E. 트랜잭션
|3 |목표 |EV 운전자가 충전기에서 IdToken을 먼저 제시하여 트랜잭션을 시작할 수 있도록 합니다.
|4 |설명 |이 사용 사례는 EV 운전자가 케이블을 연결해서 트랜잭션이 시작되기 전에 IdToken을 제시하여 먼저 인증되는 방법을 다룹니다.
|{nbsp} d|_Actors_ |충전기, CSMS, EV 운전자
|{nbsp} d|_시나리오 설명_
  |**1.** EV 운전자가 충전기 및/또는 CSMS에서 인증됩니다. +
  **2.** 충전기는 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Started>>)를 보내 트랜잭션이 시작되었음을 CSMS에 알립니다. +
  **3.** EV 운전자가 충전기에 충전 케이블을 연결합니다. +
  **4.** 충전기는 <<status_notification_request,StatusNotificationRequest>>를 CSMS로 보내고 <<status_notification_response,StatusNotificationResponse>>를 수신합니다. +
  **5.** 충전기는 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>, <<charging_state_enum_type,chargingState = Charging>>)를 전송하여 CSMS에 EV가 충전을 시작했다고 알립니다. +
  **6.** CSMS는 <<transaction_event_response,TransactionEventResponse>>로 응답하여 트랜잭션을 수락합니다.
|5 |필수 조건 |케이블 연결보다 먼저 IdToken이 제공됩니다.
|6 |사후 조건
  |**성공한 사후 조건:** +
  트랜잭션이 시작되고 <<charging_state_enum_type,ChargingState>>가 _Charging_ +
  **실패 사후 조건:** +
  트랜잭션이 시작되지 않음
|===

.시퀀스 다이어그램: 트랜잭션 시작 - 먼저 IdToken
image::part2/images/figure_46.svg[시퀀스 다이어그램: 트랜잭션 시작 - 먼저 IdToken]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7 |오류 처리 |n/a
|8 |참고 |CSMS가 수신한 <<transaction_event_request,TransactionEventRequest>> 메시지에 포함된 데이터에 적합성 테스트를 적용할 가능성이 있습니다. 이러한 테스트의 결과는 CSMS가 <<transaction_event_response,TransactionEventResponse>>를 응답하지 않도록 해서는 안 됩니다. 그렇지 않으면 충전기가 <<e12_inform_csms_of_an_offline_occurred_transaction,E12 - Transaction-related message not accepted by CSMS>>에 지정된 대로 동일한 메시지를 다시 시도합니다.

  위의 시나리오 설명과 시퀀스 다이어그램은 시작 트랜잭션에 대한 구성 변수가 다음과 같이 구성된 것을 기반으로 합니다. +
  <<tx_start_point,`TxStartPoint`>>: <<tx_start_stop_point_values,Authorized, DataSigned, PowerPathClosed, EnergyTransfer>> +
  이 유즈케이스는 다른 구성에서도 유효하지만, 그 경우 트랜잭션이 다른 시점에서 시작/종료될 수 있으며, 이는 메시지가 전송되는 순서에 영향을 미칠 수 있습니다. 자세한 내용은 사용 사례를 참조하세요: <<e01_start_transaction_options,E01 - Start Transaction options>>.
|===

==== E03 - Start Transaction - IdToken First - Requirements

.E03 - 요구 사항
[cols="^.^2,<.^6,<.^6,<.^4",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID |전제 조건 |요구 사항 정의 |참고

|E03.FR.01 |IdToken 정보가 알려진 경우.
|다음 <<transaction_event_request,TransactionEventRequest>>에는 <<id_token_type,IdTokenType>> 정보가 포함되어야 합니다. |{nbsp}
|E03.FR.02 |E03.FR.01 |CSMS는 인증 상태를 포함하는 <<transaction_event_response,TransactionEventResponse>>를 보내야 합니다. |{nbsp}
|E03.FR.03 |이 트랜잭션에서 특정 IdToken에 대한 예약을 종료합니다.
  |다음 <<transaction_event_request,TransactionEventRequest>>는 reservationId를 포함해야 합니다.
    |<<h_reservation,H. Reservation>>을 참조하세요.
|E03.FR.05 |EV 운전자가 <<ev_connection_timeout,`EVConnectionTimeOut`>> 구성 변수에서 설정한 시간 초과 전에 충전 케이블을 연결하지 않은 경우 및 TxStopPoint에 `ParkingBayOccupancy` 가 포함되지 않은 경우
  |충전기는 트랜잭션을 종료하고 <<transaction_event_request,TransactionEventRequest>>(eventType = Ended, ceaseReason = Timeout, _triggerReason_ = `EVConnectionTimeout`)를 CSMS로 보내야 합니다.
    |이 요구 사항은 <<ev_connection_timeout,`EVConnectionTimeOut`>>이 트리거될 때 트랜잭션이 종료되도록 하는 추가 안전 조치입니다. 그러나 합리적인 TxStartPoint/TxStopPoint 조합이 구성되었는지 확인하는것은 CSMS에 달려있습니다. 예: Authorized가 TxStartPoint로 사용되는 경우 TxStopPoint로도 사용해야 합니다.
|E03.FR.06 | <<transaction_event_request,TransactionEventRequest>>를 생성해야 하는 경우
  |충전기는 <<sequence_number_generation,Sequence Number Generation>>에 지정된 대로 메시지의 *seqNo* 필드를 설정해야 합니다.
    |이렇게 하면 CSMS가 트랜잭션 정보의 완전성을 추적할 수 있습니다.
|E03.FR.07 |<<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Started>>)에서 미터 데이터를 보내도록 구성된 경우 다음을 참조하세요. <<metervalues_configuration,Meter Values - Configuration>> +
  AND +
  EVSE는 트랜잭션 시작 시 알려져 있습니다.
    |충전기는 구성된 측정값을 CSMS로 전송된 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Started>>)에서 _context_ = `Transaction.Begin` 인 선택적 meterValue 필드에 추가하여 트랜잭션 중에 더 자세한 정보를 제공해야 합니다. |{nbsp}
|E03.FR.08 | <<transaction_event_request,TransactionEventRequest>>에서 미터 데이터를 보내도록 구성된 경우(<<transaction_event_enum_type,eventType = Updated>>), 다음을 참조하세요: <<metervalues_configuration,Meter Values - Configuration>>
  |충전기는 구성된 측정값을 CSMS로 전송된 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>)의 선택적 MeterValue 필드에 추가하여 트랜잭션 중에 더 자세한 정보를 제공해야 합니다. |{nbsp}
|E03.FR.09 |E03.FR.08 +
  AND +
  <<transaction_event_request,TransactionEventRequest>>에 대한 미터 데이터 양이 너무 많은 경우(<<transaction_event_enum_type,eventType = Updated>>)
    |충전기는 동일한 _timestamp_ 를 사용하여 여러 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>) 메시지로 미터 데이터를 분할할 수 있습니다. |{nbsp}
|E03.FR.10 |<<sampled_data_sign_readings,`SampledDataSignReadings`>>는 _true_ 입니다.
  |충전기는 서명된 미터 값을 검색하여 sampledValues의 _signedMeterValue_ 필드에 넣어야 합니다. |{nbsp}
|E03.FR.11 |<<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Started>>)에서 미터 데이터를 보내도록 구성된 경우 다음을 참조하세요. <<metervalues_configuration,Meter Values - Configuration>> +
  AND +
  트랜잭션 시작 시 EVSE가 알려지지 않음
    |충전기는 충전이 시작될 때 발생하는 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>)에서 _context_ = `Transaction.Begin` 인 선택적 meterValue 필드에 _eventType_ = `Started` 에 대한 측정량을 추가해야 합니다. |{nbsp}
|E03.FR.12 |_TriggerReasonEnumType_ 에 나열된 트랜잭션 관련 트리거 이벤트가 발생하고 트랜잭션이 진행 중인 경우
  |충전기는 발생한 이벤트에 해당하는 triggerReason과 함께 <<transaction_event_request,TransactionEventRequest>>를 보내야 합니다.
    |두 개의 트리거 사유가 겹치는 경우 더 구체적인 사유를 사용해야 합니다. 예를 들어 케이블이 꽂혀 있는 경우 _ChargingStateChanged_ 가 아닌 triggerReason = _CablePluggedIn_ 을 사용해야 합니다. 두 이벤트가 동시에 발생하는 경우 두 개의 별도 <<transaction_event_request,TransactionEventRequest>> 메시지를 사용하여 전송해야 합니다. 이는 문제가 발생할 때 정보 손실을 방지하기 위한 것입니다.
|E03.FR.13 |에너지 전송이 시작될 때 AND +
  충전기가 사용된 페이즈 수를 보고할 수 있는 경우
    |충전기는 _numberOfPhasesUsed_ 필드를 사용하여 사용된 페이즈 수를 제공해야 합니다. |{nbsp}
|E03.FR.14 |E03.FR.13 AND +
  트랜잭션 중에 사용된 페이즈 수가 변경되는 경우
    |충전기는 _numberOfPhasesUsed_ 필드를 사용하여 조정된 사용된 페이즈 수를 제공해야 합니다. |{nbsp}
|E03.FR.15 |EV 운전자가 구성 변수에서 설정한 시간 초과 전에 충전 케이블을 연결하지 않은 경우: +
  <<ev_connection_timeout,`EVConnectionTimeOut`>> AND +
  TxStopPoint에 `ParkingBayOccupancy` 가 포함됨
    |충전기는 트랜잭션을 인증 취소하고 <<transaction_event_request,TransactionEventRequest>> (_triggerReason_ = `EVConnectionTimeout`)를 CSMS로 보내야 합니다.
      |운전자가 주차장을 떠나면 트랜잭션이 정상적으로 종료됩니다.
|===

<<<

[[e04_transaction_started_while_charging_station_is_offline]]
=== E04 - Transaction started while Charging Station is offline

.E04 - 충전기가 오프라인인 동안 트랜잭션이 시작됨.
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|번호 |유형 |설명

|1 |이름 |충전기가 오프라인일 동안 트랜잭션이 시작됨.
|2 |ID |E04
|{nbsp} d|_기능 블록_ |E. 트랜잭션
|3 |목표 |충전기가 _offline_ 인 동안 EV 운전자가 트랜잭션을 시작할 수 있도록 합니다.
|4 |설명 |이 사용 사례는 충전기가 _offline_ 일 동안 로컬 인증 목록 또는 인증 캐시를 사용하여 트랜잭션을 시작할 수 있는 방법을 다룹니다.
|{nbsp} d|_Actors_ |충전기, CSMS, EV 운전자
|{nbsp} d|_시나리오 설명_
  |**1.** 트랜잭션이 시작됩니다. +
  **2.** <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Started>>)가 충전기에 의해 저장/대기됩니다. +
  **3.** 충전기와 CSMS 간의 연결이 복구됩니다. +
  **4.** 충전기가 대기 중인 메시지를 보내기 시작합니다. +
  **5.** 저장된 <<transaction_event_request,TransactionEventRequest>>가 전송되어 CSMS에 시작된 트랜잭션에 대해 알립니다.
|{nbsp} d|_대체 시나리오_ |<<e10_when_cable_disconnected_on_ev_side_suspended_transaction,E10 - Connection Loss During Transaction>>
|5 |필수 조건
  |충전기가 _offline_ 입니다. +
  EV 운전자가 충전기에서 오프라인/로컬로 인증되었습니다.
|6 |사후 조건
  |**성공한 사후 조건:** +
  <<transaction_event_request,TransactionEventRequest>>가 CSMS에 의해 응답되었고 충전기 대기열에서 제거되었습니다. +
  **실패 사후 조건:** +
  <<transaction_event_request,TransactionEventRequest>>가 CSMS에 의해 응답되지 않았고 충전기 대기열에 남아 있습니다.
|===

.시퀀스 다이어그램: 충전기가 오프라인일 때 트랜잭션이 시작됨
image::part2/images/figure_47.svg[시퀀스 다이어그램: 충전기가 오프라인일 때 트랜잭션이 시작됨]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7 |오류 처리 |n/a
|8 |참고
  |위의 시나리오 설명과 시퀀스 다이어그램은 시작 트랜잭션에 대한 구성 변수가 다음과 같이 구성된 것을 기반으로 합니다. +
  <<tx_start_point,`TxStartPoint`>>: <<tx_start_stop_point_values,Authorized, DataSigned, PowerPathClosed, EnergyTransfer>> +
  이 유즈케이스는 다른 구성에서도 유효하지만, 그 경우 트랜잭션이 다른 시점에서 시작/종료될 수 있으며, 이는 메시지가 전송되는 순서에 영향을 미칠 수 있습니다. 자세한 내용은 사용 사례를 참조하세요. <<e01_start_transaction_options,E01 - Start Transaction options>>.
|===

==== E04 - Transaction started while Charging Station is offline -Requirements

.E04 - 요구 사항
[cols="^.^2,<.^6,<.^6,<.^4",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID |전제 조건 |요구 사항 정의 |참고

|E04.FR.01 |_offline_ 일 때. |충전기는 모든 <<transaction_event_request,TransactionEventRequest>> 메시지를 큐에 넣어야 합니다. |{nbsp}
|E04.FR.02 |연결이 복구된 후.
  |충전기는 큐에 넣은 <<transaction_event_request,TransactionEventRequest>> 메시지를 보내야 합니다. |{nbsp}
|E04.FR.03 |E04.FR.02
  |플래그: "오프라인"은 충전기가 오프라인 상태일 때 발생한 모든 <<transaction_event_request,TransactionEventRequest>>에 대해 TRUE로 설정되어야 합니다. |{nbsp}
|E04.FR.04 |<<transaction_event_request,TransactionEventRequest>>를 생성해야 하는 경우
  |충전기는 <<sequence_number_generation,Sequence Number Generation>>에 지정된 대로 메시지의 *seqNo* 필드를 설정해야 합니다.
    |이렇게 하면 CSMS가 트랜잭션 정보의 완전성을 추적할 수 있습니다.
|E04.FR.05 |<<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Started>>)에서 미터 데이터를 보내도록 구성된 경우 다음을 참조하세요. <<metervalues_configuration,Meter Values - Configuration>> +
  AND +
  EVSE는 트랜잭션 시작 시 알려져 있습니다.
    |충전기는 구성된 측정값을 CSMS로 전송된 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Started>>)에서 _context_ = `Transaction.Begin` 인 선택적 meterValue 필드에 추가하여 트랜잭션 중에 더 자세한 정보를 제공해야 합니다. |{nbsp}
|E04.FR.06 | <<transaction_event_request,TransactionEventRequest>>에서 미터 데이터를 보내도록 구성된 경우(<<transaction_event_enum_type,eventType = Updated>>), 다음을 참조하세요: <<metervalues_configuration,Meter Values - Configuration>>
  |충전기는 구성된 측정값을 CSMS로 전송된 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>)의 선택적 meterValue 필드에 추가하여 트랜잭션 중에 더 자세한 정보를 제공해야 합니다. |{nbsp}
|E04.FR.07 |E04.FR.06 +
  AND +
  _Offline_ +
  AND +
  충전기의 메모리가 부족합니다.
    |충전기는 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>) 메시지를 삭제할 수 있습니다. |{nbsp}
|E04.FR.08 |E04.FR.07
  |<<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>) 메시지를 삭제할 때 충전기는 중간 메시지를 먼저 삭제해야 하며(첫 번째 메시지, 세 번째 메시지, 다섯 번째 메시지 등), 처음부터 메시지를 삭제하거나 큐에 메시지를 추가하는 것을 중단해서는 안 됩니다. |{nbsp}
|E04.FR.09 |E04.FR.06 +
  AND +
  <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>)에 대한 미터 데이터 양이 너무 많은 경우. |{nbsp}
    |충전기는 미터 데이터를 같은 _timestamp_ 를 가진 여러 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>) 메시지로 분할할 수 있습니다. |{nbsp}
|E04.FR.10 |<<sampled_data_sign_readings,`SampledDataSignReadings`>>는 _true_ 입니다.
  |충전기는 서명된 미터 값을 검색하여 sampledValues의 _signedMeterValue_ 필드에 넣어야 합니다. |{nbsp}
|E04.FR.11 |<<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Started>>)에서 미터 데이터를 보내도록 구성된 경우 다음을 참조하세요. <<metervalues_configuration,Meter Values - Configuration>> +
  AND +
  EVSE는 트랜잭션 시작 시 알려져있지 않음
    |충전기는 충전이 시작될 때 발생하는 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>)에서 _context_ = `Transaction.Begin` 인 선택적 meterValue 필드에 _eventType_ = `Started` 에 대한 측정값을 추가해야 합니다.
|===

<<<

[[e05_start_transaction_id_not_accepted]]
=== E05 - Start Transaction - Id not Accepted

.E05 - Start Transaction - Id not Accepted
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|번호 |유형 |설명

|1 |이름 |트랜잭션 시작 - ID가 허용되지 않음
|2 |ID |E05
|{nbsp} d|_기능 블록_ |E. 트랜잭션
|3 |목표 |충전기가 IdToken에 충전을 허용하지 않는 AuthorizationStatus가 있는 경우 트랜잭션을 일시 중단할 수 있도록 합니다.
|4 |설명
  |이 사용 사례는 CSMS에서 IdToken을 수락하지 않는 동안 충전기가 트랜잭션을 시작하려는 방법을 다룹니다. +
  식별자가 오래된 정보를 사용하여 충전기에서 로컬로 인증되었을 수 있으므로 CSMS는 IdTokenType이 포함된 모든 <<transaction_event_request,TransactionEventRequest>> 메시지에서 <<id_token_type,IdTokenType>>을 검증해야 합니다. *idTokenInfo* 필드 *status* 가 *Accepted* 가 아닌 <<transaction_event_response,TransactionEventResponse>> 메시지를 수신하면 충전기는 EV에 대한 에너지 공급을 중단해야 합니다.
|{nbsp} d|_Actors_ |충전기, CSMS
|{nbsp} d|_시나리오 설명_
  |**1.** 충전기는 EV 운전자가 제공한 IdToken이 포함된 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Started>>)를 보냅니다. +
  **2.** CSMS는 충전을 허용하지 않는 AuthorizationStatus와 함께 <<transaction_event_response,TransactionEventResponse>>로 응답합니다. +
  **3.** 충전기는 에너지 제공을 중단합니다. (고려: <<max_energy_on_invalid_id,`MaxEnergyOnInvalidId`>>, 지원되는 경우) +
  **4.** 충전기는 trigger = _Deauthorized_ 와 충전 상태 _SuspendedEVSE_ 와 함께 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>)를 보내고 CSMS에서 <<transaction_event_response,TransactionEventResponse>>를 수신합니다.
|5 |필수 조건
  |EV 운전자가 충전기에서 오프라인/로컬로 인증되었습니다. +
  CSMS에서 IdToken을 충전할 수 없습니다.
|6 |사후 조건
  |**성공한 사후 조건:** +
  트랜잭션은 계속 진행되고 케이블은 잠긴 상태로 유지되지만 에너지는 전달되지 않습니다.

  **실패 사후 조건:** +
  n/a
|===

.시퀀스 다이어그램: 시작 트랜잭션 - ID가 허용되지 않음
image::part2/images/figure_48.svg[시퀀스 다이어그램: 시작 트랜잭션 - ID가 허용되지 않음]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7 |오류 처리 |n/a
|8 |참고
  |위의 시나리오 설명과 시퀀스 다이어그램은 시작 및 중지 트랜잭션에 대한 구성 변수가 다음과 같이 구성된 것을 기반으로 합니다. +
  <<tx_start_point,`TxStartPoint`>>: <<tx_start_stop_point_values,Authorized, DataSigned, PowerPathClosed, EnergyTransfer>> +
  <<tx_stop_point,`TxStopPoint`>>: <<tx_start_stop_point_values,ParkingBayOccupancy, EVConnected>> +
  이 유즈케이스는 다른 구성에서도 유효하지만, 그 경우 트랜잭션이 다른 시점에서 시작/종료될 수 있으며, 이는 메시지가 전송되는 순서에 영향을 미칠 수 있습니다. 자세한 내용은 사용 사례를 참조하세요: <<e01_start_transaction_options,E01 - Start Transaction options>> 및 <<e06_stop_transaction_options,E06 - Stop Transaction options>>.
|===

==== E05 - Start Transaction - Id not Accepted - Requirements

.E05 - Requirements
[cols="^.^2,<.^6,<.^6,<.^4",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID |전제 조건 |요구 사항 정의 |참고

|E05.FR.01 |{nbsp}
  |CSMS는 <<transaction_event_request,TransactionEventRequest>> 메시지의 식별자 유효성을 확인해야 합니다.
    |식별자는 오래된 정보를 사용하여 충전기에서 로컬로 인증되었을 수 있습니다. 예를 들어 식별자는 충전기의 인증 캐시에 추가된 이후 차단되었을 수 있습니다.
|E05.FR.02 |E05.FR.01 그리고 +
  <<transaction_event_response,TransactionEventResponse>>의 인증 상태가 _Accepted_ 가 아닙니다. 그리고 +
  트랜잭션이 아직 진행 중입니다. 그리고 +
  <<stop_tx_on_invalid_id,`StopTxOnInvalidId`>>가 _false_ 로 설정되었습니다. +
  그리고 +
  <<max_energy_on_invalid_id,`MaxEnergyOnInvalidId`>>가 구현되지 않았거나 초과되었습니다. <<tx_stop_point,`TxStopPoint`>>에는 다음이 포함되지 않습니다. <<tx_start_stop_point_values,EnergyTransfer>>
    |충전기는 EV로의 에너지 공급을 즉시 중단하고 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>)를 보내야 하며, _triggerReason_ 은 _ChargingStateChanged_ 로, chargingState는 _SuspendedEVSE_ 로 설정해야 합니다.
      |트랜잭션은 deauthorized되지 않지만, `MaxEnergyOnInvalid` 가 초과되었거나 설정되지 않았기 때문에 에너지 전송이 중단됩니다. `TxStopPoint` 에 `EnergyTransfer` 가 포함되어 있으면 트랜잭션이 종료됩니다.
|E05.FR.03 |E05.FR.01 AND +
  <<transaction_event_response,TransactionEventResponse>>의 인증 상태가 _Accepted_ 가 아닙니다 AND +
  트랜잭션이 아직 진행 중입니다 AND +
  <<stop_tx_on_invalid_id,`StopTxOnInvalidId`>>가 _false_ 로 설정되었습니다 +
  AND +
  <<max_energy_on_invalid_id,`MaxEnergyOnInvalidId`>>가 설정되었고 초과되지 않았습니다.
    |EV에 대한 에너지 전달은 <<max_energy_on_invalid_id,`MaxEnergyOnInvalidId`>>에 지정된 에너지 양에 도달할 때까지 허용되어야 합니다. |{nbsp}
|E05.FR.04 |<<transaction_event_request,TransactionEventRequest>>를 생성해야 하는 경우
  |충전기는 <<sequence_number_generation,Sequence Number Generation>>에 지정된 대로 메시지의 **seqNo** 필드를 설정해야 합니다.
    |이렇게 하면 CSMS가 트랜잭션 정보의 완전성을 추적할 수 있습니다.
|E05.FR.05 | <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Started>>)에서 미터 데이터를 보내도록 구성된 경우 다음을 참조하세요. <<metervalues_configuration,Meter Values - Configuration>> AND +
  EVSE는 트랜잭션 시작 시 알려져 있습니다.
    |충전기는 구성된 측정값을 CSMS로 전송하여 트랜잭션 중에 더 자세한 정보를 제공하기 위해 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Started>>)에서 _context_ = `Transaction.Begin` 인 선택적 meterValue 필드에 추가해야 합니다. |{nbsp}
|E05.FR.06 |<<sampled_data_sign_readings,`SampledDataSignReadings`>>는 _true_ 입니다.
  |충전기는 서명된 미터 값을 검색하여 sampledValues의 _signedMeterValue_ 필드에 넣어야 합니다. |{nbsp}
|E05.FR.08 | <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Started>>)에서 미터 데이터를 보내도록 구성된 경우 다음을 참조하세요. <<metervalues_configuration,Meter Values - Configuration>> AND +
  EVSE는 트랜잭션 시작 시 알 수 없음
    |충전기는 충전이 시작될 때 발생하는 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>)에서 _context_ = `Transaction.Begin` 인 선택적 meterValue 필드에 _eventType_ = `Started` 에 대한 측정량을 추가해야 합니다. |{nbsp}
|E05.FR.09 |E05.FR.01 AND +
  <<transaction_event_response,TransactionEventResponse>>의 인증 상태가 _Accepted_ 가 아닙니다 AND +
  트랜잭션이 아직 진행 중입니다 AND +
  <<stop_tx_on_invalid_id,`StopTxOnInvalidId`>>가 _true_ 입니다 AND +
  <<tx_stop_point,`TxStopPoint`>>에는 다음이 포함되지 않습니다. (<<tx_start_stop_point_values,Authorized>> 또는 <<tx_start_stop_point_values,PowerPathClosed>> 또는 <<tx_start_stop_point_values,EnergyTransfer>>)
    |충전기는 에너지 전송을 중지하고 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>) _triggerReason_ 을 _Deauthorized_ 로 설정하고 동일 또는 다음 <<transaction_event_request,TransactionEventRequest>> 보고서에서 _chargingState_ 를 바람직하게는 _EVConnected_ 또는 대안적으로 _SuspendedEVSE_ 로 설정합니다.
      |충전기에서 충전 상태의 물리적 변경이 트리거 _Deauthorized_ 보다 몇 초 또는 밀리초 늦게 발생하는 경우 _chargingState_ 변경은 _triggerReason_ = _ChargingStateChanged_ 로 별도로 보고될 수 있습니다. 이 상황에서 _EVConnected_ 가 뒤따르지 않는 충전 상태 _SuspendedEVSE_ 를 사용하는 것은 다음 OCPP 릴리스에서 더 이상 사용되지 않습니다.
|E05.FR.10 |E05.FR.01 AND +
  <<transaction_event_response,TransactionEventResponse>>의 인증 상태가 _Accepted_ 가 아닙니다 AND +
  트랜잭션이 아직 진행 중입니다 AND +
  <<stop_tx_on_invalid_id,`StopTxOnInvalidId`>>가 _true_ 입니다 AND +
  <<tx_stop_point,`TxStopPoint`>>에는 다음이 포함됩니다. (<<tx_start_stop_point_values,Authorized>> 또는 <<tx_start_stop_point_values,PowerPathClosed>> 또는 <<tx_start_stop_point_values,EnergyTransfer>>)
    |충전기는 트랜잭션을 중지하고 <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Ended>>)를 다음과 함께 전송해야 합니다. _triggerReason_ 을 _Deauthorized_ 로 설정하고 <<reason_enum_type,stoppedReason>>을 _DeAuthorized_ 로 설정합니다. |{nbsp}
|E05.FR.11 |E05.FR.10 AND +
  충전기에서 충전 케이블을 잠글 수 있는 경우
    |충전기는 소유자가 식별자를 제시할 때까지 충전 케이블을 잠근 상태로 유지해야 합니다. |{nbsp}
|===

<<<

[[e06_stop_transaction_options]]
=== E06 - Stop Transaction options

.E06 - 트랜잭션 중지
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|번호 |유형 |설명

|1 |이름 |트랜잭션 중지 옵션
|2 |ID |E06
|{nbsp} d|_기능 블록_ |E. 트랜잭션
|3 |목표 |충전기에서 트랜잭션이 중지되었음을 CSMS에 알립니다.
|4 |설명
  |이 사용 사례는 충전기의 구성에 따라 충전기가 트랜잭션을 중지할 수 있는 다양한 순간(<<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Ended>>) 전송)을 설명합니다.
|5 d|_Actors_ |충전기, CSMS, EV 운전자
d|S1 d|_시나리오 목표_ |주차장 점유 감지기가 더 이상 EV를 감지하지 못할 때 트랜잭션을 중지합니다.
|{nbsp} d|_시나리오 설명_
  |**1.** 충전기 주차장 점유 감지기가 EV 감지를 멈춥니다. +
  **2.** 충전기는 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>)를 보내 CSMS에 종료된 트랜잭션에 대해 알립니다. +
  **3.** CSMS는 <<transaction_event_response,TransactionEventResponse>>로 응답하여 <<transaction_event_request,TransactionEventRequest>>가 수신되었음을 확인합니다.
|{nbsp} |필수 조건
  |트랜잭션이 진행 중입니다. +
  구성 변수: <<tx_stop_point,`TxStopPoint`>>에는 다음이 포함됩니다. <<tx_start_stop_point_values,ParkingBayOccupancy>>
|{nbsp} |사후 조건
  |**성공한 사후 조건:** +
  트랜잭션이 종료되고 CSMS에 _성공적으로_ 알립니다.

  **실패 사후 조건:** +
  트랜잭션이 아직 진행 중입니다. _또는_ +
  CSMS에 정보가 _제공되지 않았습니다_.
|===

.Sequence Diagram: Stop Transaction options - ParkingBayOccupancy
image::part2/images/figure_49.svg[Sequence Diagram: Stop Transaction options - ParkingBayOccupancy]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|S2 d|_시나리오 목표_ |충전기와 EV 간 통신이 끊어졌을 때 트랜잭션을 중단합니다. (예: 케이블이 뽑힘)

|{nbsp} d|_시나리오 설명_
  |**1.** 충전기와 EV 간 통신이 끊어졌습니다(충전 케이블이 뽑힘). +
  **2.** 충전기 측에서 충전 케이블이 뽑힌 경우: <<status_notification_request,StatusNotificationRequest>>를 CSMS로 보내 <<connector_status_enum_type,_Available_>>이 된 커넥터에 대해 알립니다. +
  **3.** 충전기는 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>)를 보내 CSMS에 종료된 트랜잭션을 알립니다. +
  **4.** CSMS는 <<transaction_event_response,TransactionEventResponse>>로 응답하여 <<transaction_event_request,TransactionEventRequest>>가 수신되었음을 확인합니다.
|{nbsp} |필수 조건
  |트랜잭션이 진행 중입니다. +
  구성 변수: <<tx_stop_point,`TxStopPoint`>>에는 다음이 포함됩니다. <<tx_start_stop_point_values,EVConnected>>
|{nbsp} |사후 조건
  |**성공한 사후 조건:** +
  트랜잭션이 종료되고 CSMS에 _성공적으로_ 알립니다.

  **실패한 사후 조건:** +
  트랜잭션이 여전히 진행 중입니다. _또는_ +
  CSMS에 _알리지 않습니다_.
|===

.시퀀스 다이어그램: 트랜잭션 중지 옵션 - EVConnected
image::part2/images/figure_50.svg[시퀀스 다이어그램: 트랜잭션 중지 옵션 - EVConnected]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|S3 d|_시나리오 목표_ |운전자가 더 이상 권한이 없을 때 트랜잭션을 중지합니다.

|{nbsp} d|_시나리오 설명_
  |**1.** 충전기에서 <<transaction_event_request,TransactionEventRequest>>를 CSMS로 보냅니다. +
  **2.** <<transaction_event_response,TransactionEventResponse>>에서 잘못된 IdToken이 수신되었습니다. +
  **3.** 충전기는 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>)를 보내 CSMS에 종료된 트랜잭션에 대해 알립니다. +
  **4.** CSMS는 <<transaction_event_response,TransactionEventResponse>>로 응답하여 <<transaction_event_request,TransactionEventRequest>>가 수신되었음을 확인합니다.
|{nbsp} |필수 조건
  |트랜잭션이 진행 중입니다. +
  구성 변수: <<tx_stop_point,`TxStopPoint`>>에는 다음이 포함됩니다. <<tx_start_stop_point_values,Authorized>>
|{nbsp} |사후 조건
  |**성공한 사후 조건:** +
  트랜잭션이 종료되고 CSMS에 _성공적으로_ 알립니다.

  **실패 사후 조건:** +
  트랜잭션이 아직 진행 중입니다. _또는_ +
  CSMS에 정보가 _제공되지 않았습니다_.
|===

.Sequence Diagram: Stop Transaction options - Deauthorized
image::part2/images/figure_51.svg[Sequence Diagram: Stop Transaction options - Deauthorized]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|S5 d|_시나리오 목표_ s|EV 운전자가 더 이상 인증이 유효하지 않거나 EV가 연결 해제되면 트랜잭션을 중지합니다.

|{nbsp} d|_시나리오 설명_
  |**1.** 충전기가 EV에서 연결 해제되거나 EV 운전자의 인증이 더 이상 유효하지 않습니다. +
  **2.** 충전기가 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>)를 보내 CSMS에 종료된 트랜잭션을 알립니다. +
  **3.** CSMS가 <<transaction_event_response,TransactionEventResponse>>로 응답하여 <<transaction_event_request,TransactionEventRequest>>가 수신되었음을 확인합니다.
|{nbsp} |필수 조건
  |트랜잭션이 진행 중입니다. +
  구성 변수: <<tx_stop_point,`TxStopPoint`>>에는 다음이 포함됩니다. <<tx_start_stop_point_values,PowerPathClosed>>
|{nbsp} |사후 조건
  |**성공한 사후 조건:** +
  트랜잭션이 종료되고 CSMS에 _성공적으로_ 알립니다.

  **실패한 사후 조건:** +
  트랜잭션이 아직 진행 중입니다. _또는_ +
  CSMS에 _알리지 않습니다_.
|===

.시퀀스 다이어그램: 트랜잭션 중지 옵션 - PowerPathClosed
image::part2/images/figure_52.svg[시퀀스 다이어그램: 트랜잭션 중지 옵션 - PowerPathClosed]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|S6 d|_시나리오 목표_ |에너지 전송이 중지되면 트랜잭션을 중지합니다. 이는 EV가 에너지를 받지 않을 때(예: 배터리가 너무 뜨거울 때) 트랜잭션이 중지됨을 의미합니다.

|{nbsp} d|_시나리오 설명_
  |**1.** EV와 충전기 간의 에너지 전송이 중지됩니다(예: EV 충전이 중지됨). +
  **2.** 충전기는 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>)를 보내 CSMS에 종료된 트랜잭션에 대해 알립니다. +
  **3.** CSMS는 <<transaction_event_response,TransactionEventResponse>>로 응답하여 <<transaction_event_request,TransactionEventRequest>>가 수신되었음을 확인합니다.
|{nbsp} |필수 조건
  |트랜잭션이 진행 중입니다. +
  구성 변수: <<tx_stop_point,`TxStopPoint`>>에는 다음이 포함됩니다. <<tx_start_stop_point_values,EnergyTransfer>>
|{nbsp} |사후 조건
  |**성공한 사후 조건:** +
  트랜잭션이 종료되고 CSMS에 _성공적으로_ 알립니다.

  **실패 사후 조건:** +
  트랜잭션이 아직 진행 중입니다. _또는_ +
  CSMS에 정보가 _제공되지 않았습니다_.
|===

.시퀀스 다이어그램: 트랜잭션 중지 옵션 - EnergyTransfer
image::part2/images/figure_53.svg[시퀀스 다이어그램: 트랜잭션 중지 옵션 - EnergyTransfer]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|S7 d|_시나리오 목표_ |EV 운전자가 인증을 종료하면 트랜잭션 중지

|{nbsp} d|_시나리오 설명_
  |**1.** EV 운전자가 충전을 종료하기 위해 IdToken을 제시합니다. +
  **2.** 충전기는 <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Ended>>)를 보내 CSMS에 종료된 트랜잭션에 대해 알립니다. +
  **3.** CSMS는 <<transaction_event_response,TransactionEventResponse>>로 응답하여 <<transaction_event_request,TransactionEventRequest>>가 수신되었음을 확인합니다.
|{nbsp} |필수 조건
  |트랜잭션이 진행 중입니다. +
  구성 변수: <<tx_stop_point,`TxStopPoint`>>에는 <<tx_start_stop_point_values,Authorized>> (또는 <<tx_start_stop_point_values,PowerPathClosed>>)가 포함됩니다.
|{nbsp} |사후 조건
  |**성공적인 사후 조건:** +
  트랜잭션이 종료되고 CSMS에 _성공적으로_ 통보됩니다.

  **실패 사후 조건:** +
  트랜잭션이 아직 진행 중입니다. _또는_ +
  CSMS에 _통보되지_ 않습니다.
|===

.Sequence Diagram: Stop Transaction options - Authorized
image::part2/images/figure_54.svg[Sequence Diagram: Stop Transaction options - Authorized]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7 |오류 처리 |n/a
|8 |참고 |n/a
|===

==== E06 - Stop Transaction options - Requirements

.E06 - 요구 사항
.E01 - 요구 사항
[cols="^.^2,<.^5,<.^6",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID |전제 조건 |요구 사항 정의

|E06.FR.01 |<<tx_stop_point,`TxStopPoint`>>에는 다음이 포함됩니다. +
  <<tx_start_stop_point_values,ParkingBayOccupancy>> +
  AND +
  주차 베이 감지기가 더 이상 "EV"를 감지하지 못함
    |충전기는 트랜잭션을 중지하고 <<transaction_event_request,TransactionEventRequest>>를 보내야 합니다. (<<transaction_event_enum_type,eventType = Ended>>)를 CSMS로 전송합니다.
|E06.FR.02 |<<tx_stop_point,`TxStopPoint`>>에는 다음이 포함됩니다. <<tx_start_stop_point_values,EVConnected>> +
  AND +
  충전기와 EV 간의 연결이 끊어졌습니다.
    |충전기는 트랜잭션을 중지하고 <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Ended>>)를 CSMS로 전송해야 합니다.
|E06.FR.03 |<<tx_stop_point,`TxStopPoint`>>에는 다음이 포함됩니다. <<tx_start_stop_point_values,Authorized>> +
  AND +
  EV 운전자는 트랜잭션을 중지할 권한이 있습니다.
    |충전기는 트랜잭션을 중지하고 <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Ended>>)를 CSMS로 전송해야 합니다.
|E06.FR.04 |<<tx_stop_point,`TxStopPoint`>>에는 다음이 포함됩니다. <<tx_start_stop_point_values,Authorized>> +
  AND +
  CSMS는 <<transaction_event_response,TransactionEventResponse>>에서 유효하지 않은 idTokenInfo를 반환합니다.
    |충전기는 트랜잭션을 중지하고 <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Ended>>)를 CSMS로 전송해야 합니다.
|E06.FR.05 |<<tx_stop_point,`TxStopPoint`>>에는 다음이 포함됩니다. <<tx_start_stop_point_values,DataSigned>> +
  AND +
  충전기는 더 이상 서명된 미터 값을 얻을 수 없습니다.
    |충전기는 트랜잭션을 중지하고 <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Ended>>)를 CSMS로 보내야 합니다.
|E06.FR.06 |<<tx_stop_point,`TxStopPoint`>>에는 다음이 포함됩니다. +
  <<tx_start_stop_point_values,PowerPathClosed>> +
  AND ( +
  충전기와 EV 간의 연결이 끊어짐 +
  OR +
  인증이 종료되었거나 idToken이 인증 해제됨 )
    |충전기는 트랜잭션을 중지하고 <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Ended>>)를 CSMS로 보내야 합니다.
|E06.FR.07 |<<tx_stop_point,`TxStopPoint`>>에는 다음이 포함됩니다. <<tx_start_stop_point_values,EnergyTransfer>> +
  AND +
  에너지 전송이 중지됨
    |충전기는 트랜잭션을 중지하고 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>)를 CSMS로 전송해야 합니다.
|E06.FR.08 |충전기에서 EV 운전자가 트랜잭션을 종료하지 않은 경우
  |충전기는 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>)에 <<reason_enum_type,stoppedReason>> 요소를 포함해야 합니다. 사용할 이유는 <<reason_enum_type,reasonEnumType>>의 설명에 설명되어 있습니다.
|E06.FR.09 |충전기에서 EV 운전자가 트랜잭션을 종료한 경우(예: EV 운전자가 트랜잭션을 중단하기 위해 IdToken을 제시한 경우)
  |충전기는 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>)에서 <<reason_enum_type,stoppedReason>> 요소를 생략할 수 있습니다(따라서 CSMS는 생략 시 이유를 local로 해석할 수 있음).
|E06.FR.10 |정상적인 트랜잭션 종료의 일부로.
  |충전기는 케이블을 잠금 해제해야 합니다(영구적으로 연결되지 않은 경우).
|E06.FR.11 |<<transaction_event_request,TransactionEventRequest>>에서 미터 데이터를 보내도록 구성된 경우(<<transaction_event_enum_type,eventType = Ended>>), 다음을 참조하세요: <<metervalues_configuration,Meter Values - Configuration>>
  |충전기는 구성된 측정값을 선택적 _meterValue_ 필드에 _context_ = `Transaction.End` 로 추가하여 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>)에서 CSMS로 전송하여 트랜잭션 사용에 대한 자세한 정보를 제공해야 합니다.
|E06.FR.12 |E06.FR.11 +
  AND +
  충전기의 메모리가 부족합니다.
    |충전기는 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>) 메시지에서 미터 데이터를 삭제할 수 있습니다.
|E06.FR.13 |E06.FR.12
  |미터 데이터를 삭제할 때 충전기는 중간 값을 먼저 삭제해야 하며(첫 번째 값, 세 번째 값, 다섯 번째 등), 목록의 시작 부분에서 값을 삭제하거나 목록에 값을 추가하는 것을 중단해서는 안 됩니다.
|E06.FR.14 |<<transaction_event_request,TransactionEventRequest>>를 만들어야 하는 경우
  |충전기는 <<sequence_number_generation,Sequence Number Generation>>에 지정된 대로 메시지의 **seqNo** 필드를 설정해야 합니다.
|E06.FR.15 |<<transaction_event_request,TransactionEventRequest>>를 보낼 때
  |충전기는 <<trigger_reason_enum_type,triggerReason>>을 설정하여 CSMS에 이벤트를 트리거한 원인을 알려야 합니다. 사용할 이유는 <<trigger_reason_enum_type,TriggerReasonEnumType>>의 설명에 설명되어 있습니다.
|E06.FR.16 |트랜잭션이 비정상 오류 또는 오류 조건으로 인해 중단되었습니다.
  |충전기는 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>, <<trigger_reason_enum_type,triggerReason=AbnormalCondition>>)를 CSMS로 보내야 합니다.
|===

<<<

[[e07_transaction_locally_stopped_by_idtoken]]
=== E07 - Transaction locally stopped by IdToken

.E07 - IdToken에 의해 로컬에서 중단된 트랜잭션
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|번호 |유형 |설명

|1 |이름 |IdToken에 의해 로컬에서 중단된 트랜잭션
|2 |ID |E07
|{nbsp} d|_기능 블록_ |E. 트랜잭션
|3 |목표 |EV 운전자는 로컬에서 자신의 IdToken을 제시하여 진행 중인 트랜잭션을 중단하려고 합니다.
|4 |설명 |이 사용 사례는 EV 운전자가 충전기를 떠나려고 할 때 트랜잭션을 중단하는 방법을 다룹니다.
|{nbsp} d|_Actors_ |충전기, CSMS, EV 운전자
|{nbsp} d|_시나리오 설명_ +
  TxStopPoint = `Authorized` (또는 `PowerPathClosed`)
    |**1.** EV 운전자가 충전을 종료하기 위해 IdToken을 두 번째로 제시합니다. +
    **2.** 충전기가 에너지 전송을 중지하고 케이블이 영구적으로 연결되지 않은 경우 충전기가 케이블의 잠금을 해제합니다. +
    **3.** 충전기가 _triggerReason_ = `StopAuthorized` 및 _stoppedReason_ = `Local` 인 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>)를 보냅니다. +
    **4.** CSMS가 <<transaction_event_response,TransactionEventResponse>>로 응답합니다.
|{nbsp} d|대체 시나리오 +
  TxStopPoint = `Authorized` (또는 `PowerPathClosed`)
    |_충전을 중지할 때 트랜잭션이 triggerReason=ChargingStateChanged로 종료됨:_

    **1.** EV 운전자가 충전을 종료하기 위해 두 번째로 IdToken을 제시합니다. +
    **2.** 충전기가 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>)를 _triggerReason_ = `StopAuthorized` 로 전송합니다. +
    **3.** CSMS가 <<transaction_event_response,TransactionEventResponse>>로 응답합니다. +
    **4.** 충전기가 에너지 전송을 중지하고 케이블이 영구적으로 연결되지 않은 경우 충전기가 케이블의 잠금을 해제합니다. +
    **5.** 충전기는 <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Ended>>)를 _triggerReason_ = `ChargingStateChanged`, _transactionInfo.chargingState_ = `EVConnected` 로 전송합니다. +
    **6.** CSMS는 <<transaction_event_response,TransactionEventResponse>>로 응답합니다.
|5 |필수 조건 |트랜잭션이 진행 중입니다.
|6 |사후 조건
  |**성공 사후 조건:** +
  CSMS는 트랜잭션에 대한 모든 관련 정보를 수신했으며 충전기는 _Idle_ 상태입니다. +
  **실패 사후 조건:** +
  트랜잭션이 아직 진행 중이거나 충전기가 Idle 상태이며 CSMS에 전달해야 하는 트랜잭션에 대한 정보를 여전히 보유하고 있습니다.
|===

.시퀀스 다이어그램: 트랜잭션이 IdToken에 의해 로컬로 중단되었고 TransactionEventRequest는 TxStopPoint 구성에 의해 엄격하게 보고됨
image::part2/images/figure_55.svg[시퀀스 다이어그램: 트랜잭션이 IdToken에 의해 로컬로 중단되었고 TransactionEventRequest는 TxStopPoint 구성에 의해 엄격하게 보고됨]

.시퀀스 다이어그램: 트랜잭션이 IdToken에 의해 로컬로 중단됨, 지연된 TransactionEventRequest eventType = Ended for TxStopPoint = Authorized 또는 PowerPathClosed
image::part2/images/figure_56.svg[시퀀스 다이어그램: 트랜잭션이 IdToken에 의해 로컬로 중단됨, 지연된 TransactionEventRequest eventType = Ended for TxStopPoint = Authorized 또는 PowerPathClosed]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7 |오류 처리 |n/a
|8 |참고 |시나리오 설명은 <<tx_start_stop_point_values,Authorized>> 또는 <<tx_start_stop_point_values,PowerPathClosed>>를 포함하는 TxStopPoint를 기반으로 합니다. +
  시퀀스 다이어그램은 또한 alt-블록의 다른 TxStopPoint 값에 대한 동작을 보여줍니다.

  CSMS는 트랜잭션이 중지되는 것을 막을 수 없습니다.
|===

==== E07 - Transaction locally stopped by IdToken - Requirements

.E07 - 요구 사항
[cols="^.^2,<.^6,<.^6,<.^4",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID |전제 조건 |요구 사항 정의 |참고

|E07.FR.01 |인증된 트랜잭션 중에 <<id_token_type,idToken>>이 제시될 때 +
  AND +
  (a) 제시된 <<id_token_type,idToken>>이 인증을 시작한 <<id_token_type,idToken>>과 동일할 때 +
  또는 +
  (b) 제시된 <<id_token_type,idToken>>이 로컬 인증 목록 또는
  인증 캐시에 있고 인증이 유효하고 +
  인증을 시작한 IdToken과 동일한 GroupIdToken을 가질 때
    |충전기는 <<authorize_request,AuthorizeRequest>>를 먼저 보내지 않고 트랜잭션 인증을 종료해야 합니다.
      |인증을 시작한 <<id_token_type,idToken>>은 항상 인증을 종료하는 데 사용할 수 있습니다. 인증을 종료하면 에너지 공급이 종료됩니다. TxStopPoint에 따라 인증을 종료하면 트랜잭션도 종료될 수 있습니다. (C01.FR.03 참조)
|E07.FR.02 |E07.FR.01
  |충전기는 _triggerReason_ = `StopAuthorized` 인 <<transaction_event_request,TransactionEventRequest>>를 보내야 하며, 인증을 중지하는 데 사용된 _idToken_ 을 포함해야 합니다.
    |중지 _idToken_ 은 동일한 GroupId를 공유할 때 시작 _idToken_ 과 다를 수 있습니다.
|E07.FR.04 |충전기에서 EV 운전자의 요청에 따라 트랜잭션이 중지된 경우.
  |충전기는 _eventType_ = `Ended` 인 최종 TransactionEventRequest에서 <<reason_enum_type,stoppedReason>> 요소를 생략할 수 있습니다.(MAY)
    |예: EV 운전자가 트랜잭션을 중지하기 위해 IdToken을 제시하거나 (비상 정지가 아닌) "중지" 버튼을 눌렀습니다. 원격으로 중지하는 경우 사용 사례 F03을 참조하세요.
|E07.FR.05 |충전기에서 EV 운전자의 요청에 따라 트랜잭션이 중단된 경우.
  |충전기는 _eventType_ = `Ended` 인 최종 TransactionEventRequest에서 <<reason_enum_type,stoppedReason>> = `Local` 을 사용해야 합니다.(SHOULD)
    |예: EV 운전자가 트랜잭션을 중단하기 위해 IdToken을 제시하거나 (비상 정지가 아닌) "중지" 버튼을 눌렀습니다. 원격으로 중단하는 경우 사용 사례 F03을 참조하세요.
|E07.FR.06 |충전기에서 EV 운전자의 요청에 따라 중단되지 않고 트랜잭션이 중단된 경우.
  |충전기는 _eventType_ = `Ended` 인 최종 TransactionEventRequest에서 _stoppedReason_ 에 대해 <<reason_enum_type,ReasonEnumType>>에서 가장 적절한 값을 사용해야 합니다.
    |원격으로 중단(`Remote`), CSMS가 권한을 취소(`DeAuthorized`)하거나 EV를 분리(`EVDisconnected`)하는 것 외에, 대부분의 다른 이유는 기술적 오류나 에너지 제한과 관련이 있습니다.
|E07.FR.07 |정상적인 트랜잭션 종료의 일부로.
  |충전기는 케이블(영구적으로 연결되지 않은 경우)을 잠금 해제해야 합니다. |{nbsp}
|E07.FR.08 |<<transaction_event_request,TransactionEventRequest>>
(<<transaction_event_enum_type,eventType = Ended>>)에서 미터 데이터를 보내도록 구성된 경우, 다음을 참조하세요: <<metervalues_configuration,Meter Values - Configuration>>
  |충전기는 구성된 측정값을 CSMS로 전송하여 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>)의 _context_ = `Transaction.End` 인 선택적 _meterValue_ 필드에 추가하여 트랜잭션 사용에 대한 자세한 정보를 제공해야 합니다. |{nbsp}
|E07.FR.09 |E07.FR.08 +
  AND +
  충전기의 메모리가 부족합니다.
    |충전기는 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>) 메시지에서 미터 데이터를 삭제할 수 있습니다. |{nbsp}
|E07.FR.10 |E07.FR.09
  |미터 데이터를 삭제할 때 충전기는 먼저 중간 값(첫 번째 값, 세 번째 값, 다섯 번째 등)을 삭제해야 하며, 목록의 시작 부분에서 값을 삭제하거나 목록에 값을 추가하는 것을 중지해서는 안 됩니다. |{nbsp}
|E07.FR.11 | <<transaction_event_request,TransactionEventRequest>>를 생성해야 하는 경우
  |충전기는 <<sequence_number_generation,Sequence Number Generation>>에 지정된 대로 메시지의 **seqNo** 필드를 설정해야 합니다.
    |이렇게 하면 CSMS가 트랜잭션 정보의 완전성을 추적할 수 있습니다.
|E07.FR.12 | <<sampled_data_sign_readings,`SampledDataSignReadings`>>는 _true_ 입니다.
  |충전기는 서명된 미터 값을 검색하여 sampledValues의 _signedMeterValue_ 필드에 넣어야 합니다. |{nbsp}
|===
<<<

=== E08 - Transaction stopped while Charging Station is offline

.E08 - Transaction stopped while Charging Station is offline
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|번호 |유형 |설명

|1 |이름 |충전기가 오프라인인 동안 트랜잭션이 중단됨
|2 |ID |E08
|{nbsp} d|_기능 블록_ |E. 트랜잭션
|{nbsp} d|_부모 사용 사례_ |<<e07_transaction_locally_stopped_by_idtoken,E07 - Local Stop Transaction>>
|3 |목표 |충전기가 _offline_ 인 동안 EV 운전자가 트랜잭션을 중단할 수 있도록 합니다.
|4 |설명 |이 사용 사례는 충전기가 _offline_ 인 동안 EV 운전자가 트랜잭션을 중단하는 방법을 설명합니다. 트랜잭션이 진행 중이고 충전기가 _offline_ 인 동안 EV 운전자가 자신의 IdToken을 제시하면 충전기가 로컬에서(CSMS에 묻지 않고) 이 IdToken이 트랜잭션을 중단할 수 있음을 알고 있으면 진행 중인 트랜잭션이 중단됩니다. +
  충전기가 CSMS와 연결을 복구하면 이 _offline_ 중지 트랜잭션에 대한 정보를 CSMS로 보내야 합니다.
|{nbsp} d|_Actors_ |충전기, CSMS, EV 운전자
|{nbsp} d|_시나리오 설명_
  |**1.** EV 운전자가 트랜잭션을 중지하기 위해 IdToken을 제시합니다. +
  **2.** 이 IdToken이 트랜잭션을 시작하는 데 사용된 것과 동일하거나 로컬 인증 목록 및/또는 인증 캐시를 통해 GroupId를 검증할 수 있습니다. 트랜잭션이 중지됩니다. +
  **3.** 충전기가 에너지 제공을 중지합니다. +
  **4.** <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Ended>>)가 충전기에 저장/대기됩니다. +
  **5.** 충전기와 CSMS 간의 연결이 복구됩니다. +
  **6.** 충전기가 대기 중인 메시지를 보내기 시작합니다 +
  **7.** 저장된 <<transaction_event_request,TransactionEventRequest>>가 전송되어 CSMS에 중지된 트랜잭션에 대해 알립니다.
|5 |필수 조건 |트랜잭션이 진행 중이고 연결이 끊어졌습니다.
|6 |사후 조건 |충전기가 _idle_ 상태입니다.
|===

.시퀀스 다이어그램: 충전기가 오프라인인 동안 트랜잭션이 중지되었습니다
image::part2/images/figure_57.svg[시퀀스 다이어그램: 충전기가 오프라인인 동안 트랜잭션이 중지되었습니다]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7 |오류 처리 |n/a
|8 |참고
  |groupId 검사가 가능할경우 로컬 인증 목록 및/또는 인증 캐시에서 이를 수행해야 합니다.

  위의 시나리오 설명과 시퀀스 다이어그램은 중지 트랜잭션을 위한 구성 변수가 다음과 같이 구성된 것을 기반으로 합니다. +
<<tx_stop_point,`TxStopPoint`>>: <<tx_start_stop_point_values,ParkingBayOccupancy, EVConnected, Authorized>> +
  이 유즈케이스는 다른 구성에서도 유효하지만, 그 경우 트랜잭션이 다른 시점에서 시작/종료될 수 있으며, 이는 메시지가 전송되는 순서에 영향을 미칠 수 있습니다. 자세한 내용은 사용 사례를 참조하세요: <<e06_stop_transaction_options,E06 - Stop Transaction options>>
|===

==== E08 - Transaction stopped while Charging Station is offline - Requirements

.E08 - Requirements
[cols="^.^2,<.^6,<.^6,<.^4",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID |전제 조건 |요구 사항 정의 |참고

|E08.FR.01 |제시된 IdToken이 트랜잭션을 시작하는 데 사용된 IdToken과 동일한 경우.
  |충전기는 에너지 제공을 중단해야 합니다. |{nbsp}
|E08.FR.02 |제시된 IdToken이 트랜잭션을 시작하는 데 사용된 IdToken과 동일한 GroupId를 갖는 경우.
  |충전기는 에너지 제공을 중단해야 합니다. |{nbsp}
|E08.FR.03 |(E08.FR.01 또는 E08.FR.02) +
  AND +
  케이블이 영구적으로 연결되지 않음
    |충전기는 커넥터를 잠금 해제해야 합니다. |{nbsp}
|E08.FR.04 |(E08.FR.01 또는 E08.FR.02)
  |충전기는 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>)를 "생성"해야 합니다. |{nbsp}
|E08.FR.05 |_offline_ 일 때.
  |충전기는 <<transaction_event_request,TransactionEventRequest>> 메시지를 큐에 넣어야 합니다. |{nbsp}
|E08.FR.06 |연결이 복구된 후.
  |충전기는 큐에 넣은 <<transaction_event_request,TransactionEventRequest>> 메시지를 보내야 합니다. |{nbsp}
|E08.FR.07 |{nbsp}
  |플래그: _offline_ 은 충전기가 오프라인 상태일 때 발생한 모든 <<transaction_event_request,TransactionEventRequest>>에 대해 TRUE로 설정되어야 합니다. |{nbsp}
|E08.FR.08 |<<transaction_event_request,TransactionEventRequest>>를 생성해야 하는 경우
  |충전기는 <<sequence_number_generation,Sequence Number Generation>>에 지정된 대로 메시지의 *seqNo* 필드를 설정해야 합니다.
    |이렇게 하면 CSMS가 트랜잭션 정보의 완전성을 추적할 수 있습니다.
|E08.FR.09 | <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>)에서 미터 데이터를 보내도록 구성된 경우 다음을 참조하세요. <<metervalues_configuration,Meter Values ​​- Configuration>>
  |충전기는 구성된 측정값을 CSMS로 전송된 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>)의 선택적 meterValue 필드에 추가하여 트랜잭션 사용에 대한 자세한 정보를 제공해야 합니다. |{nbsp}
|E08.FR.10 |E08.FR.09 +
  그리고 +
  충전기의 메모리가 부족합니다.
    |충전기는 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>) 메시지에서 미터 데이터를 삭제할 수 있습니다. |{nbsp}
|E08.FR.11 |E08.FR.10
  |미터 데이터를 삭제할 때 충전기는 중간 값을 먼저 삭제해야 합니다(첫 번째 값, 세 번째 값, 다섯 번째 등). 목록의 시작 부분에서 값을 삭제하거나 목록에 값을 추가하는 것을 중단해서는 안 됩니다. |{nbsp}
|E08.FR.12 |<<sampled_data_sign_readings,`SampledDataSignReadings`>>는 _true_ 입니다.
  |충전기는 서명된 미터 값을 검색하여 sampledValues의 _signedMeterValue_ 필드에 넣어야 합니다. |{nbsp}
|===

<<<

[[e09_when_cable_disconnected_on_ev_side_stop_transaction]]
=== E09 - When cable disconnected on EV-side: Stop Transaction

.E09 - EV 측에서 케이블이 분리된 경우: 트랜잭션 중지
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|번호 |유형 |설명

|1 |이름 |EV 측에서 케이블이 분리된 경우: 트랜잭션 중지
|2 |ID |E09
|{nbsp} d|_기능 블록_ |E. 트랜잭션
|{nbsp} d|_부모 사용 사례_ |<<e07_transaction_locally_stopped_by_idtoken,E07 - Local Stop Transaction>>
|3 |목표 |EV 측에서 충전 케이블이 분리되면 진행 중인 트랜잭션을 중지합니다.
|4 |설명
  |이 사용 사례는 EV 운전자가 EV 측에서 케이블을 분리하면 트랜잭션이 중지되는 방법을 다룹니다. 이 사용 사례에서 구성 변수는 다음과 같습니다: <<stop_tx_on_ev_side_disconnect,`StopTxOnEVSideDisconnect`>> = true.

  EV 측에서 충전 케이블이 분리됩니다. 이는 충전기에서 감지합니다. 충전기는 트랜잭션을 중지하고 CSMS에 <<transaction_event_request,TransactionEventRequest>>를 보냅니다. 충전 케이블이 잠겨 있고 <<unlock_on_ev_side_disconnect,`UnlockOnEVSideDisconnect`>> = false인 경우 EV 운전자가 돌아와서 자신의 IdToken을 제시할 때까지 충전기에서 잠긴 상태로 유지됩니다. 그렇지 않으면 케이블이 잠금 해제됩니다.
|{nbsp} d|_Actors_ |충전기, CSMS, EV 운전자
|{nbsp} d|_시나리오 설명_
  |**1.** EV에서 케이블이 분리되었습니다. +
  **2.** 에너지 제공이 중단되었습니다. +
  **3.** 충전기에서 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>, <<reason_enum_type,stoppedReason = EVDisconnected>>)를 CSMS로 전송합니다. +
  **4.** CSMS에서 <<transaction_event_response,TransactionEventResponse>>로 응답합니다. +
  **5.** EV 운전자가 인증을 하고 케이블을 분리합니다. +
  **6.** 충전기에서 <<status_notification_request,StatusNotificationRequest>>를 CSMS로 _Available_ 상태로 전송합니다. +
  **7.** CSMS는 <<status_notification_response,StatusNotificationResponse>>로 응답합니다.
|{nbsp} d|_대체 시나리오_ |<<e10_when_cable_disconnected_on_ev_side_suspended_transaction,E10 - When cable disconnected on EV-side: Suspend Transaction>>
|5 |필수 조건
  |구성 변수: <<stop_tx_on_ev_side_disconnect,`StopTxOnEVSideDisconnect`>> = true +
  트랜잭션이 진행 중입니다.
|6 |사후 조건
  |**성공한 사후 조건:** +
  충전기가 _idle_ 상태입니다. +
  **실패 사후 조건:** +
  n/a
|===

.시퀀스 다이어그램: EV 측에서 케이블이 분리된 경우: 트랜잭션 중지
image::part2/images/figure_58.svg[시퀀스 다이어그램: EV 측에서 케이블이 분리된 경우: 트랜잭션 중지]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7 |오류 처리 |n/a
|8 |참고
  |충전 케이블을 다시 연결하면 충전이 재개/계속되지 않습니다.

  위의 시나리오 설명과 시퀀스 다이어그램은 트랜잭션 중지를 위한 구성 변수가 다음과 같이 구성된 것을 기반으로 합니다. +
  <<tx_stop_point,`TxStopPoint`>>: <<tx_start_stop_point_values,Authorized>> +
  이 유즈케이스는 다른 구성에서도 유효하지만, 그 경우 트랜잭션이 다른 시점에서 시작/종료될 수 있으며, 이는 메시지가 전송되는 순서에 영향을 미칠 수 있습니다. 자세한 내용은 사용 사례를 참조하세요. <<e06_stop_transaction_options,E06 - Stop Transaction options>>
|===

==== E09 - When cable disconnected on EV-side: Stop Transaction - Requirements

.E09 - 요구 사항
[cols="^.^2,<.^6,<.^6,<.^4",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID |전제 조건 |요구 사항 정의 |참고

|E09.FR.01 |<<stop_tx_on_ev_side_disconnect,`StopTxOnEVSideDisconnect`>> = _true_ 이면.
  |케이블이 EV에서 분리되면 트랜잭션이 인증 취소되어야 합니다. EV가 다시 연결된 경우 트랜잭션이 다시 인증될 때까지 에너지 전송이 허용되지 않습니다.
    |<<stop_tx_on_ev_side_disconnect,`StopTxOnEVSideDisconnect`>>를 _true_ 로 설정하면 EV 측에서 잠기지 않은 케이블을 분리할 때 방해 행위를 방지할 수 있습니다.
|E09.FR.02 |E09.FR.01 +
  AND +
  케이블이 영구적으로 연결되지 않은 경우 +
  AND +
  <<unlock_on_ev_side_disconnect,`UnlockOnEVSideDisconnect`>> = true.
    |충전기는 충전 케이블을 잠금 해제해야 합니다. |{nbsp}
|E09.FR.03 |E09.FR.01 +
  AND +
  케이블이 영구적으로 연결되지 않은 경우 +
  AND +
  <<unlock_on_ev_side_disconnect,`UnlockOnEVSideDisconnect`>> = false.
    |충전기는 EV 운전자의 인증 후에만 충전 케이블을 잠금 해제해야 합니다. |{nbsp}
|E09.FR.04 | <<transaction_event_request,TransactionEventRequest>>를 생성해야 하는 경우
  |충전기는 <<sequence_number_generation,Sequence Number Generation>>에 지정된 대로 메시지의 **seqNo** 필드를 설정해야 합니다.
    |이렇게 하면 CSMS가 트랜잭션 정보의 완전성을 추적할 수 있습니다.
|E09.FR.05 | <<transaction_event_request,TransactionEventRequest>>에서 미터 데이터를 보내도록 구성된 경우(<<transaction_event_enum_type,eventType = Ended>>), 다음을 참조하세요: <<metervalues_configuration,Meter Values - Configuration>>
  |충전기는 구성된 측정값을 CSMS로 전송된 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>)의 선택적 meterValue 필드에 추가하여 트랜잭션 사용에 대한 자세한 정보를 제공해야 합니다. |{nbsp}
|E09.FR.06 |E09.FR.05 +
  AND +
  충전기의 메모리가 부족합니다.
    |충전기는 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>) 메시지에서 미터 데이터를 삭제할 수 있습니다. |{nbsp}
|E09.FR.07 |E09.FR.06
  |미터 데이터를 삭제할 때 충전기는 먼저 중간 값(첫 번째 값, 세 번째 값, 다섯 번째 등)을 삭제해야 하며, 목록의 시작 부분에서 값을 삭제하거나 목록에 값을 추가하는 것을 중지해서는 안 됩니다. |{nbsp}
    |E09.FR.08 |<<sampled_data_sign_readings,`SampledDataSignReadings`>>는 _true_ 입니다.
      |충전기는 서명된 미터 값을 검색하여 sampledValues의 _signedMeterValue_ 필드에 넣어야 합니다. |{nbsp}
|===

<<<

[[e10_when_cable_disconnected_on_ev_side_suspended_transaction]]
=== E10 - When cable disconnected on EV-side: Suspend Transaction

.E10 - EV 측에서 케이블이 분리된 경우: 트랜잭션 중단
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|번호 |유형 |설명

|1 |이름 |EV 측에서 케이블이 분리된 경우: 트랜잭션 일시 중단
|2 |ID |E10
|{nbsp} d|_기능 블록_ |E. 트랜잭션
|{nbsp} d|_부모 사용 사례_ |<<e07_transaction_locally_stopped_by_idtoken,E07 - Local Stop Transaction>>
|3 |목표 |EV 측에서 충전 케이블이 분리되면 진행 중인 트랜잭션을 일시 중단합니다.
|4 |설명
|이 사용 사례는 EV 운전자가 EV 측에서 케이블을 분리하면 트랜잭션이 일시 중단되는 방식을 다룹니다. 이 사용 사례에서 구성 변수는 다음과 같습니다: <<stop_tx_on_ev_side_disconnect,`StopTxOnEVSideDisconnect`>> = false.

  EV 측에서 충전 케이블이 분리되었습니다. 이는 충전기에서 감지합니다. 충전기는 에너지 제공(안전을 위해)을 중단하지만 트랜잭션은 중단하지 않습니다. 충전 케이블이 잠긴 경우 EV 운전자가 돌아와서 ID 토큰을 제시할 때까지 충전기에서 잠긴 상태로 유지됩니다.
|{nbsp} d|_Actors_ |충전기, CSMS, EV 운전자
|{nbsp} d|_시나리오 설명_
  |**1.** EV 드라이버가 트랜잭션이 진행되는 동안 EV에서 케이블을 분리합니다. +
  **2.** 에너지 제공이 중단됩니다. +
  _EV 드라이버가 케이블을 다시 연결하면 트랜잭션이 재개됩니다._ +
  **A1.** 충전기에서 <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Updated>>, <<trigger_reason_enum_type,trigger = CablePluggedIn>>)를 보냅니다. +
  **A2.** CSMS에서 <<transaction_event_response,TransactionEventResponse>>로 응답합니다. +
  _케이블이 영구적으로 연결되지 않은 경우_ +
  **B1.** EV 드라이버는 충전기 및/또는 CSMS에서 충전 케이블 잠금을 해제하도록 인증되었습니다. +
  **B2.** 케이블이 잠금 해제되었습니다. +
  **B3.** 충전기에서 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>, <<trigger_reason_enum_type,trigger = StopAuthorized>>)를 전송합니다. +
  **B4.** EV 운전자가 충전 케이블을 제거합니다. +
  **B5.** 충전기에서 <<status_notification_request,StatusNotificationRequest>>를 CSMS에 전송하고 상태는 <<connector_status_enum_type,_Available_>>입니다. +
  **B6.** CSMS에서 <<status_notification_response,StatusNotificationResponse>>로 응답합니다. +
  _케이블이 영구적으로 연결된 경우_ +
  **C1.** 케이블이 시간 초과 내에 연결되지 않았습니다. +
  **C2.** 충전기는 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>, <<trigger_reason_enum_type,trigger = EVCommunicationLost>>, <<reason_enum_type,stoppedReason = EVDisconnected>>)를 전송합니다. +
  **C3.** 충전기는 <<status_notification_request,StatusNotificationRequest>>를 CSMS에 상태 <<connector_status_enum_type,_Available_>>로 전송합니다. +
  **C4.** CSMS는 <<status_notification_response,StatusNotificationResponse>>로 응답합니다.
|{nbsp} d|_대체 시나리오_ |<<e09_when_cable_disconnected_on_ev_side_stop_transaction,E09 - When cable disconnected on EV-side: Stop Transaction>>
|5 |필수 조건
  |구성 변수: <<stop_tx_on_ev_side_disconnect,`StopTxOnEVSideDisconnect`>> = false +
  트랜잭션이 진행 중입니다.
|6 |사후 조건
  |**성공적인 사후 조건:** +
  충전기가 _idle_ 상태입니다. +
  일반 트랜잭션이 재개됩니다. +
  **실패 사후 조건:** +
  n/a
|===

.시퀀스 다이어그램: EV 측에서 케이블이 분리된 경우: 트랜잭션 중단
image::part2/images/figure_59.svg[시퀀스 다이어그램: EV 측에서 케이블이 분리된 경우: 트랜잭션 중단]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7 |오류 처리 |n/a
|8 |참고 사항
  |충전 케이블을 다시 연결하면 충전이 재개됩니다.

  케이블이 영구적으로 연결되어 있고 특정 시간 초과 내에 케이블이 연결되지 않으면 충전기가 트랜잭션을 중단합니다. 이 시간 초과는 OCPP에서 정의하지 않으며 충전기 구현자에게 맡겨집니다. +
  위의 시나리오 설명과 시퀀스 다이어그램은 트랜잭션 중단을 위한 구성 변수가 다음과 같이 구성된 것을 기반으로 합니다. +
  <<tx_stop_point,`TxStopPoint`>>: <<tx_start_stop_point_values,ParkingBayOccupancy, Authorized>> +
  이 유즈케이스는 다른 구성에서도 유효하지만, 그 경우 트랜잭션이 다른 시점에서 시작/종료될 수 있으며, 이는 메시지가 전송되는 순서에 영향을 미칠 수 있습니다. 자세한 내용은 사용 사례를 참조하세요: <<e06_stop_transaction_options,E06 - Stop Transaction options>>
|===

==== E10 - When cable disconnected on EV-side: Suspend Transaction - Requirements

.E10 - Requirements
[cols="^.^2,<.^6,<.^6,<.^4",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID |전제 조건 |요구 사항 정의 |참고

|E10.FR.01 |케이블이 영구적으로 연결되지 않음
  |커넥터는 EV 운전자가 IdToken을 제시할 때까지 충전기에서 잠긴 상태로 유지되어야 합니다. |{nbsp}
|E10.FR.02 |케이블이 영구적으로 연결됨 +
  AND +
  케이블이 시간 초과 내에 연결되지 않음
    |충전기는 트랜잭션을 인증 취소해야 합니다. |{nbsp}
|E10.FR.03 |<<transaction_event_request,TransactionEventRequest>>를 만들어야 하는 경우
  |충전기는 <<sequence_number_generation,Sequence Number Generation>>에 지정된 대로 메시지의 **seqNo** 필드를 설정해야 합니다.
    |이렇게 하면 CSMS가 트랜잭션 정보의 완전성을 추적할 수 있습니다.
|E10.FR.04 |<<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>)에서 미터 데이터를 보내도록 구성된 경우 다음을 참조하세요. <<metervalues_configuration,Meter Values ​​- Configuration>>
  |충전기는 구성된 측정값을 CSMS로 전송된 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>)의 선택적 meterValue 필드에 추가하여 트랜잭션 사용에 대한 자세한 정보를 제공해야 합니다. |{nbsp}
|E10.FR.05 |E10.FR.04 +
  AND +
  충전기의 메모리가 부족합니다.
    |충전기는 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>) 메시지에서 미터 데이터를 삭제할 수 있습니다. |{nbsp}
|E10.FR.06 |E10.FR.05
  |미터 데이터를 삭제할 때 충전기는 먼저 중간 값(첫 번째 값, 세 번째 값, 다섯 번째 등)을 삭제해야 하며, 목록의 시작 부분에서 값을 삭제하거나 목록에 값을 추가하는 것을 중지해서는 안 됩니다. |{nbsp}
|E10.FR.07 |<<sampled_data_sign_readings,`SampledDataSignReadings`>>는 _true_ 입니다.
  |충전기는 서명된 미터 값을 검색하여 sampledValues의 _signedMeterValue_ 필드에 넣어야 합니다. |{nbsp}
|===

<<<

==== E11 - Connection Loss During Transaction

.E11 - 트랜잭션 중 연결 손실
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|번호 |유형 |설명

|1 |이름 |트랜잭션 중 연결 손실
|2 |ID |E11
|{nbsp} d|_기능 블록_ |E. 트랜잭션
|3 |목표 |충전기가 연결이 끊어진 동안에도 충전기가 트랜잭션을 이어갈 수 있도록 함
|4 |설명 |이 사용 사례는 충전기가 CSMS와의 연결을 끊고 다시 연결하는 동안에도 진행 중인 트랜잭션을 계속할 수 있는 방법을 설명합니다.
|{nbsp} d|_Actors_ |충전기, CSMS
|{nbsp} d|_시나리오 설명_
  |**1.** 트랜잭션이 진행 중인 동안 충전기의 연결이 끊어졌습니다. +
  **2.** 충전기의 트랜잭션 이벤트가 저장됩니다. +
  **3.** CSMS와의 연결이 복구됩니다. +
  **4.** 충전기는 <<transaction_event_request,TransactionEventRequest>>(offline = TRUE)를 사용하여 저장된 트랜잭션 이벤트를 CSMS로 보냅니다. +
  **5.** 충전기가 정기적인 통신을 재개합니다.
|{nbsp} d|_대체 시나리오_ |<<e04_transaction_started_while_charging_station_is_offline,E04 - Offline Start Transaction>>
|5 |필수 조건 |트랜잭션이 진행 중이고 연결이 끊어짐.
|6 |사후 조건
  |**성공적인 사후 조건:** +
  충전기가 정상적인 통신을 재개합니다. +
  **실패 사후 조건:** +
  n/a +
|===

.시퀀스 다이어그램: 트랜잭션 중 연결 끊김
image::part2/images/figure_60.svg[시퀀스 다이어그램: 트랜잭션 중 연결 끊김]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7 |오류 처리 |n/a
|8 |참고 |n/a
|===

==== E11 - Connection Loss During Transaction - Requirements

.E11 - Requirements
[cols="^.^2,<.^5,<.^6",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID |전제 조건 |요구 사항 정의

|E11.FR.01 |_offline_ 일 때
  |충전기는 충전기가 온라인 상태였다면 CSMS에 전송했을 모든 <<transaction_event_request,TransactionEventRequest>> 메시지를 큐에 넣어야 합니다.
|E11.FR.02 |연결이 복구된 후.
  |충전기는 플래그 _offline_ 을 TRUE로 설정하여 큐에 넣은 <<transaction_event_request,TransactionEventRequest>> 메시지를 전송해야 합니다.
|E11.FR.03 |<<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>)에서 미터 데이터를 보내도록 구성된 경우 다음을 참조하세요. <<metervalues_configuration,Meter Value - Configuration>>
  |충전기는 구성된 측정값을 CSMS로 전송된 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>)의 선택적 MeterValue 필드에 추가하여 트랜잭션 중에 더 자세한 정보를 제공해야 합니다.
|E11.FR.04 |E11.FR.03 +
  AND +
  _offline_ +
  AND +
  충전기의 메모리가 부족합니다.
    |충전기는 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>) 메시지를 삭제할 수 있습니다.
|E11.FR.05 |E11.FR.04
  |<<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>) 메시지를 삭제할 때 충전기는 중간 메시지를 먼저 삭제해야 합니다(첫 번째 메시지, 세 번째 메시지, 다섯 번째 메시지 등). 처음부터 메시지를 삭제하거나 큐에 메시지를 추가하는 것을 중단해서는 안 됩니다.
|E11.FR.06 |E11.FR.03 +
  AND +
  1개의 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>)에 대한 미터 데이터 양이 너무 많은 경우.
    |충전기는 동일한 _timestamp_ 를 가진 여러 개의 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>) 메시지로 미터 데이터를 분할할 수 있습니다.
|E11.FR.07 |{nbsp}
  |충전기가 오프라인이 되면 대기열에 남아 있는 모든 메시지는 _offline_ 으로 설정해야 합니다.
|E11.FR.08 |<<sampled_data_sign_readings,`SampledDataSignReadings`>>는 _true_ 입니다.
  |충전기는 서명된 미터 값을 검색하여 sampledValues의 _signedMeterValue_ 필드에 넣어야 합니다.
|===

<<<

[[e12_inform_csms_of_an_offline_occurred_transaction]]
=== E12 - Inform CSMS of an Offline Occurred Transaction

.E12 - CSMS에 오프라인 발생 트랜잭션 알림
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|번호 |유형 |설명

|1 |이름 |CSMS에 오프라인 발생 트랜잭션 알림
|2 |ID |E12
|{nbsp} d|_기능 블록_ |E. 트랜잭션
|3 |목표 |충전기가 _offline_ 상태일 때 트랜잭션이 발생했음을 CSMS에 알릴 수 있도록 합니다.
|4 |설명 |이 사용 사례는 충전기가 연결 손실 이후 트랜잭션을 시작하고 중지하는 방법을 다룹니다.
|{nbsp} d|_Actors_ |충전기, CSMS
|{nbsp} d|_시나리오 설명_
  |**1.** CSMS와의 연결이 복구됩니다. +
  **2.** 충전기가 CSMS에 Heartbeat 메시지를 보냅니다. +
  **3.** 충전기가 <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Started>>, offline = TRUE)를 CSMS에 보냅니다. +
  **4.** CSMS가 <<transaction_event_response,TransactionEventResponse>>로 응답하여 트랜잭션을 수락합니다. +
  **5.** 충전기에서 <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Updated>>, offline = TRUE)를 전송합니다. +
  **6.** CSMS에서 <<transaction_event_response,TransactionEventResponse>>로 응답합니다. +
  **7.** 충전기에서 <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Ended>>, offline = TRUE)를 전송합니다. +
  **8.** CSMS에서 <<transaction_event_response,TransactionEventResponse>>로 응답합니다.
|5 |필수 조건 |최소 한 개의 _offline_ 트랜잭션이 발생했습니다.
|6 |사후 조건
  |**성공한 사후 조건:** +
  CSMS에서 _offline_ 으로 발생한 모든 트랜잭션을 처리했습니다. +
  **실패 사후 조건:** +
  없음
|===

.Sequence Diagram: Inform CSMS of an Offline Occurred Transaction
image::part2/images/figure_61.svg[Sequence Diagram: Inform CSMS of an Offline Occurred Transaction]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7 |오류 처리 |n/a
|8 |참고 |n/a
|===

==== E12 - Inform CSMS of an Offline Occurred Transaction - Requirements

.E12 - 요구 사항
[cols="^.^2,<.^5,<.^6",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID |전제 조건 |요구 사항 정의

|E12.FR.01 |_offline_ 일 때
  |충전기는 충전기가 온라인 상태였다면 CSMS에 전송했을 모든 <<transaction_event_request,TransactionEventRequest>> 메시지를 큐에 넣어야 합니다.
|E12.FR.02 |연결이 복구된 후.
  |충전기는 플래그 _offline_ 을 TRUE로 설정하여 큐에 넣은 <<transaction_event_request,TransactionEventRequest>> 메시지를 전송해야 합니다.
|E12.FR.03 |<<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>)에서 미터 데이터를 보내도록 구성된 경우 다음을 참조하세요. <<metervalues_configuration,Meter Values - Configuration>>
  |충전기는 구성된 측정값을 CSMS로 전송된 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>)의 선택적 MeterValue 필드에 추가하여 트랜잭션 중에 더 자세한 정보를 제공해야 합니다.
|E12.FR.04 |E12.FR.03 +
  및 +
  _Offline_ +
  및 +
  충전기의 메모리가 부족합니다.
    |충전기는 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>) 메시지를 삭제할 수 있습니다.
|E12.FR.05 |E12.FR.04
  |<<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>) 메시지를 삭제할 때 충전기는 중간 메시지를 먼저 삭제해야 합니다(첫 번째 메시지, 세 번째 메시지, 다섯 번째 메시지 등). 처음부터 메시지를 삭제하거나 큐에 메시지를 추가하는 것을 중단해서는 안 됩니다.
|E12.FR.06 |E12.FR.03 +
  및 +
  1개의 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>)에 대한 미터 데이터 양이 너무 많은 경우.
    |충전기는 동일한 _timestamp_ 를 가진 여러 개의 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>) 메시지로 미터 데이터를 분할할 수 있습니다.
|E12.FR.07 | <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>)에서 미터 데이터를 보내도록 구성된 경우 다음을 참조하세요. <<metervalues_configuration,Meter Values - Configuration>>
  |충전기는 구성된 측정값을 CSMS로 전송된 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>)의 선택적 meterValue 필드에 추가하여 트랜잭션 사용에 대한 자세한 정보를 제공해야 합니다.
|E12.FR.08 |E12.FR.07 +
  AND +
  충전기의 메모리가 부족합니다.
    |충전기는 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>) 메시지에서 미터 데이터를 삭제할 수 있습니다.
|E12.FR.09 |E12.FR.08
  |미터 데이터를 삭제할 때 충전기는 중간 값을 먼저 삭제해야 합니다(첫 번째 값, 세 번째 값, 다섯 번째 등). 목록의 시작 부분에서 값을 삭제하거나 목록에 값을 추가하는 것을 중단해서는 안 됩니다.
|E12.FR.10 |<<sampled_data_sign_readings,`SampledDataSignReadings`>>는 _true_ 입니다.
  |충전기는 서명된 미터 값을 검색하여 sampledValues의 _signedMeterValue_ 필드에 넣어야 합니다.
|===

[[e13_transaction_related_message_not_accepted_by_csms]]
==== E13 - Transaction-related message not accepted by CSMS

.E13 - Transaction-related message not accepted by CSMS
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|번호 |유형 |설명

|1 |이름 |CSMS에서 수락하지 않은 트랜잭션 관련 메시지
|2 |ID |E13
|{nbsp} d|_기능 블록_ |E. 트랜잭션
|3 |목표 |충전기에서 수락하지 않은 메시지를 처리하는 방법을 정의합니다.
|4 |설명 |CSMS에서 트랜잭션 관련 메시지를 수락하지 않거나 MessageTimeout 내에 응답하지 않는 상황/문제가 있습니다. 대부분은 오류 시나리오입니다. 이와 같은 일이 발생하면 충전기는 메시지를 몇 번 다시 시도해야 합니다.
|{nbsp} d|_Actors_ |충전기, CSMS
|{nbsp} d|_시나리오 설명_
  |**1.** 충전기에서 CSMS에 트랜잭션 관련 메시지를 보냅니다. +
  **2.** 메시지가 수락되지 않고 <<message_attempts_transaction_event,`MessageAttemptsTransactionEvent`>>에 도달하지 못했습니다. +
  **3.** 충전기는 동일한 메시지의 이전 전송 횟수를 <<message_attempt_interval_transaction_event,`MessageAttemptIntervalTransactionEvent`>>와 곱한 초 동안 기다립니다. +
  **4.** 충전기는 트랜잭션 관련 메시지를 CSMS로 다시 보냅니다. +
|5 |필수 조건 |n/a
|6 |사후 조건
  |**성공 사후 조건:** +
  MessageAttemptsTransactionEvent에 도달하지 않고 트랜잭션 관련 메시지가 수락됩니다. MessageAttemptsTransactionEvent에 도달하고 트랜잭션 관련 메시지가 삭제됩니다. +
  **실패 사후 조건:** +
  MessageAttemptsTransactionEvent에 도달하지 않고 트랜잭션 관련 메시지가 삭제됩니다. MessageAttemptsTransactionEvent에 도달하고 트랜잭션 관련 메시지가 수락됩니다.
|===

.시퀀스 다이어그램: CSMS에서 수락되지 않은 트랜잭션 관련 메시지
image::part2/images/figure_62.svg[시퀀스 다이어그램: CSMS에서 수락되지 않은 트랜잭션 관련 메시지]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7 |오류 처리 |n/a
|8 |참고 |이 사용 사례는 CSMS가 메시지를 수락하지 않거나 메시지 시간 초과 내에 응답하지 않을 때 예상되는 동작을 설명합니다. 이는 충전기와 CSMS 간의 통신이 _offline_ 인 상황과 다릅니다.
|===

==== E13 - Transaction-related message not accepted by CSMS - Requirements

.E13 - 요구 사항
[cols="^.^2,<.^5,<.^6",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID |전제 조건 |요구 사항 정의

|E13.FR.01 |{nbsp}
  |충전기가 실패한 트랜잭션 관련 메시지를 재시도해야 하는 횟수와 간격은 <<message_attempts_transaction_event,`MessageAttemptsTransactionEvent`>> 및 <<message_attempt_interval_transaction_event,`MessageAttemptIntervalTransactionEvent`>> 구성 변수를 사용하여 구성할 수 있습니다.
|E13.FR.02 |충전기가 특정 트랜잭션 관련 메시지를 전달하는 데 처음으로 실패할 때.
  |충전기는 이 메시지를 처리하는 데 실패하는 일이 계속 발생하고 <<message_attempts_transaction_event,`MessageAttemptsTransactionEvent`>> 구성 변수에 지정된 만큼의 이 메시지 처리 실패가 아직 발생하지 않은 한 이 메시지를 다시 보내야 합니다.
|E13.FR.03 |CSMS는 트랜잭션 관련 메시지를 수락하지 않습니다.
  |충전기는 <<message_attempt_interval_transaction_event,`MessageAttemptIntervalTransactionEvent`>> 키에 지정된 시간(초)에 이 동일한 메시지의 이전 전송 횟수를 곱한 값을 대기해야 합니다.
|E13.FR.04 |최종 시도가 실패하는 경우.
  |충전기는 메시지를 삭제하고 다음 트랜잭션 관련 메시지가 있는 경우 계속 진행해야 합니다.
|===

==== E13 - Transaction-related message not accepted by CSMS - Example

예를 들어, <<message_attempts_transaction_event,`MessageAttemptsTransactionEvent`>> 구성 변수에 "3" 값이 있고 <<message_attempt_interval_transaction_event,`MessageAttemptIntervalTransactionEvent`>> 구성 변수에 "60" 값이 있는 충전기를 생각해 보세요. 이 충전기는 <<transaction_event_request,TransactionEventRequest>> 메시지를 보내고 CSMS에서 메시지를 처리하는 데 실패한 것을 감지합니다. 충전기는 60초 동안 기다렸다가 메시지를 다시 보내야 합니다. 두 번째 실패가 발생하는 경우 충전기는 메시지를 다시 보내기 전에 120초 동안 기다려야 합니다. 이 마지막 시도가 실패하면 충전기는 메시지를 삭제하고 다음 트랜잭션 관련 메시지(있는 경우)를 계속 진행합니다.

<<<

=== E14 - Check Transaction status

.E14 - 트랜잭션 상태 확인
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|번호 |유형 |설명

|1 |이름 |트랜잭션 상태 확인
|2 |ID |E14
|{nbsp} d|_기능 블록_ |E. 트랜잭션
|3 |목표 |CSMS가 트랜잭션 상태를 요청하고 대기 중인 트랜잭션 관련 메시지가 있는지 확인할 수 있도록 합니다.
|4 |설명
  |CSMS가 전달해야 하는 트랜잭션에 대한 메시지가 아직 있는지 알아야 하는 시나리오가 있습니다. 예를 들어: CSMS가 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>)를 수신하고, 이 트랜잭션에 대한 청구 프로세스를 시작하려고 하지만 여전히 일부 중간 메시지가 누락되어 있음을 감지합니다(메시지의 시퀀스 번호를 통해 확인할 수 있음). <<get_transaction_status_request,GetTransactionStatusRequest>>에서 transactionId를 지정하여 충전기에 이 트랜잭션에 대한 대기열에 메시지가 있는지 물어볼 수 있습니다. 결과에 따라 CSMS는 예를 들어 메시지가 전달될 때까지 기다리거나 정보 없이 청구 프로세스를 시작할 수 있습니다. 또한 트랜잭션이 아직 진행 중인지 알아야 할 수도 있습니다. CSMS가 대기열에 트랜잭션 관련 메시지가 있는지(특정 트랜잭션에 대한 메시지가 아닌) 알고 싶은 경우 transactionId 없이 <<get_transaction_status_request,GetTransactionStatusRequest>>를 보낼 수 있습니다.
|{nbsp} d|_Actors_ |CSMS, 충전기
|{nbsp} d|_시나리오 설명_
  |**1.** CSMS는 <<get_transaction_status_request,GetTransactionStatusRequest>>를 충전기로 보냅니다. 이때 transactionId가 있거나 없어도 됩니다. +
  **2.** 충전기는 <<get_transaction_status_response,GetTransactionStatusResponse>>로 응답합니다.
|5 |필수 조건 |CSMS는 상태를 알고자 하는 트랜잭션의 transactionId를 알고 있습니다.
|6 |사후 조건
  |**성공 사후 조건:** +
  CSMS는 요청된 트랜잭션의 상태를 알고 있습니다. +
  **실패 사후 조건:** +
  CSMS는 요청된 트랜잭션의 상태를 알지 못합니다.
|===

.시퀀스 다이어그램: 트랜잭션 상태 확인
image::part2/images/figure_63.svg[시퀀스 다이어그램: 트랜잭션 상태 확인]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7 |오류 처리 |n/a
|8 |참고
  |CSMS가 두 필드(_ongoingIndicator_ 및 _messagesInQueue_)가 모두 false로 설정된 <<get_transaction_status_response,GetTransactionStatusResponse>>를 수신하는 경우, 이는 트랜잭션이 완료되었고 이 트랜잭션에 대한 대기열에 더 이상 메시지가 없거나 충전기가 이 트랜잭션에 대해 아무것도 알지 못한다는 것을 의미할 수 있습니다(더 이상).
|===

==== E14 - Check transaction status - Requirements

.E14 - Requirements
[cols="^.^2,<.^5,<.^6",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID |전제 조건 |요구 사항 정의

|E14.FR.01 |충전기는 transactionId와 함께 <<get_transaction_status_request,GetTransactionStatusRequest>>를 수신하고 +
  해당 transactionId로 트랜잭션을 수행하지 않았습니다.
    |충전기는 _ongoingIndicator_ = false AND _messagesInQueue_ = false로 응답해야 합니다.
|E14.FR.02 |충전기는 transactionId와 함께 <<get_transaction_status_request,GetTransactionStatusRequest>>를 수신하고 +
  해당 transactionId로 트랜잭션이 아직 중단되지 않았습니다.
    |충전기의 응답은 _ongoingIndicator_ = true여야 합니다.
|E14.FR.03 |충전기는 transactionId가 있는 <<get_transaction_status_request,GetTransactionStatusRequest>>를 수신하고 +
  해당 transactionId가 있는 트랜잭션이 중단되었습니다. |충전기의 응답은 _ongoingIndicator_ = false여야 합니다.
|E14.FR.04 |충전기는 transactionId가 있는 <<get_transaction_status_request,GetTransactionStatusRequest>>를 수신하고 +
  해당 transactionId가 있는 트랜잭션에 대해 전달할 트랜잭션 관련 메시지가 있습니다. |충전기의 응답은 _messagesInQueue_ = true여야 합니다.
|E14.FR.05 |충전기는 transactionId가 있는 <<get_transaction_status_request,GetTransactionStatusRequest>>를 수신하고 +
  해당 transactionId가 있는 트랜잭션에 대해 전달할 트랜잭션 관련 메시지가 없습니다. |충전기의 응답은 _messagesInQueue_ = false여야 합니다.
|E14.FR.06 |충전기는 transactionId 없이 <<get_transaction_status_request,GetTransactionStatusRequest>>를 수신합니다.
  |충전기의 응답은 _ongoingIndicator_ = 설정되어서는 안 됩니다.
|E14.FR.07 |충전기는 transactionId 없이 <<get_transaction_status_request,GetTransactionStatusRequest>>를 수신하고 +
  전달할 트랜잭션 관련 메시지가 있습니다.
    |충전기의 응답은 _messagesInQueue_ = true여야 합니다.
|E14.FR.08 |충전기는 transactionId 없이 <<get_transaction_status_request,GetTransactionStatusRequest>>를 수신하고 +
  전달할 트랜잭션 관련 메시지가 없습니다.
    |충전기의 응답은 _messagesInQueue_ = false여야 합니다.
|===

<<<

:sectnums:
=== Interrupting and Stopping ISO 15118 Charging

:sectnums!:
=== E15 - End of charging process

.E15 - 충전 프로세스 종료
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|번호 |유형 |설명

|1 |이름 |충전 프로세스 종료.
|2 |ID |E15
|{nbsp} d|_기능 블록_ |E. 트랜잭션
|{nbsp} d|_참조_ |<<iso15118_1,ISO15118-1>> H1 - 충전 프로세스 종료
|3 |목표 |<<iso15118_1,ISO15118-1>> 참조, 사용 사례 목표 H1, 44페이지.
|4 |설명 |<<iso15118_1,ISO15118-1>> 참조, 사용 사례 설명 H1, 44페이지.
|{nbsp} d|_Actors_ |EV, EVSE, EV 드라이버
|{nbsp} d|_시나리오 설명_
  |<<iso15118_1,ISO15118-1>> 참조, 사용 사례 설명 H1, 기본 초보 사용 사례 설명, 처음 5개의 글머리 기호와 마지막 2개의 설명, 44페이지.

  **1.** EV 드라이버가 EV에서 케이블을 분리합니다 +
  **2.** 충전기는 <<transaction_event_request,TransactionEventRequest>>를 eventType <<transaction_event_enum_type,eventType = Ended>>로 CSMS로 보냅니다.
|7 |필수 조건 |<<iso15118_1,ISO15118-1>>, 사용 사례 필수 조건 H1, 44페이지를 참조하세요.
|8 |사후 조건
  |CSMS가 트랜잭션에 대한 모든 관련 정보를 수신했습니다.

  <<iso15118_1,ISO15118-1>>, 사용 사례 종료 조건 H1, 44페이지를 참조하세요.
|===

.End of charging process
image::part2/images/figure_64.svg[End of charging process]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|9 |오류 처리 |n/a
|10 |참고
  |트리거에 대한 <<iso15118_1,ISO15118-1>>, 사용 사례 요구 사항 H1, 44페이지를 참조하세요.

  위의 시나리오 설명과 시퀀스 다이어그램은 중지 트랜잭션에 대한 구성 변수가 다음과 같이 구성된 것을 기반으로 합니다. +
  <<tx_stop_point,`TxStopPoint`>>: <<tx_start_stop_point_values,ParkingBayOccupancy, EVConnected, Authorized, DataSigned, PowerPathClosed>> +
  이 유즈케이스는 다른 구성에서도 유효하지만, 그 경우 트랜잭션이 다른 시점에서 시작/종료될 수 있으며, 이는 메시지가 전송되는 순서에 영향을 미칠 수 있습니다. 자세한 내용은 사용 사례를 참조하세요. <<e06_stop_transaction_options,E06 - Stop Transaction options>>
|===

출처: <<iso15118_1,ISO15118-1>>

==== E15 - End of charging process - Requirements

.E15 - 요구 사항
[cols="^.^2,<.^5,<.^6",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID |전제 조건 |요구 사항 정의

|E15.FR.01 | <<transaction_event_request,TransactionEventRequest>>에서 미터 데이터를 보내도록 구성된 경우(<<transaction_event_enum_type,eventType = Ended>>), 다음을 참조하세요. <<metervalues_configuration,Meter Values - Configuration>>
  |충전기는 구성된 측정값을 선택 사항에 추가해야 합니다. <<transaction_event_request,TransactionEventRequest>>의 meterValue 필드(<<transaction_event_enum_type,eventType = Ended>>)는 CSMS로 전송되어 트랜잭션 사용에 대한 자세한 정보를 제공합니다.
|E15.FR.02 |E15.FR.01 +
  AND +
  충전기의 메모리가 부족합니다.
    |충전기는 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>) 메시지에서 미터 데이터를 삭제할 수 있습니다.
|E15.FR.03 |E15.FR.02
  |미터 데이터를 삭제할 때 충전기는 중간 값(첫 번째 값, 세 번째 값, 다섯 번째 등)을 먼저 삭제해야 하며, 목록의 시작 부분에서 값을 삭제하거나 목록에 값을 추가하는 것을 중지해서는 안 됩니다.
|E15.FR.04 |<<tx_stop_point,`TxStopPoint`>>에 "Authorized" 또는 "PowerPathClosed" 또는 "EnergyTransfer"가 포함되어 있고 충전기가 EV에서 ISO 15118 SessionStopReq(Terminate) 메시지를 수신할 때 _triggerReason_ = `StopAuthorized` 인 <<transaction_event_request,TransactionEventRequest>>를 아직 보내지 않은 경우
  |충전기는 <<transaction_event_enum_type,eventType = Ended>> 및 _triggerReason_ = `StopAuthorized` 및 _stoppedReason_ = `StoppedByEV` 인 <<transaction_event_request,TransactionEventRequest>> 메시지를 보내서 CSMS에 충전 트랜잭션이 (EV에 의해) 중단되었음을 알려야 합니다.
|E15.FR.05 |<<tx_stop_point,`TxStopPoint`>>에 "Authorized" 또는 "PowerPathClosed" 또는 "EnergyTransfer"가 포함되어 있지 않고 충전기가 EV에서 ISO 15118 SessionStopReq(Terminate) 메시지를 수신했을 때 _triggerReason_ = `StopAuthorized` 인 <<transaction_event_request,TransactionEventRequest>>를 아직 보내지 않은 경우
  |충전기는 <<transaction_event_enum_type,eventType = Updated>> 및 _triggerReason_ = `StopAuthorized` 인 <<transaction_event_request,TransactionEventRequest>> 메시지를 보내 CSMS에 인증이 종료되었음을 알려야 합니다.
|===