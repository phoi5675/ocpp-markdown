= J. MeterValues
:!chapter-number:

<<<

:sectnums:
== Introduction

이 기능 블록은 충전기가 주기적이고 시계에 맞춰진 MeterValues를 보낼 수 있도록 하는 기능을 설명합니다.

충전기에서 CSMS로 MeterValues를 전송하는 것은 새로운 장치 관리 모니터링 기능이 담당하지만 이 메커니즘은 아직 현장에서 검증되지 않았습니다. 따라서 이전의 <<metervalues_request, MeterValuesRequest>> 메시지는 현재 사용할 수 있습니다.

트랜잭션과 관련된 광범위한 계량 데이터는 의도된 목적에 따라 다양한 방식으로 기록 및 전송할 수 있습니다. 두 가지 명백한 사용 사례가 있지만(하지만 계량기 값의 사용은 이 두 가지에 국한되지 않음):

- <<transaction_meter_values,Transaction Meter Values>>
- <<clock_aligned_meter_values,Clock-Aligned Meter Values>>

두 가지 유형의 계량기 판독값은 <<transaction_event_request,TransactionEventRequest>> 메시지의 _meterValue_ 요소에서 보고될 수 있습니다. <<clock_aligned_meter_values,Clock-Aligned Meter Values>>는 독립형 <<metervalues_request,MeterValuesRequest>> 메시지에서 보고될 수 있습니다.

<<<

[[metervalues_configuration]]
== Configuration

_이 섹션은 규범적입니다._

[[transaction_meter_values]]
=== Transaction Meter Values

자주(예: 1-5분 간격) 미터 판독값을 측정하여 CSMS로 전송(일반적으로 "실시간")하여 웹, 앱, SMS 등을 통해 EV 사용자(일반적으로 충전기에 없음)에게 트랜잭션 진행 상황에 대한 정보 업데이트를 제공할 수 있도록 합니다. OCPP에서는 이를 "샘플링된 미터 데이터"라고 합니다. 판독값의 정확한 빈도와 시간은 "충분히 자주" 측정되는 한 그다지 중요하지 않기 때문입니다. "샘플링된 미터 데이터"는 다음 구성 변수로 구성할 수 있습니다.

- <<sampled_data_tx_started_measurands,`SampledDataTxStartedMeasurands`>>
- <<sampled_data_tx_updated_measurands,`SampledDataTxUpdatedMeasurands`>>
- <<sampled_data_tx_updated_interval,`SampledDataTxUpdatedInterval`>>
- <<sampled_data_tx_ended_measurands,`SampledDataTxEndedMeasurands`>>
- <<sampled_data_tx_ended_interval,`SampledDataTxEndedInterval`>>

<<sampled_data_tx_updated_interval,`SampledDataTxUpdatedInterval`>>는 시간(초)입니다. <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Updated>>) 메시지를 통해 전송되도록 의도된 미터링(또는 기타) 데이터 샘플링. 관례에 따라 "0"(숫자 0) 값은 샘플링된 데이터가 전송되지 않아야 함을 의미하는 것으로 해석됩니다.

<<sampled_data_tx_ended_interval,`SampledDataTxEndedInterval`>>은 <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Ended>>) 메시지에서 전송되도록 의도된 미터링(또는 기타) 데이터 샘플링 사이의 시간(초)입니다.

<<sampled_data_tx_started_measurands,`SampledDataTxStartedMeasurands`>>는 <<transaction_event_request,TransactionEventRequest>>의 _meterValues_ 필드에 포함될 측정량 세트를 규정하는 쉼표로 구분된 목록입니다(<<transaction_event_enum_type,eventType = Started>>).

<<sampled_data_tx_updated_measurands,`SampledDataTxUpdatedMeasurands`>>는 <<transaction_event_request,TransactionEventRequest>>의 _meterValues_ 필드에 포함될 측정량 세트를 규정하는 쉼표로 구분된 목록입니다(<<transaction_event_enum_type,eventType = Updated>>), SampledDataTxUpdatedInterval 초마다.

<<sampled_data_tx_ended_measurands,`SampledDataTxEndedMeasurands`>>는 <<transaction_event_request,TransactionEventRequest>>의 _meterValues_ 필드에 포함될 샘플링된 측정값을 규정하는 쉼표로 구분된 목록입니다(<<transaction_event_enum_type,eventType = Ended>>). 이러한 측정값은 트랜잭션 시작부터 <<sampled_data_tx_ended_interval,`SampledDataTxEndedInterval`>>초마다 가져와야 하며 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>)에서만 전송됩니다.

트랜잭션이 끝날 때 예상되는 측정량 양이 하나의
<<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Ended>>) 메시지에 맞는지 확인해야 합니다. <<sampled_data_tx_ended_measurands,`SampledDataTxEndedMeasurands`>>의 측정량 수를 최소한으로 유지하고 <<sampled_data_tx_ended_interval,`SampledDataTxEndedInterval`>>에서 큰 간격을 구성하여 샘플 수를 작게 유지합니다.

[cols="^.^1s,10",%autowidth.stretch]
|===
|참고 |참고: _트랜잭션 관련_ MeterValues는 <<metervalues_request,MeterValuesRequest>>에서 전송되지 않습니다.
|===

[[clock_aligned_meter_values]]
=== Clock-Aligned Meter Values

그리드 운영자는 재정적으로 인증된 에너지 미터에서 특정 시계 정렬 시간(일반적으로 15분 또는 30분)에 미터 판독값을 가져오도록 요구할 수 있습니다.

"클럭 정렬 미터 값"은 다음 구성 변수로 구성할 수 있습니다.

- <<aligned_data_measurands,`AlignedDataMeasurands`>>
- <<aligned_data_interval,`AlignedDataInterval`>>
- <<aligned_data_tx_ended_measurands,`AlignedDataTxEndedMeasurands`>>
- <<aligned_data_tx_ended_interval,`AlignedDataTxEndedInterval`>>
- <<aligned_data_send_during_idle,`AlignedDataSendDuringIdle`>>

<<aligned_data_interval,`AlignedDataInterval`>>는 클록 정렬 데이터 간격의 크기(초)입니다. 이는 00:00:00(자정)부터 시작하여 하루에 균등하게 간격을 둔 미터 데이터 집계 간격 세트를 정의하며, 이 시간에 충전기는 측정을 수행하여 <<metervalues_request, MeterValuesRequest>> 메시지로 CSMS에 전송해야 합니다. 관례에 따라 "0"(숫자 0) 값은 클록 정렬된 데이터가 전송되지 않아야 함을 의미하는 것으로 해석됩니다.

<<aligned_data_tx_ended_interval,`AlignedDataTxEndedInterval`>>은 클록 정렬된 데이터 간격의 크기(초)입니다. 이는 00:00:00(자정)부터 시작하여 하루에 균등하게 간격을 둔 미터 데이터 집계 간격 세트를 정의하며, <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>) 메시지로 전송되도록 의도되었습니다.

예를 들어, 900(15분)의 값은 매일 0:00에서 시작하여 15분 간격으로 96개로 나누어야 함을 나타냅니다. 0:15, 0:30, 0:45, 1:00, 1:15 등.

<<aligned_data_measurands,`AlignedDataMeasurands`>>는 <<metervalues_request,MeterValuesRequest>> PDU에 <<aligned_data_interval,`AlignedDataInterval`>>초마다 포함될 측정량 세트를 규정하는 쉼표로 구분된 목록입니다.

<<aligned_data_tx_ended_measurands,`AlignedDataTxEndedMeasurands`>>는 <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Ended>>) PDU의 _meterValue_ 요소에 포함될 클록 정렬 주기적 측정값 집합을 트랜잭션의 모든 <<aligned_data_tx_ended_interval,`AlignedDataTxEndedInterval`>>에 대해 규정하는 쉼표로 구분된 목록입니다.

<<aligned_data_send_during_idle,`AlignedDataSendDuringIdle`>>는 진행 중인 트랜잭션이 없는 경우에만 클록 정렬 미터 값을 전송하는 데 사용할 수 있습니다.

[cols="^.^1s,10",%autowidth.stretch]
|===
|참고 |트랜잭션에 관련된 EVSE의 시계 정렬 미터 값은 MeterValuesRequests가 아닌 _context_ = `Sample.Clock`인 TransactionEventRequests에서 전송될 수 있습니다.
|===

=== Multiple Locations/Phases

충전기가 여러 위치 또는 위상에서 동일한 측정량을 측정할 수 있는 경우, 관련 구성 변수 중 하나에서 구성될 때 모든 가능한 위치 및/또는 위상을 보고해야 합니다.

예: _Inlet_(모든 3개 위상)(그리드 연결) 및 _Outlet_(두 EVSE 모두에서 EVSE당 3개 위상)에서 _Current.Import_를 측정할 수 있는 충전기. _Current.Import_는 <<aligned_data_measurands,`AlignedDataMeasurands`>>에서 설정됩니다. <<aligned_data_interval,`AlignedDataInterval`>>은 900(초)으로 설정됩니다. 그런 다음 충전기는 다음을 전송해야 합니다. (15분마다)

- <<metervalues_request,MeterValuesRequest>>: evseId = 0; 3개의 SampledValue 요소(위치 = Inlet인 위상당 하나씩)
- <<metervalues_request,MeterValuesRequest>>: evseId = 1; 3개의 SampledValue 요소, 위치 = Outlet인 단계당 하나씩.
- <<metervalues_request,MeterValuesRequest>>: evseId = 2; 3개의 SampledValue 요소, 위치 = Outlet인 단계당 하나씩.

[cols="^.^1s,10",%autowidth.stretch]
|===
|참고 |구성 변수 <<sampled_data_register_values_without_phases,`SampledDataRegisterValuesWithoutPhases`>>의 값이 _true_인 경우 측정 대상 `Energy.Active.Import.Register`의 미터 값은 개별 단계 값을 보고하지 않고 모든 단계에 대한 총 에너지만 보고합니다.
|===

=== Signed Meter Values

OCPP 2.0.1은 서명된 미터 값을 지원합니다. 충전기가 서명된 미터 값을 지원하는 경우 구성 변수 <<aligned_data_sign_readings,`AlignedDataSignReadings`>> 및 <<sampled_data_sign_readings,`SampledDataSignReadings`>>를 사용하여 이를 보고할 수 있습니다. 그런 다음 CSMS는 이 동일한 변수를 사용하여 서명된 미터 값의 사용을 _켜거나_ _끄는_ 수 있습니다.

활성화된 경우 충전기는 서명된 미터 값을 <<sampled_value_type,SampledValue>>의 _SignedMeterValue_ 필드에 넣습니다.

=== Configuration Examples

다음은 트랜잭션 관련 측정항목에 대한 구성의 몇 가지 예입니다.

**트랜잭션 종료 시 시작/중지에 대한 샘플링된 에너지 레지스터 값만**

- SampledDataCtrlr.TxStartedMeasurands 및 TxUpdatedMeasurands는 비어 있습니다.
- SampledDataCtrlr.TxEndedMeasurands = "Energy.Active.Import.Register"
- SampledDataCtrlr.TxEndedInterval = 0

**트랜잭션 시작, 트랜잭션 중, 트랜잭션 종료 시 에너지 레지스터 값**

- SampledDataCtrlr.TxStartedMeasurands = "Energy.Active.Import.Register"
- SampledDataCtrlr.TxUpdatedMeasurands = "Energy.Active.Import.Register"
- SampledDataCtrlr.TxUpdatedInterval = 300(5분마다)
- SampledDataCtrlr.TxEndedMeasurands = "Energy.Active.Import.Register"
- SampledDataCtrlr.TxEndedInterval = 0

**트랜잭션 중, 트랜잭션 종료 시 시작/중지되는 클록 정렬 레지스터 값만 transction**

- SampledDataCtrlr.TxStartedMeasurands 및 TxUpdatedMeasurands는 비어 있습니다.
- SampledDataCtrlr.TxEndedMeasurands = "Energy.Active.Import.Register"
- SampledDataCtrlr.TxEndedInterval = 0
- AlignedDataCtrlr.Measurands = "Energy.Active.Import.Register"
- AlignedDataCtrlr.Interval = 300(5분마다)

<<<

== Use cases & Requirements

=== MeterValues

:sectnums!:
=== J01 - Sending Meter Values not related to a transaction

.J01 - 트랜잭션과 관련 없는 미터 값 전송
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|번호 |유형 |설명

|1 |이름 |트랜잭션과 관련 없는 미터 값 전송
|2 |ID |J01
|{nbsp} d|_기능 블록_ |J. 미터 값
|3 |목표 |충전기 미터 값에 대한 정보를 제공하기 위해 전기 미터 또는 기타 센서/트랜스듀서 하드웨어를 샘플링합니다.
|4 |설명 |충전기는 미터 값에 대한 정보를 제공하기 위해 전기 미터 또는 기타 센서/트랜스듀서 하드웨어를 샘플링합니다. 구성 설정에 따라 충전기는 미터 값을 전송합니다.
|{nbsp} d|_Actors_ |충전기, CSMS
|{nbsp} d|_시나리오 설명_
|**1.** 충전기는 미터 값을 CSMS로 오프로드하기 위해 <<metervalues_request, MeterValuesRequest>> 메시지를 보냅니다. +
**2.** <<metervalues_request, MeterValuesRequest>> 메시지를 수신하면 CSMS는 <<meter_values_response, MeterValuesResponse>> 메시지로 응답합니다.
|5 |필수 조건 |충전기는 XX초마다 미터 값을 보내도록 구성되어 있습니다. +
실행 중인 트랜잭션이 없습니다.
|6 |사후 조건(들)
|**성공한 사후 조건:** +
해당 없음 +
**실패한 사후 조건:** +
해당 없음
|===

.시퀀스 다이어그램: 미터 값 전송
image::part2/images/figure_91.svg[시퀀스 다이어그램: 미터 값 전송]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7 |오류 처리 |해당 없음
|8 |참고 사항(들)
|위상 필드는 모든 <<measurand_enum_type,Measurands>>에 적용되지 않습니다.

그리드 연결에 대한 커넥터의 위상 회전은 그리드 연결에서 커넥터까지 체인의 모든 구성 요소의 <<phase_rotation,`PhaseRotation`>> 구성 변수를 쿼리하여 파생할 수 있습니다.

각 <<sampled_value_type,sampledValue>>의 특성은 선택 사항인 <<measurand_enum_type,Measurand>>, <<reading_context_enum_type,context>>, <<location_enum_type,location>>, <<sampled_value_type,unit>> 및 <<phase_enum_type,phase>> 필드에 의해 결정됩니다.

선택 사항인 SignedMeterValue 필드에는 디지털 서명된 이진 미터 값 데이터가 포함될 수 있습니다.
|===

==== J01 - Sending Meter Values not related to a transaction - Requirements

.J01 - 요구 사항
[cols="^.^2,<.^6,<.^6,<.^4",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID |전제 조건 |요구 사항 정의 |참고

|J01.FR.01 |{nbsp}
|충전기는 에너지 미터(또는 다른 센서/트랜스듀서 하드웨어)를 샘플링하여 미터 값에 대한 추가 정보를 제공할 수 있습니다.
|충전기가 미터 값을 언제 보낼지는 충전기에 달려 있습니다. 이는 <<set_variables_request,SetVariablesRequest>> 메시지를 사용하여 데이터 수집 간격을 구성하고 수집 및 보고할 데이터를 지정할 수 있습니다.
|J01.FR.02 |{nbsp}
|<<metervalues_request,MeterValuesRequest>> 메시지에는 샘플을 가져온 EVSE의 ID가 포함되어야 합니다. |{nbsp}
|J01.FR.03 |J01.FR.02 AND +
evseId는 0입니다.
|<<metervalues_request, MeterValuesRequest>> 메시지는 전체 충전기와 연결되어야 합니다. |{nbsp}
|J01.FR.04 |J01.FR.03 AND +
<<measurand_enum_type,Measurand>>는 에너지와 관련이 있습니다.
|샘플은 주 에너지 미터에서 가져와야 합니다. |{nbsp}
|J01.FR.05 |모두 동일한 시점에 캡처된 경우.
|각 MeterValue 요소에는 타임스탬프가 포함되어야 합니다. |{nbsp}
|J01.FR.06 |모두 동일한 시점에 캡처된 경우.
|각 MeterValue(s) 요소에는 하나 이상의 개별 SampledValue 요소 집합이 포함되어야 합니다. |{nbsp}
|J01.FR.07 |{nbsp}
|선택적 측정량 필드는 측정/보고되는 값의 유형을 지정해야 합니다. |{nbsp}
|J01.FR.08 |{nbsp}
|선택적 컨텍스트 필드는 판독을 트리거하는 이유/이벤트를 지정해야 합니다. |{nbsp}
|J01.FR.09 |{nbsp}
|선택적 위치 필드는 측정이 수행되는 위치를 지정해야 합니다.
|(예: 입구, 출구).
|J01.FR.10 |{nbsp}
|선택적 위상 필드는 값이 적용되는 전기 설비의 위상 또는 위상을 지정해야 합니다. |{nbsp}
|J01.FR.11 |{nbsp}
|충전기는 전기 미터(또는 없는 경우 그리드 연결) 관점에서 모든 위상 번호 종속 값을 보고해야 합니다. |{nbsp}
|J01.FR.13 |구성 요소의 위상 회전을 보고할 때
|충전기는 그리드 연결을 기준으로 위상 회전을 보고해야 합니다. |{nbsp}
|J01.FR.14 |<<aligned_data_interval,AlignedDataCtrlr.Interval>> > 0 +
AND +
측정량이 전송되는 EVSE가 트랜잭션에 관련되지 않은 경우
|충전기는 모든 _evseIds_, 위치 및 구성된 측정량이 지원되는 위상에 대해 모든 AlignedDataCtrlr.Interval에서 <<aligned_data_measurands,AlignedDataCtrlr.Measurands>>의 측정량에 대한 <<metervalues_request,MeterValuesRequest>> 메시지를 CSMS에 전송해야 합니다.
|특정 측정량이 모든 위치에서 사용 가능하지 않을 수 있습니다. 예를 들어, _evseId_ = 0(그리드 미터)에는 "Current.Offered" 또는 "SoC" 측정값이 없습니다. J01.FR.22도 참조하세요.
|J01.FR.15 |J01.FR.14 +
AND +
측정량 양이 1 <<metervalues_request, MeterValuesRequest>>에 비해 너무 많습니다.
|충전기는 모든 측정량을 보내기 위해 여러 <<metervalues_request, MeterValuesRequest>> 메시지를 사용할 수 있습니다. |{nbsp}
|J01.FR.17 |{nbsp}
|MeterValue의 타임스탬프는 모든 <<sampled_value_type,SampledValues>>에 적용되어야 합니다. |{nbsp}
|J01.FR.18 |CSMS가 <<metervalues_request, MeterValuesRequest>>를 수신하면
|CSMS는 <<meter_values_response, MeterValuesResponse>>로 응답해야 합니다.
|<<meter_values_response, MeterValuesResponse>>로 응답하지 못하면 충전기에서 동일한 메시지를 다시 시도할 수 있습니다.
|J01.FR.19 |EVSE에 대해 `AlignedDataSendDuringIdle`이 true로 설정되고 +
지정된 EVSE에 진행 중인 트랜잭션이 있는 경우.
|충전기는 이 EVSE에 대해 클록 정렬 미터 값 전송을 중지해야 합니다. |{nbsp}
|J01.FR.20 |충전기에 대해 `AlignedDataSendDuringIdle`이 true로 설정되고 충전기에 진행 중인 트랜잭션이 있는 경우.
|충전기는 모든 EVSE와 주 전력 미터에 대해 클록 정렬 미터 값 전송을 중지해야 합니다. |{nbsp}
|J01.FR.21 |<<aligned_data_sign_readings,`AlignedDataSignReadings`>>는 _참_입니다.
|충전기는 데이터 서명을 지원하는 구성 요소에서 서명된 미터 값을 검색하여 _signedMeterValue_ 필드에 넣어야 합니다. |{nbsp}
|J01.FR.22 |<<aligned_data_interval,AlignedDataCtrlr.Interval>> > 0 +
AND +
측정량이 전송된 EVSE가 트랜잭션에 관여하는 경우
|충전기는 다음 중 하나를 전송해야 합니다. +
- <<metervalues_request,MeterValuesRequest>> 메시지 또는 +
- <<transaction_event_request,TransactionEventRequest>>(_triggerReason_ = `Sample.Clock`) +
<<aligned_data_measurands,AlignedDataCtrlr.Measurands>>의 측정량에 대한 CSMS에 AlignedDataCtrlr.Interval마다 전송합니다.
|J01.FR.14도 참조하세요.
|===

<<<

=== J02 - Sending transaction related Meter Values

.J02 - 트랜잭션 관련 미터 값 전송
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|번호 |유형 |설명

|1 |이름 |트랜잭션 관련 미터 값 전송
|2 |ID |J02
|{nbsp} d|_기능 블록_ |J. 미터 값
|3 |목표 |에너지 미터 또는 기타 센서/트랜스듀서 하드웨어를 샘플링하여 충전기의 트랜잭션 관련 미터 값에 대한 정보를 제공합니다.
|4 |설명 |충전기는 에너지 미터 또는 기타 센서/트랜스듀서 하드웨어를 샘플링하여 트랜잭션 관련 미터 값에 대한 정보를 제공합니다. 구성 설정에 따라 충전기는 트랜잭션 중에 미터 값을 전송합니다.
|{nbsp} d|_Actors_ |충전기, CSMS
|{nbsp} d|_시나리오 설명_
|**1.** 충전기는 <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Updated>>) 메시지를 보내 미터 값을 CSMS로 오프로드합니다. +
**2.** <<transaction_event_request,TransactionEventRequest>> 메시지를 수신하면 CSMS는 <<transaction_event_response,TransactionEventResponse>> 메시지로 응답합니다.
|5 |필수 조건 |충전기는 XX초마다 미터 값을 보내도록 구성되어 있습니다. +
트랜잭션이 실행 중입니다.
|6 |사후 조건(들) ​​
|**성공 사후 조건:** +
해당 없음 +
**실패 사후 조건:** +
해당 없음
|===

.시퀀스 다이어그램: 트랜잭션 관련 미터 값 전송
image::part2/images/figure_92.svg[시퀀스 다이어그램: 트랜잭션 관련 미터 값 전송]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7 |오류 처리
|_오프라인_일 때 충전기는 충전기가 온라인 상태였다면 CSMS에 전송했을 트랜잭션 관련 메시지(트랜잭션에 속하는 미터 값)를 큐에 넣어야 합니다.
|8 |주의 사항(들)
|단계 필드는 모든 <<measurand_enum_type,Measurands>>에 적용되지 않습니다.

그리드 연결에 대한 Connector의 위상 회전은 그리드 연결에서 Connector까지 체인의 모든 구성 요소의 <<phase_rotation,`PhaseRotation`>> 구성 변수를 쿼리하여 얻을 수 있습니다.

각 <<sampled_value_type,sampledValue>>의 특성은 선택적 <<measurand_enum_type,Measurand>>, <<reading_context_enum_type,context>>, <<location_enum_type,location>>, <<sampled_value_type,unit>> 및 <<phase_enum_type,phase>> 필드에 의해 결정됩니다.

선택적 SignedMeterValue 필드에는 디지털 서명된 이진 미터 값 데이터가 포함될 수 있습니다.
|===

==== J02 - Sending transaction related Meter Values - Requirements

.J02 - 요구 사항
[cols="^.^2,<.^6,<.^6,<.^4",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID |전제 조건 |요구 사항 정의 |참고

|J02.FR.01 |{nbsp}
|충전기는 에너지 미터(또는 다른 센서/트랜스듀서 하드웨어)를 샘플링하여 미터 값에 대한 추가 정보를 제공할 수 있습니다.
|충전기가 미터 값을 보내는 시점은 충전기에 달려 있습니다. 이는 <<set_variables_request,SetVariablesRequest>> 메시지를 사용하여 데이터 수집 간격을 구성하고 수집 및 보고할 데이터를 지정할 수 있습니다.
|J02.FR.02 |모두 동일한 시점에 캡처된 경우.
|각 MeterValue 요소에는 하나 이상의 개별 SampledValue 요소 집합이 포함되어야 합니다. |{nbsp}
|J02.FR.03 |{nbsp}
|선택적 측정량 필드는 측정/보고되는 값의 유형을 지정해야 합니다. |{nbsp}
|J02.FR.04 |{nbsp}
|선택적 컨텍스트 필드는 판독을 트리거하는 이유/이벤트를 지정해야 합니다. |{nbsp}
|J02.FR.05 |{nbsp}
|선택적 위치 필드는 측정이 수행되는 위치를 지정해야 합니다.
|(예: 입구, 출구).
|J02.FR.06 |{nbsp}
|선택적 위상 필드는 값이 적용되는 전기 설비의 위상 또는 위상을 지정해야 합니다. |{nbsp}
|J02.FR.07 |{nbsp}
|충전기는 전력계(또는 없는 경우 그리드 연결) 관점에서 모든 위상 번호 종속 값을 보고해야 합니다. |{nbsp}
|J02.FR.09 |구성 요소의 위상 회전을 보고할 때
|충전기는 그리드 연결을 기준으로 위상 회전을 보고해야 합니다. |{nbsp}
|J02.FR.10 |<<transaction_event_request,TransactionEventRequest>> 메시지에 <<transaction_event_enum_type,eventType = Started>> 또는 <<transaction_event_enum_type,eventType = Update>>가 하나 이상의 _sampledValue_ 요소가 있는 하나의 _meterValue_가 아닌 여러 _meterValue_ 요소가 포함된 경우
|모든 _meterValue_ 요소에는 현재 샘플링 간격 내에 있는 타임스탬프가 있어야 합니다. 즉, (트랜잭션 이벤트 타임스탬프 - <<sampled_data_tx_updated_interval,`SampledDataTxUpdatedInterval`>>) < _meterValue.timestamp_ <= 트랜잭션 이벤트 타임스탬프
|_eventType_ = `Ended`인 경우에만 TransactionEventRequest에 여러 간격에 대한 미터 값이 있을 수 있습니다.
|J02.FR.11 | <<sampled_data_tx_updated_interval,`SampledDataTxUpdatedInterval`>> > 0일 때
|충전기는 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>)를 _triggerReason_ = `MeterValuePeriodic`로 전송해야 하며, 측정값은 SampledDataCtrlr.TxUpdatedInterval마다 MeterValue 필드에 <<sampled_data_tx_updated_interval,SampledDataCtrlr.TxUpdatedMeasurands>>에 구성되어야 합니다.
<<sampled_data_tx_started_measurands,SampledDataCtrlr.TxStartedMeasurands>>를 전송하려면 E01을 참조하고, <<sampled_data_tx_ended_measurands,SampledDataCtrlr.TxEndedMeasurands>>를 전송하려면 E06을 참조하세요.
|J02.FR.12 |J02.FR.11 +
AND +
_Offline_ +
AND +
충전기의 메모리가 부족합니다.
|충전기는 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>) 메시지를 삭제할 수 있습니다. |{nbsp}
|J02.FR.13 |J02.FR.12
|<<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>) 메시지를 삭제할 때 충전기는 중간 메시지를 먼저 삭제해야 하며(첫 번째 메시지, 세 번째 메시지, 다섯 번째 메시지 등), 처음부터 메시지를 삭제하거나 큐에 메시지를 추가하는 것을 중단해서는 안 됩니다. |{nbsp}
|J02.FR.14 |J02.FR.11 +
AND +
1 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>)에 대한 미터 데이터 양이 너무 많습니다.
|충전기는 모든 측정값을 보내기 위해 동일한 _타임스탬프_를 사용하여 여러 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>) 메시지를 사용할 수 있습니다. |{nbsp}
|J02.FR.16 |{nbsp}
|단일 충전 트랜잭션 또는 비트랜잭션 소비자(예: 충전기 내부 전원 공급, 전체 공급)와 관련된 모든 "등록" 값은 시간에 따라 단조롭게 증가해야 합니다.
|미터 교체의 경우는 제외합니다. <<measurand_enum_type,MeasurandEnumType>>을 참조하세요.
|J02.FR.17 |{nbsp}
|감사 가능성을 개선하기 위해 ".Register" 값은 전기 계량 하드웨어의 비휘발성 레지스터에서 직접 읽은 대로 정확히 보고해야 하며, 트랜잭션 시작 시 0으로 다시 기준화해서는 안 됩니다.
|이렇게 하면 하드웨어 오류, 미터 교체, 오배선, 사기 등으로 인해 연속 트랜잭션 간에 "누락된 에너지"를 식별할 수 있으며, CSMS가 모든 트랜잭션의 시작 레지스터 값이 동일한 커넥터에서 이전 트랜잭션의 완료 레지스터 값과 동일함을 확인할 수 있습니다.
|J02.FR.18 |{nbsp}
|<<meter_value_type,MeterValue>>의 타임스탬프는 모든 <<sampled_value_type,SampledValues>>에 적용해야 합니다. |{nbsp}
|J02.FR.19 |CSMS가 <<transaction_event_request,TransactionEventRequest>>를 수신하는 경우
|CSMS는 <<transaction_event_response,TransactionEventResponse>>로 응답해야 합니다.
|<<transaction_event_response,TransactionEventResponse>>로 응답하지 못하면 충전기가 동일한 메시지를 다시 시도할 수 있습니다.
|J02.FR.20 |<<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>) AND +
에서 미터 데이터를 보내도록 구성된 경우 미터 데이터 양이 하나의 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>) 메시지에 비해 너무 많습니다.
|충전기는 메시지에 맞을 때까지 샘플을 제거할 수 있습니다. 샘플을 제거할 때 충전기는 중간 샘플을 먼저 제거해야 합니다(예: 2번째 샘플, 4번째 샘플, 6번째 샘플 등).
|샘플은 청구에 영향을 미치지 않는 방식으로 제거해야 합니다. E06.FR.12도 참조하세요.
|J02.FR.21 |<<sampled_data_sign_readings,`SampledDataSignReadings`>>는 _참_입니다.
|충전기는 데이터 서명을 지원하는 구성 요소에서 서명된 미터 값을 검색하여 _signedMeterValue_ 필드에 입력해야 합니다. |{nbsp}
|J02.FR.22 |{nbsp}
|<<transaction_event_request,TransactionEventRequest>> 메시지에서 보고된 미터 값은 모두 트랜잭션이 발생하는 EVSE와 관련이 있어야 합니다. |{nbsp}
|===

:sectnums:
=== ISO 15118 MeterValue signing

:sectnums!:
=== J03 - Charging Loop with metering information exchange

.J03 - 계량 정보 교환이 있는 충전 루프
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|번호 |유형 |설명

|1 |이름 |계량 정보 교환이 있는 충전 루프
|2 |ID |J03
|{nbsp} d|_기능 블록_ |J. 미터 값
|{nbsp} d|_참조_ |<<iso15118_1,ISO15118-1>> F1
|3 |목표 |<<iso15118_1,ISO15118-1>> 참조, 사용 사례 목표 F1, 37페이지.
|4 |설명 |<<iso15118_1,ISO15118-1>> 참조, 사용 사례 설명 F1, 37페이지.
|5 |필수 조건
|- 기능 블록 C의 사용 사례에 따른 권한이 적용되는 경우 성공적으로 완료되어야 합니다.

<<iso15118_1,ISO15118-1>>, 사용 사례 전제 조건 F1, 37페이지를 참조하세요.
|6 d|_Actors_ |EV, EVSE, 충전기
|7 |통합 시나리오 설명
|**15118**

**1a.** EV가 충전기에 ChargingStatusReq(AC 충전의 경우) 메시지를 보내고, EVSE가 재정 미터의 미터 값이 포함된 ChargingStatusRes를 반환합니다. +
**1b.** EV가 충전기에 CurrentDemandReq(DC 충전의 경우) 메시지를 보내고, EVSE가 재정 미터의 미터 값이 포함된 CurrentDemandRes를 반환합니다. +
**2.** EV가 충전기에 MeteringReceiptReq를 보내 미터 값 수신을 확인합니다.
|8 |사후 조건 |<<iso15118_1,ISO15118-1>> 참조, 사용 사례 종료 조건 F1, 37페이지.
|===

.측정 정보 교환이 있는 충전 루프
image::part2/images/figure_93.svg[측정 정보 교환이 있는 충전 루프]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|9 |오류 처리 |해당 없음
|10 |비고 |해당 없음
|===

==== J03 - Charging Loop with metering information exchange - Requirements

.J03 - 요구 사항
[cols="^.^2,<.^6,<.^6,<.^4",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID |전제 조건 |요구 사항 정의 |참고

|J03.FR.04 |충전기가 EV에서 ISO 15118 서명 MeteringReceiptReq 메시지를 수신하는 경우
|충전기는 MeteringReceiptReq 메시지의 미터 값을 <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Updated>>) 메시지로 CSMS에 전달해서는 안 됩니다. 대신 충전기는 사용 사례 J02에 설명된 대로 트랜잭션 관련 미터 값을 보냅니다.
|이는 충전기가 EV에 MeteringReceiptReq 메시지를 보내도록 요구할 수 없다는 것을 의미하지 않습니다. 충전기에서의 구현은 재정 미터에서 CSMS로 전송된 모든 미터 값(사용 사례 J02에 따라)이 먼저 EV의 MeterReceiptReq에 의해 확인되어야 하는 방식일 수 있습니다.
|===
