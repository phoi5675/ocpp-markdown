= OCPP 2.0.1
:doctype: book
:toc: 
:toclevels: 2
:toc-title: Table of Contents
:icons: font
:icon-set: far

[discrete]
== Part 1 - Architecture & Topology

Edition 3 FINAL, 2024-05-06

<<<

[discrete]
== Disclaimer

저작권 © 2010 - 2024 Open Charge Alliance. 모든 권리 보유.

이 문서는 _*크리에이티브 커먼즈 저작자표시-변경금지 4.0 국제 공공 라이선스*_ +
(https://creativecommons.org/licenses/by-nd/4.0/legalcode)에 따라 제공됩니다.

<<<

[discrete]
== Version History

[%autowidth.stretch,options="header,autowidth"]
|===
|버전 |날짜 |설명

|2.0.1 Edition 3 |2024-05-06 |OCPP 2.0.1 Edition 3. OCPP 2.0.1 Part 1부터 Errata 2024-04까지 모든 Errata가 이 버전의 사양에 병합되었습니다.
|2.0.1 |2020-03-31 |OCPP 2.0.1의 최종 버전
|2.0 |2018-04-11 |OCPP 2.0 2018년 4월 +
  이 아키텍처 및 토폴로지 문서의 첫 번째 릴리스
|===

== Introduction

=== Goal of this document

이 문서의 목적은 OCPP 2.0.1에 대한 여러 아키텍처 관련 주제를 설명하는 것입니다.

OCPP는 원래 백오피스, OCPP의 _충전기 관리 시스템_(이 문서에서는 CSMS)과 충전기 간의 양방향 통신을 위해 고안되었습니다. 이 프로토콜은 더욱 발전했으며, 모든 새로운 개정판에서 새로운 기능과 옵션이 추가되었습니다. 다양한 유형의 충전기에 대해 다양한 아키텍처에서 사용할 수 있는 프로토콜로 발전했습니다.

이 문서에서는 원래의 "간단한" 설정 CSMS <> 충전기 외에도 OCPP 사용에 대한 추가 설명으로 여러 토폴로지를 설명합니다. 또한 모든 유형의 충전기를 구성하고 모니터링하는 장치 관리 개념, OCPP 정보 모델 및 3계층 모델이 설명됩니다.

이 문서는 부분적으로 **정보 제공** 이고 부분적으로 **규범적** 이며 OCPP 사용을 제한하려는 것이 아닙니다. 다만 OCPP의 제작자가 이 사양 버전을 만들 때 OCPP를 어떤 용도로 사용할 것인지에 대한 설명을 추가하기 위함입니다. 따라서 이 문서는 OCPP의 Part 2에 있는 프로토콜 사양을 읽는 사람이 어떻게 사용할 수 있는지 이해하도록 지원하기 위한 것입니다.

=== Terms and abbreviations

이 섹션에는 이 문서 전체에서 사용되는 용어와 약어가 포함되어 있습니다.

==== Terms

[%autowidth.stretch,options="header,autowidth"]
|===
|용어 |의미
^s|충전기 |충전기는 EV를 충전할 수 있는 물리적 시스템입니다. 충전기에는 하나 이상의 EVSE가 있습니다.
^s|커넥터 |이 명세서에서 사용되는 커넥터라는 용어는 충전기에서 독립적으로 작동하고 관리되는 전기 콘센트를 말합니다. 즉, 이는 단일 물리적 커넥터에 해당합니다. 어떤 경우에는 EVSE에 여러 물리적 소켓 유형 및/또는 고정 케이블/커넥터 배열(예: 커넥터)이 있어 다양한 차량 유형(예: 4륜 EV 및 전기 스쿠터)을 용이하게 할 수 있습니다.
^s|EVSE |EVSE는 한 번에 하나의 EV에 에너지를 공급할 수 있는 충전기의 독립적으로 작동하고 관리되는 부분으로 간주됩니다.
^s|로컬 포트 ​​스마트 미터 |스마트 미터의 로컬 포트는 미터 판독값 및 사용에 대한 정보에 대한 액세스를 제공하는 디지털 전기 미터의 포트(예: 직렬)입니다.
|===

==== Abbreviations

[%autowidth.stretch,options="header,autowidth"]
|===
|약어 |의미

^|DSO |배전 시스템 운영자(Distribution System Operator)
^|CSO |충전기 운영자(Charging Station Operator)
^|CSMS |충전기 관리 시스템(Charging Station Management System)
^|EMS |에너지 관리 시스템(Energy Management System). 이 문서에서 이는 지역 및/또는 계약적 제약 및/또는 계약적 인센티브에 따라 지역 부하(소비 및 생산)를 관리하는 장치로 정의됩니다. 여기에는 예를 들어 PV, 배터리 저장 장치의 센서 및 제어와 같은 추가 입력이 있습니다.
^|EVSE |전기 자동차 공급 장비(Electric Vehicle Supply Equipment)
^|LC |로컬 컨트롤러(Local Controller). 이 문서에서 이는 CSMS와 독립적으로 충전기에 메시지를 보낼 수 있는 장치로 정의됩니다. 이에 대한 일반적인 사용 사례는 OCPP의 2부 스마트 충전 장에 설명된 로컬 스마트 충전 케이스로, 로컬 컨트롤러가 충전기에 충전 한도를 부과할 수 있습니다.
^|LP |로컬 프록시(Local Proxy). 메시지 라우터 역할을 합니다.
|===

== 3-tier model

_이 섹션은 정보 제공을 목적으로 합니다._

OCPP 사양의 용어를 이해하려면 이 사양의 시작점을 이해하는 것이 중요합니다. OCPP 사양은 EV를 충전할 수 있는 물리적 시스템으로 충전기라는 용어를 사용합니다. 충전기에는 하나 이상의 EVSE(전기 자동차 공급 장비)가 있을 수 있습니다. EVSE는 한 번에 하나의 EV에 에너지를 공급할 수 있는 충전기의 일부로 간주됩니다. 이 사양에서 사용되는 커넥터라는 용어는 충전기에서 독립적으로 작동하고 관리되는 전기 콘센트를 말합니다. 즉, 이는 단일 물리적 커넥터에 해당합니다. 어떤 경우에는 EVSE에 여러 물리적 소켓 유형 및/또는 고정 케이블/커넥터 배열이 있어 다양한 차량 유형(예: 4륜 EV 및 전기 스쿠터)을 용이하게 할 수 있습니다. 이 설정을 3계층 모델이라고 하며 아래 그림에 시각화되어 있습니다.

.OCPP에서 사용되는 3계층 모델
image::part1/images/figure_1.svg[OCPP에서 사용되는 3계층 모델]

[cols="^.^1s,10",%autowidth.stretch]
|===
|NOTE |이 섹션에서는 통신 목적으로 논리적 수준에서 충전 인프라를 설명합니다. 물리적 하드웨어에 매핑을 적용하고자 하지 않습니다. 이는 제조업체의 선택입니다. 예를 들어, EVSE는 충전기에 통합되어 해당 장치의 일부로 보일 수 있지만, 자체 케이스가 있고 물리적 엔티티 충전기 외부에 있을 수도 있습니다. 예를 들어 20개의 EVSE와 커넥터가 있는 충전 플라자가 1개의 충전기로 1개의 모뎀을 통해 CSMS와 통신하는 경우 OCPP에서 1개의 충전기로 간주됩니다.
|===
<<<

== Information Model

_이 섹션은 정보 제공을 목적으로 합니다._

OCPP 메시지의 복잡성이 커짐에 따라 OCPP 2.0.1은 OCPP의 메시지와 고유한 스키마에 대한 청사진인 _정보 모델_ 을 기반으로 합니다. 정보 모델이란 모든 속성을 가진 실제 객체를 설명하는 논리적 객체 집합을 의미합니다. 이는 프로토콜의 정보 구조에 대한 유익한 표현을 제공합니다. 또한 OCPP 내의 객체를 재사용 가능하게 만들고 메시지와 자동으로 생성된 메시지 스키마를 일관되게 정의할 수 있습니다(Part 3).

정보 모델은 도메인 모델 또는 핵심 모델이라고도 하는 모델로, OCPP 메시지와 데이터 유형이 생성되는 기반입니다. 이러한 데이터 유형은 OCPP 1.6 사양에서 추출되었으며 핵심 데이터 유형과 정규화된 데이터 유형이라고 합니다. 아래 그림은 정보 모델의 데이터 유형이 어떻게 구성되는지 보여줍니다.

Par 2 - Specification에서 데이터 유형 장에서 일부 데이터 유형에는 Common: 접두사가 있습니다. 이는 정보 모델에서 유래되었습니다. 이는 DataType이 다른 DataType 및 Messages 간에 공유될 수 있음을 의미합니다. 이는 장치의 OCPP 구현에 영향을 미치지 않습니다.

.예시 데이터 유형
image::part1/images/figure_2.svg[예시 데이터 유형]

정보 모델은 모델을 더 잘 살펴보기 위해(가독성을 위해) 여러 "함수"로 나뉩니다:

- Transactions
- SmartCharging
- Metering
- Security (Profiles/Authorization)
- Communication
- SecondaryActorSchedule

함수별 실제 모델에 대한 자세한 내용은 부록을 참조하세요.

<<<

[[device_model]]
== Device Model: Addressing Components and Variables

장치 모델은 OCPP 내의 일반화된 메커니즘을 말하며, 이를 통해 모든 충전기 모델이 어떻게 구축되는지 보고할 수 있으므로 모든 CSMS에서 관리할 수 있습니다. 장치 모델로 충전기를 관리하려면(즉, "장치를 관리하려면") 충전기의 구조를 미리 정의하지 않고도 충전기를 세부적으로 구성하고 모니터링하기 위한 여러 메시지와 사용 사례가 정의됩니다. 이를 위해 OCPP는 충전기에 대한 광범위한 정보를 교환할 수 있는 일반화된 메커니즘을 제공합니다. 이 버전의 장치 모델은 3계층 모델(충전기, EVSE, 커넥터)을 시작점으로 삼고 있으므로 장치 모델로 작성된 모든 설명은 이 세 계층을 따릅니다. 이 장의 나머지 부분에서는 충전기와 CSMS 간에 교환할 수 있는 데이터(및 관련 메타데이터)가 어떻게 보이는지 설명합니다. 장치를 관리하는 데 사용되는 사용 사례와 메시지는 여기에서 설명하지 않고 Part 2 - Specificaiton에서 설명합니다. 이 장에서는 데이터 모델에만 초점을 맞춥니다.

=== Components

OCPP 2.0.1에서 충전기는 일반적으로 물리적 장치(데이터 수집 및/또는 제어를 위해 연결된 외부 장비 포함), 논리적 기능 또는 논리적 데이터 엔터티를 나타내는 _"구성 요소"_ 세트로 모델링됩니다. 다양한 유형의 _component_ 는 주로 _표준화된_ 구성 요소의 이름(OCPP 2c 부분 참조)이거나 새롭고 사전 표준화된 장비, 공급업체별 확장 등의 경우 사용자 지정/비표준화된 구성 요소 이름인 ComponentName으로 식별됩니다.

_ChargingStation_ (TopLevel), _EVSE_ 및 _Connector_ 는 충전기의 세 가지 주요 "계층"을 나타내며 많은 OCPP 데이터 구조에서 널리 사용되는 암묵적 "위치 기반" 주소 지정 체계를 구성합니다. 각 "계층"에는 계층을 나타내는 동일한 이름의 구성 요소가 있습니다. 예를 들어, 충전기의 EVSE 1은 "EVSE"(인스턴스 이름 없음)라는 이름의 구성 요소로 표현되고 "_evseId_ = 1"입니다. 마찬가지로 EVSE 1의 Connector 1은 "Connector"(인스턴스 이름 없음)라는 이름의 구성 요소로 표현되고 "_evseId_ = 1, _connectorId_ = 1"입니다.

기본적으로 모든 _components_ 는 _ChargingStation_ 계층에 있지만, 모든 구성 요소의 개별 인스턴스는 EVSE 또는 EVSE 및 Connector 식별 번호를 구성 요소 주소 지정 참조의 일부로 포함하여 특정 _EVSE_ 또는 특정 _Connector_(특정 EVSE에 있음)와 연관될 수 있습니다.

또한, 구성 요소의 인스턴스가 두 개 이상(기능적 차원에서) 있을 수 있으며, 이는 다중 발생 물리적 또는 논리적 구성 요소(예: 전력 변환기 모듈, 팬 뱅크, 상주 펌웨어 이미지 등)를 나타냅니다.

각 고유한 _component_ 인스턴스는 (선택 사항) _componentInstance_ 주소 지정 키로 고유하게 식별됩니다. _componentInstance_ 가 제공되지 않으면 _component_ 의 기본 또는 유일한 인스턴스가 참조됩니다.

_Components_ 는 자체적으로 데이터를 보유하지 않습니다. 각 구성 요소 인스턴스와 관련된 모든 외부 액세스 가능한 데이터는 변경 사항을 읽고, 설정하고, 모니터링할 수 있는 _variables_ 집합으로 표현됩니다. 구성 요소와 하나 이상의 변수의 관계는 아래에 설명되어 있습니다.

.Component 및 변수
image::part1/images/figure_3.svg[Component 및 변수]

아래 표는 몇 가지 일반적인 구성 요소(표준화된 구성 요소 이름)와 기본 홈 충전기와 일반적인 공공 충전기에서 일반적으로 발생하는 계층적 위치 수준의 예를 보여줍니다.

[%autowidth.stretch,cols="1,1,1",options="header",frame=all,grid=all]
|===
3.+<|기본 홈 충전기 구성 예

s|ChargingStation 계층 s|EVSE 계층 s|Connector 계층
|ChargingStation(기기 자체) |EVSE(기기 자체) |Connector(기기 자체)
|RadioLink |ControlMetering |PlugRetentionLock
|TokenReader |OverCurrentBreaker |{nbsp}
|Controller |RCD |{nbsp}
|{nbsp} |ChargingStatusIndicator |{nbsp}
|===

[%autowidth.stretch,cols="1,1,1",options="header",frame=all,grid=all]
|===
3.+<|공공 충전기 예 구성

s|충전기 계층 s|EVSE 계층 s|커넥터 계층
|충전기(기기 자체) |EVSE(기기 자체) |커넥터(기기 자체)
|전기 피드 |전기 피드 |액세스 보호
|토큰 판독기 |토큰 판독기 |플러그 유지 잠금
|디스플레이 |디스플레이 |{nbsp}
|재정 계량 |재정 계량 |{nbsp}
|시계 |제어 계량 |{nbsp}
|컨트롤러 |과전류 차단기 |{nbsp}
|{nbsp} |RCD |{nbsp}
|{nbsp} |충전 상태 표시기 |{nbsp}
|===

=== Variables

모든 _component_ 에는 여러 개의 _변수_ 가 있으며, 이는 해당 _component_ 에 적용 가능한 모든(외부에서 볼 수 있는) 데이터(구성 매개변수, 측정된 값(예: 전류 또는 온도) 및/또는 변수 값에 대한 모니터링된 변경 사항 포함)를 보관, 설정, 읽거나 보고하는 데 사용할 수 있습니다.

많은 _component_ 에는 본질적으로 구성 요소 유형(예: _Connector_ 구성 요소의 _ConnectorType_)에 고유한 연관된 _변수_ 가 있을 수 있지만, 글로벌 및/또는 선택적 기준으로 표준화된 고수준 이벤트 알림 및 상태/상태 보고(예: _Problem_, _Active_)를 제공하고 인벤토리/검색 프로세스 중에 구성 요소 존재, 가용성 등을 보고하는 데 사용되는 최소한의 표준화된 _변수_ 가 있습니다(예: _Available_, _Enabled_). 충전기는 읽기 전용이고 _true_로 설정된 경우 기본 변수 _Present_, _Available_ 및 _Enabled_ 를 보고할 필요가 없습니다. 충전기가 _Present_, _Available_ 및/또는 _Enabled_ 를 보고하지 않는 경우 중앙 시스템은 이를 읽기 전용이고 _true _로 설정되었다고 가정해야 합니다. 변수는 다양한 일반적인 범용 데이터 유형(부울, 정수, 소수, 날짜-시간, 문자열) 중 하나일 수 있지만 허용 가능한 값을 특정 범위, 열거형 목록, 집합 또는 정렬된 목록으로 제한할 수도 있습니다.

복잡한 구성 요소를 지원하기 위해 모든 구성 요소와 연관된 주어진 변수 이름의 인스턴스가 두 개 이상 있을 수 있습니다(예: 여러 지점에서 온도, 전류 또는 전압을 보고하는 전력 변환기 모듈).

각 고유한 _variable_ 인스턴스는 (선택 사항) _variableInstance_ 주소 지정 키 문자열 값으로 고유하게 식별됩니다. _variableInstance_ 가 제공되지 않으면 _variable_ 의 기본 인스턴스 또는 유일한 인스턴스가 참조됩니다.

=== Characteristics and Attributes

각 _변수_ 는 기본(_"실제"_) 값 외에도 동일한 기본 _변수_ 이름과 _변수 인스턴스_ 에 연결된 연관된 보조 데이터 집합을 가질 수 있습니다.

이렇게 하면 일관성과 검색 가능성이 부족한 보조 변수 이름(예: FanSpeed, FanSpeedUnits, MinimumFanSpeed, BaseFanSpeed)의 혼란스러운 클러스터로 _변수_ 네임스페이스가 어지럽게 되는 것을 크게 방지할 수 있습니다.

보조 변수 데이터에는 다음이 포함됩니다.

* 변수 특성 메타데이터(읽기 전용)
** 측정 단위(V, W, kW, kWh 등)
** 데이터 유형(정수, 10진수, 문자열, 날짜, OptionList 등)
** 하한
** 상한
** 열거 변수에 허용되는 값 목록
* 변수 속성(읽기-쓰기):
** 실제 값
** 대상 값
** 구성된 하한
** 구성된 상한
** 가변성(값을 변경할 수 있는지 여부, 예: ReadOnly 또는 ReadWrite)
** 지속성(재부팅 또는 정전 시 값이 보존되는지 여부)

아래 그림은 하나 이상의 VariableAttributes와 변수의 관계를 보여줍니다.

.변수 속성 및 특성
image::part1/images/figure_4.svg[변수 속성 및 특성]

DeviceModel을 사용하여 (물리적) 장치와 (가상) 컨트롤러 구성 요소를 구현하는 방법에는 차이가 있습니다. (가상) 컨트롤러 구성 요소는 Part 2의 "Referenced Components and Variables" 챕터에 설명된 대로 구현해야 합니다.

이러한 종류의 구성 요소/변수는 variableAttribute 유형 'Actual'만 사용합니다. 이 variableAttribute가 쓰기 가능한지 여부에 따라 CSMS는 이를 사용하여 새 값을 설정할 수 있습니다.

(물리적) 장치는 구현하기가 조금 더 복잡합니다. 예를 들어, 팬 속도가 있는 팬이 있고 (물리적) 제한 범위가 0~1000입니다. 하지만 팬이 작동을 멈출 수 있으므로 값을 200 미만으로 설정해서는 안 됩니다. 그리고 500 이상으로 설정해서는 안 됩니다. 장기적으로 팬에 좋지 않기 때문입니다. DeviceModel을 사용하여 이 장치를 구현하는 경우 다음과 같이 정의할 수 있습니다.

[cols="<.^1s,<.^1s,<.^1s,<.^3",%autowidth.stretch,frame=all,grid=all]
|===
|구성 요소 |name 2.+d|팬
.13+|변수 |name 2.+d|팬 속도
.3+|변수 속성 1 |type d|실제
|value d|<팬의 현재 팬 속도 값.>
|변경 가능 d|읽기 전용
.3+|변수 속성 2 |type d|대상
|value d|<CSMS는 이 값을 사용하여 팬 속도를 조정할 수 있습니다. 충전기는 실제 값을 대상 값으로 유지하려고 해야 합니다.>
|변경 가능 d|읽기 쓰기
.2+|변수 속성 3 |type d|최대 설정
|value d|<예제의 값 '500'. 대상은 이 값보다 높게 설정할 수 없습니다.>
.2+|variableAttribute 4 |type d|MinSet
|value d|<예시의 값 '200'입니다. 대상은 이 값보다 낮게 설정할 수 없습니다.>
.2+|variableCharacteristics |maxLimit d|<예시의 값 '1000'입니다. 이는 팬의 물리적 최대 한계일 수 있습니다.>
|minLimit d|<예시의 값 '0'입니다. 이는 팬의 물리적 최소 한계일 수 있습니다. 팬이 다른 방향으로도 회전할 수 있는 경우 -1000일 수도 있습니다.>
|Description 3+d|이는 DeviceModel을 사용하여 팬을 정의하는 방법의 예입니다.
|===

값 600으로 대상을 설정하려고 할 때 충전기는 먼저 허용되는 최소 및 최대 값/한계를 확인하고 설정을 거부합니다. 목표 값이 500으로 설정된 경우 값은 범위 내에 있으며 충전 스테이션은 설정 및 시작을 허용하여 실제 팬 속도를 조정합니다. 실제 팬 속도가 502로 측정된 경우 범위를 벗어납니다. 그러나 CSMS에 보고해야 하므로 최소 및 최대 값/한계를 확인하지 않고 물리적 구성 요소의 실제 값을 업데이트해야 합니다.

=== Monitoring

선택적 모니터링 설정은 변수와 연관될 수 있으며, 이를 통해 _variables_ ( _실제_ ) 값의 변경 사항을 이벤트 알림으로 CSMS에 보고할 수 있습니다.

여기에는 다음이 포함됩니다.

* 모니터링 값
* 모니터링 유형: 상한 임계값, 하한 임계값, 델타, 주기
* 이벤트를 보고할 때의 심각도 수준

다음 표는 어떤 MonitorType/dataType 조합이 가능한지 보여줍니다.

[%autowidth.stretch,cols="<.^s,8*^.^",options="header"]
|===
|{nbsp} |문자열 |10진수 |정수 |dateTime |부울 |옵션 목록 |시퀀스 목록 |멤버 목록
|상한 임계값 |{nbsp} |X |X |{nbsp} |{nbsp} |{nbsp} |{nbsp} |{nbsp}
|하한 임계값 |{nbsp} |X |X |{nbsp} |{nbsp} |{nbsp} |{nbsp} |{nbsp}
|델타 |X |X |X |X |X |X |X |X 
|주기 |X |X |X |{nbsp} |X |X |X |X
|시간 동기화 주기 +
(PeriodicClockAligned) |X |X |X |X |{nbsp} |X |X |X |X |X
|===

* _UpperThreshold_ 및 _LowerThreshold_ 의 경우 값은 변수의 실제 값이 초과해야 할 값을 나타냅니다.
* _Delta_ 의 경우 이 값은 모니터가 설정된 순간부터 실제 값과 비교한 값의 변화를 나타냅니다.
** 변수의 dataType이 정수 또는 소수인 경우 이 값은 모니터를 트리거하기 위해 도달해야 할 차이를 나타냅니다.
** 변수의 dataType이 dateTime인 경우 측정 단위는 초입니다.
** 변수의 dataType이 문자열, 부울, OptionList, SequenceList 또는 MemberList인 경우 이 값은 무시됩니다. +
모니터는 실제 값이 변경될 때마다 트리거됩니다.
* 델타 모니터가 트리거되거나 충전기가 재부팅되면 충전기는 새 순간 값을 설정합니다.
* _Periodic_ 및 _PeriodicClockAligned_ 의 경우 값은 초 단위의 간격을 나타냅니다.

Variable과 하나 이상의 VariableMonitoring 요소 간의 관계는 아래 그림에 설명되어 있습니다.

.변수와 모니터링
image::part1/images/figure_5.svg[변수와 모니터링]

=== Standardized lists of Components and Variables

다양한 충전기와 CSMS 간에 일정 수준의 상호 운용성을 제공하기 위해 위에서 정의된 _component_ 및 _variables_ 모델 외에도 OCPP 사양의 Part 2 - Appendices에서는 구성 요소 및 변수에 대한 표준화된 이름 목록을 제공합니다. 이 목록의 아이디어는 충전기와 CSMS가 구성 요소에 대한 정보를 교환하려는 경우 _OCPP 사양에 나열되어 있는 경우_ 동일한 이름과 설명을 사용하도록 하는 것입니다. 사양에 나열되지 않은 _component_ 또는 _variables_ 의 이름의 경우 충전기 제조업체와 CSMS 간에 양자 약속을 해야 합니다. 이러한 경우 새 버전의 OCPP에 새롭거나 추가된 _component_ 및 _variables_ 를 포함할 수 있도록 Open Charge Alliance에 피드백을 제공하는 것이 좋습니다.

=== Minimum Device Model

장치 모델은 모든 충전기 모델에 적용할 수 있는 _일반화된_ 메커니즘이므로 다양한 구현의 복잡성은 다를 수 있습니다. 이는 모두 필요하지 않은 여러 사용 사례와 메시지로 구성됩니다. 이 섹션에서는 OCPP 2.0.1의 작동 구현을 만드는 데 필요한 장치 모델의 최소 부분을 설명합니다.

장치 모델은 충전기를 구성하고 모니터링하는 데 사용할 수 있는 구성 요소와 변수를 소개합니다. 이러한 구성 요소와 변수 중 일부는 사양의 Part 2의 _Referenced Components and Variables_ 목록(기능 블록별로 그룹화)에 포함됩니다. 기능 블록을 구현할 때 기능 블록에 속하는 모든 필수 구성 변수는 구현해야 합니다. _General_ 섹션의 필수 구성 변수는 모든 OCPP 2.0.1 구현에도 구현해야 합니다.

다음 표는 장치 모델 구현의 일부인 모든 사용 사례에 대해 구현해야 하거나 선택해야 하는 메시지를 설명합니다.

[%autowidth.stretch,cols="<.^2,<.^3",frame=all,grid=all,options="header"]
|===
2.+s|최소한의 장치 모델 구현의 일부인 사용 사례/메시지

s|사용 사례 s|메시지
|_B05 Set Variables_ |SetVariables 메시지는 반드시 구현되어야 함
|_B06 Get Variables_ |GetVariables 메시지는 반드시 구현되어야 함.
|_B07 Get Base Report_ |GetBaseReport 메시지는 반드시 구현되어야 하며 ConfigurationInventory와 FullInventory를 지원해야 함. 이러한 보고서의 내용은 충전기 구현에 따라 달라집니다. 구현에 어떤 구성 요소와 변수가 있는지는 구현자가 결정해야 합니다.

2.+s|최소한의 장치 모델 구현에 포함되지 않은 추가 사용 사례/메시지
s|사용 사례 s|메시지
|_B08 Get Custom Report_ |GetCustomReport 메시지는 선택 사항입니다.
|_N02 Get Monitoring Report_ |GetMonitoringReportRequest 메시지는 선택 사항입니다.
|_N03 Set Monitoring Base_ |SetMonitoringBaseRequest 메시지는 선택 사항입니다.
|_N04 Set Variable Monitoring_ |SetVariableMonitoringRequest 메시지는 선택 사항입니다.

|_N05 Set Monitoring Level_ |SetMonitoringLevelRequest 메시지는 선택 사항입니다.
|_N06 Clear/Remove Monitoring_ |ClearVariableMonitoringRequest 메시지는 선택 사항입니다.
|_N07 Alert Event_ |모니터링이 구현되지 않은 경우에도 충전기에서 NotifyEventRequest를 구현하여 내장된 모니터링 이벤트를 보고하는 데 사용할 수 있도록 하는 것이 좋습니다.
|_N08 Periodic Event_ |N07 참조.
|===

<<<

== Information Model vs. Device Model

위에서 설명한 대로, 정보 모델과 장치 모델은 서로 다른 개념을 나타냅니다. 정보 모델은 OCPP의 메시지와 데이터 유형이 기반으로 하는 정보 구조 모델을 나타내는 반면, 장치 모델은 충전기의 모든 모델이 어떻게 구축되는지 보고할 수 있도록 하는 OCPP 내의 일반화된 메커니즘을 나타내므로 충전기의 구조를 미리 정의하지 않고도 모든 CSMS에서 관리할 수 있습니다.

따라서 장치 관리에 사용되는 메시지는 정보 모델의 일부이고 장치를 모델링하는 데 사용되는 객체(_'Component'_ 및 _'Variable'_)도 정보 모델의 일부입니다.

<<<

== Using OCPP for other purposes than EV charging

이 문서의 서론에서 언급했듯이 OCPP는 주로 CSMS와 충전기 간의 양방향 통신을 위한 것입니다. 그러나 <<device_model,Device Model>> 장에서 설명한 대로 장치 모델을 추가하면 OCPP를 다른 용도로도 사용할 수 있습니다. 예를 들어, 변압기 또는 독립형 배터리 팩의 이벤트 또는 상태 변경 보고는 EV 충전 인프라를 구축하는 회사에 유용할 수도 있습니다. 이 예에서 BootNotification을 사용하여 이러한 장치를 관리 시스템에 연결할 수 있습니다. 장치 모델에서 충전기가 아닌 장치는 구성 요소 충전기가 최상위 수준에 없다는 사실로 인식할 수 있습니다. 현재 OCPP 사양은 충전기가 아닌 장치에 대한 사용 사례를 제공하지 않습니다. 그러나 향후 OCPP 버전에서 추가될 수 있습니다.

<<<

== Numbering

_이 섹션은 규범적입니다._

=== EVSE numbering

CSMS가 충전기의 모든 EVSE를 처리할 수 있도록 하려면 EVSE에 항상 동일한 번호를 매겨야 합니다.

EVSE 번호 매기기(evseId)는 다음과 같아야 합니다.

* EVSE는 모든 충전기에서 1부터 시작하여 순차적으로 번호를 매겨야 합니다(번호를 건너뛸 수 없음).
* evseId는 충전기의 총 EVSE 수보다 클 수 없습니다.
* CSMS에서 시작한 작업의 경우 evseId 0은 전체 충전기를 처리하기 위해 예약되어 있습니다.
* 충전기에서 시작한 작업(보고 시)의 경우 evseId 0은 충전기 메인 컨트롤러에 예약되어 있습니다.

예: EVSE가 3개 있는 충전기: 모든 EVSE는 ID 1, 2, 3으로 번호를 매겨야 합니다. 충전기의 EVSE는 왼쪽에서 오른쪽으로, 위에서 아래로 증가하는 논리적인 방식으로 번호를 매기는 것이 좋습니다.

=== Connector numbering

CSMS가 충전기의 모든 커넥터를 처리할 수 있도록 하려면 커넥터는 항상 동일한 방식으로 번호가 매겨져야 합니다.

커넥터 번호(connectorId)는 다음과 같아야 합니다.

* 커넥터는 모든 EVSE에서 connectorId 1부터 시작하여(증가) 번호가 매겨집니다.
* EVSE당 모든 커넥터는 고유한 번호가 있습니다.
* EVSE의 첫 번째 커넥터의 ID는 1이어야 합니다.
* 동일한 EVSE의 추가 커넥터는 순차적으로 번호가 매겨져야 합니다(번호를 건너뛸 수 없음)
* connectorId는 해당 EVSE의 총 커넥터 수보다 높아서는 안 됩니다.

예: 각각 2개의 커넥터가 있는 3개의 EVSE가 있는 충전기는 다음과 같이 번호가 매겨집니다.

* EVSE 1에는 connectorId 1과 2가 있는 커넥터가 있습니다.
* EVSE 2에는 connectorId 1과 2가 있는 커넥터가 있습니다.
* EVSE 3에는 connectorId 1과 2가 있는 커넥터가 있습니다.

=== Transaction IDs

이제 TransactionId는 충전기에서 생성되며, 시작된 모든 거래에 대해 이 충전기에서 고유해야 합니다.

OCPP 1.x에서는 CSMS에서 이를 수행했습니다.

거래 ID의 형식은 구현에 맡깁니다. 예를 들어 증분 숫자(incremental number) 또는 UUID일 수 있습니다.

<<<

== Topologies supported by OCPP

이 장에서는 OCPP를 사용하기 위한 여러 토폴로지를 보여줍니다. 서론에서 언급했듯이 OCPP는 원래 각 충전기가 CSMS와 직접 통신하는 설정에 사용되었습니다. OCPP는 충전기 네트워크의 토폴로지에 대한 지식이 없다는 점을 명심하는 것이 중요합니다. 다음 그림은 OCPP를 사용하는 설정에서 가능한 구성 요소와 이러한 구성 요소 간의 관계를 보여줍니다.

.OCPP를 사용하는 설정에서 가능한 구성 요소
image::part1/images/figure_6.svg[OCPP를 사용하는 설정에서 가능한 구성 요소]

=== Charging Station(s) directly connected to CSMS

**설명**

이것은 OCPP를 사용하기 위한 기본 설정입니다.

.CSMS에 직접 연결된 충전기
image::part1/images/figure_7.svg[CSMS에 직접 연결된 충전기]

[[multiple_charging_stations_connected_to_csms_via_local_proxy]]
=== Multiple Charging Stations connected to CSMS via Local Proxy

**설명**

어떤 상황에서는 충전기 그룹의 모든 통신을 단일 네트워크 노드(예: 모뎀, 라우터 등)를 통해 라우팅하는 것이 바람직합니다. 대표적인 예로는 여러 개의 충전기가 모바일 네트워크에 거의 또는 전혀 액세스할 수 없는 지하 주차장에 있는 상황입니다. 모바일 데이터에 대한 액세스를 제공하기 위해 충전기는 LAN을 통해 중앙 데이터 통신 장치에 연결됩니다. 이 중앙 장치는 모바일 네트워크에 연결되고 CSMS와 충전기 간의 프록시 역할을 합니다. 이러한 장치를 OCPP에서 "로컬 프록시"(LP)라고 합니다. 로컬 프록시는 메시지 라우터 역할을 합니다. CSMS와 충전기 모두 네트워크 토폴로지를 인식하지 못합니다. 그룹 내 충전기의 경우 로컬 프록시는 CSMS입니다. 마찬가지로 CSMS의 경우 로컬 프록시는 충전기입니다. 아래 다이어그램은 이 구성을 보여줍니다.

.로컬 프록시를 통해 CSMS에 연결된 여러 충전기
image::part1/images/figure_8.svg[로컬 프록시를 통해 CSMS에 연결된 여러 충전기]

=== Multiple Charging Stations connected to CSMS via Local Controller

**설명**

<<multiple_charging_stations_connected_to_csms_via_local_proxy,로컬 프록시>>는 OCPP 메시지를 라우팅하는 것 이상의 역할을 하지 않지만, 로컬 컨트롤러는 CSMS와 독립적으로 충전기에 메시지를 보낼 수 있습니다. 이에 대한 일반적인 사용 사례는 OCPP Part 2 - Smart Charging 장에 설명된 로컬 스마트 충전 사례로, 로컬 컨트롤러가 충전기에 충전 한도를 부과할 수 있습니다. 로컬 컨트롤러가 CSMS에서 처리되도록 하려면 자체 충전기 ID가 있어야 합니다. OCPP의 관점에서 볼 때 로컬 컨트롤러는 충전기(EVSE/커넥터 없음)일 뿐입니다. CSMS는 로컬 스마트 충전 등을 지원하기 위해 로컬 컨트롤러를 처리하는 논리를 보유합니다. 그룹 토폴로지를 수동으로 구성하거나 BootNotifications의 IP 주소 및 정보를 기반으로 네트워크에서 추론하는 것은 CSMS 구현에 달려 있습니다. 아래 다이어그램은 이 구성을 보여줍니다.

.로컬 컨트롤러를 통해 CSMS에 연결된 여러 충전기
image::part1/images/figure_9.svg[로컬 컨트롤러를 통해 CSMS에 연결된 여러 충전기]

[cols="^.^1s,10",%autowidth.stretch]
|===
|NOTE |기술적으로 이 토폴로지는 여러 가지 방법으로 실현할 수 있습니다. 웹소켓과 함께 이 설정을 사용할 때, 충전기가 로컬 컨트롤러에 연결되면 CSMS에 동일한 주소로 웹소켓 연결을 열어야 함을 의미합니다. 이 접근 방식의 장점은 로컬 컨트롤러가 모든 메시지를 보고 이에 따라 조치를 취할 수 있고, 메시지를 기다릴 필요가 없으며, 충전기에서 펌웨어 업데이트 등이 가능하고 CSMS에 특별한 소프트웨어가 필요하지 않다는 것입니다. (대규모 설치의 경우) CSMS와 로컬 컨트롤러 간에 많은 웹소켓 연결이 필요할 수 있습니다. 자세한 내용은 OCPP Part 4 - Implementation guide를 참조하세요.
|===

=== Non-OCPP Charging Stations connected to CSMS via OCPP Local Controller

**설명**

이 설정에는 OCPP가 활성화된 로컬 컨트롤러를 사용하여 추상화된 여러 개의 비 OCPP 충전기가 있습니다.

이 상황에서 OCPP를 적용할 때 로컬 컨트롤러는 여러 EVSE가 있는 충전기로 간주되어야 하거나 로컬 컨트롤러는 여러 개의 OCPP 충전기(자체 충전기 ID가 있음)로 작동해야 합니다.

.로컬 컨트롤러를 통해 CSMS에 연결된 여러 개의 비 OCPP 충전기
image::part1/images/figure_10.svg[로컬 컨트롤러를 통해 CSMS에 연결된 여러 개의 비 OCPP 충전기]

=== DSO control signals to CSMS

**설명**

이 설정은 CSMS가 충전기로 신호를 보내는 유일한 애플리케이션이지만 CSMS는 (대부분의 경우) 그리드 제약에 따라 DSO로부터 스마트 충전 신호를 수신합니다. 즉, OpenADR 또는 OSCP와 같은 비 OCPP 신호가 수신되고 이 신호에 따라 CSMS가 충전기에서 충전을 제한합니다. 충전기를 완벽하게 제어하려는 CSO는 이 아키텍처를 사용하여 충전기에서 사용되는 에너지 양을 제어할 수 있습니다. 충전 프로파일/충전 일정을 충전기로 보내면 됩니다.

.스마트 충전 - CSMS로 전송되는 DSO 제어 신호
image::part1/images/figure_11.svg[스마트 충전 - CSMS로 전송되는 DSO 제어 신호]

=== Parallel control by CSMS and EMS

**설명**

충전기가 CSMS뿐만 아니라 에너지 관리 시스템에도 연결된 (반)개인(private) 상황에서는 특정 형태의 병렬 제어가 지원되어야 합니다. OCPP는 최소한 충전기 유지 관리에 사용해야 하지만 OCPP 2.0.1은 외부 스마트 충전 제어 한도 보고도 지원합니다. 따라서 에너지 관리 시스템이 나중에 충전하는 것이 "더 낫다"고 판단하면 에너지 관리 시스템은 충전기에 외부 한도(예: 0)를 부과할 수 있으며, 충전기는 이를 OCPP를 통해 CSMS에 보고할 수 있습니다. 에너지 관리 시스템은 예를 들어 스마트 미터의 로컬 포트에서 입력을 받아 과부하 연결을 방지할 수 있지만 충전하지 않는 다른 이유(예: 기상 조건)가 있을 수도 있습니다.

.CSMS 및 EMS의 병렬 제어
image::part1/images/figure_12.svg[CSMS 및 EMS의 병렬 제어]

<<<

== Part 1 Appendix: OCPP Information Model

=== Explanation of UML representation and message generation

다음 문단에서는 OCPP 정보 모델의 UML 체계를 보여줍니다. 이 모델은 공통 정보 모델(Common Information Model, CIM)과 어느 정도 CEFACT 명명 표준(표준의 일부에 불과함)을 기반으로 합니다. 모델의 객체는 _BusinessComponents_ 라는 이름이 지정되고 MRID 및 Name과 같은 CIM _IdentifiedObject_ 에서 속성을 상속합니다. UML 다이어그램에서 _IdentifiedObject_ 에서 상속된 속성은 _IdentifiedObject_ 스테레오타입(< < > > 사이) 아래에 표시됩니다.

다른 속성은 스테레오타입 < < Content > > 아래에 나열됩니다.

OCPP의 메시지는 다음 문단에 표현된 모델에서 3단계 프로세스를 거쳐 파생됩니다.

.정보 모델에서 메시지/체계로 프로세스
image::part1/images/figure_13.svg[정보 모델에서 메시지/체계로 프로세스]

정보 모델을 만든 후 메시지는 정보 모델을 기반으로 만들어집니다. 그러나 이 전환(첫 번째 화살표)에서 일부 규칙은 메시지 모델링에 (수동으로) 적용됩니다. 적용되는 가장 중요한 규칙은 <field>가 하나만 있는 <class>에 대한 참조가 포함된 메시지가 <class><field>라는 이름의 필드로 대체된다는 것입니다. 예를 들어, 메시지에 ID만 있는 Transaction이 포함된 경우, 이는 transactionId로 대체됩니다.

다음 단계에서 사양의 Part 2 - Messages and Datatypes 섹션을 생성할 때 가독성을 위해 _CounterType_ 과 같은 모든 Core DataType은 이 예에서 열거형을 제외하고 참조하는 Primitive DataType으로 대체됩니다(_integer_).

=== Visual Representation of OCPP Information Model

.OCPP 정보 모델: 트랜잭션
image::part1/images/figure_14.svg[OCPP 정보 모델: 트랜잭션]

.OCPP 정보 모델: SmartCharging
image::part1/images/figure_15.svg[OCPP 정보 모델: SmartCharging]

.OCPP 정보 모델: 계량
image::part1/images/figure_16.svg[OCPP 정보 모델: 계량]

.OCPP 정보 모델: 장치 모델
image::part1/images/figure_17.svg[OCPP 정보 모델: 장치 모델]

.OCPP 정보 모델: 보안 프로파일
image::part1/images/figure_18.svg[OCPP 정보 모델: 보안 프로파일]

.OCPP 정보 모델: 보안 권한 부여
image::part1/images/figure_19.svg[OCPP 정보 모델: 보안 권한 부여]

.OCPP 정보 모델: 통신
image::part1/images/figure_20.svg[OCPP 정보 모델: 통신]

.OCPP 정보 모델: SecondaryActorSchedule
image::part1/images/figure_21.svg[OCPP 정보 모델: SecondaryActorSchedule]
