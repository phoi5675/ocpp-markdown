= F. RemoteControl
:!chapter-number:

<<<

:sectnums:
==  Introduction

이 기능 블록은 CSMS의 원격 제어 관리를 위한 세 가지 유형의 사용 사례를 설명합니다.

. 원격 트랜잭션 제어. 이러한 사용 사례는 CSO(또는 간접적으로 제3자)가 원격 명령으로 트랜잭션을 시작/중지할 수 있도록 하는 기능을 설명합니다.
. 커넥터 잠금 해제. 이러한 사용 사례는 CSO(또는 간접적으로 제3자)가 원격 명령으로 커넥터를 잠금 해제할 수 있도록 하는 기능을 설명합니다. 예를 들어, 고객이 케이블을 뽑는 데 문제가 있을 때 이를 지원하는 데 사용할 수 있습니다.
. 원격 트리거. 이러한 사용 사례는 OCPP의 모든 원격 트리거 기능을 설명합니다. 이 기능은 메시지의 원격 트리거를 가능하게 합니다. 예를 들어, 메시지를 다시 보내거나 충전기에서 진행 중인 일부 프로세스의 현재 상태를 요청합니다.

<<<

== 사용 사례 및 요구 사항

=== 원격 트랜잭션 제어

:sectnums!:
[[f01_remote_start_transaction_cable_plugin_first]]
=== F01 - 원격 시작 트랜잭션 - 케이블 플러그인 먼저

.F01 - 원격 시작 트랜잭션 - 케이블 플러그인 먼저
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|번호 |유형 |설명

|1 |이름 |원격 시작 트랜잭션 - 케이블 플러그인 먼저
|2 |ID |F01
|{nbsp} d|_기능 블록_ |F. 원격 제어
|3 |목표
  |**1.** CSMS로 트랜잭션을 원격으로 시작합니다. +
  **2.** CSO가 트랜잭션을 시작하는 데 문제가 있는 EV 운전자를 도울 수 있도록 합니다. +
  **3.** 타사(예: 모바일 앱)가 CSMS를 통해 충전 트랜잭션을 제어할 수 있도록 합니다.
|4 |설명
  |이 사용 사례는 CSMS가 <<request_start_transaction_request,RequestStartTransactionRequest>>를 보내 충전기에 트랜잭션을 시작하도록 원격으로 요청하는 방법을 설명합니다. 수신 시 충전기는 <<request_start_transaction_response,RequestStartTransactionResponse>>와 트랜잭션을 시작할 수 있는지 여부를 나타내는 상태로 응답합니다.
|{nbsp} d|_Actors_ |충전기, CSMS, CSO
|{nbsp} d|_시나리오 설명_
  |**1.** EV 운전자가 충전기에 케이블을 꽂습니다. +
  **2.** 충전기는 <<status_notification_request,StatusNotificationRequest>>를 CSMS에 보내 <<connector_status_enum_type,_Occupied_>>가 된 커넥터에 대해 알립니다. +
  **3.** CSMS는 <<status_notification_response,StatusNotificationResponse>>로 응답하여 <<status_notification_request,StatusNotificationRequest>>가 수신되었음을 확인합니다. +
  **4.** 충전기는 <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Started>>)를 보내 CSMS에 시작된 트랜잭션에 대해 알립니다(운전자가 아직 알려지지 않은 경우에도 해당). +
  **5.** CSMS는 <<transaction_event_response,TransactionEventResponse>>로 응답하여 <<transaction_event_request,TransactionEventRequest>>가 수신되었음을 확인합니다. +
  **6.** 외부 트리거(이 사용 사례의 예: EV Driver)가 원격 시동을 트리거합니다. +
  **7.** CSMS는 <<request_start_transaction_request,RequestStartTransactionRequest>>를 충전기로 보냅니다. +
  **8** 충전기는 이미 시작된 트랜잭션의 _transactionId_ 를 CSMS에 포함하여 <<request_start_transaction_response,RequestStartTransactionResponse>>로 응답합니다. +
  **9.** 선택적으로: EV 운전자는 CSMS에서 승인을 받습니다. +
  **10.** 충전기는 <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Updated>>, <<charging_state_enum_type,chargingState = Charging>>) 메시지를 보내 CSMS에 충전이 시작되었음을 알립니다.
|{nbsp} d|_대체 시나리오_
|원격 시작 트랜잭션 - 원격 시작 먼저 <<f02_remote_start_transaction_remote_start_first,F02 - 원격 시작 트랜잭션 - 원격 시작 먼저>>
|5 |필수 조건 |충전 케이블을 먼저 꽂습니다.
|6 |사후 조건
  |충전기에서 에너지를 제공합니다. <<authorize_remote_start,`AuthorizeRemoteStart`>>의 값이 _true_ 이면 충전기는 <<local_authorization_list,Local Authorization List>>, <<authorization_cache,Authorization Cache>> 및/또는 <<authorize_request,AuthorizeRequest>>를 사용하여 IdToken을 성공적으로 인증했을 때만 에너지를 제공합니다.
|===

.Sequence Diagram: Remote Start Transaction - Cable Plugged in First
image::part2/images/figure_65.svg[Sequence Diagram: Remote Start Transaction - Cable Plugged in First]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7 |오류 처리 |해당 없음
|8 충전기
  |외부 트리거는 예를 들어 충전기 운영자 또는 EV 운전자 앱일 수 있습니다.

<<request_start_transaction_response,RequestStartTransactionResponse>>에는 충전기가 요청을 수락했는지 여부를 나타내는 상태가 포함되어 있으며 트랜잭션을 시작하려고 시도합니다.

CSMS는 <<id_token_type,IdTokenType>> 유형의 <<request_start_transaction_request,RequestStartTransactionRequest>>를 보낼 수 있습니다.
<<id_token_enum_type,NoAuthorization>>. 운영자는 충전기가 로컬 중지 트랜잭션을 지원하는 경우 누구나 이 트랜잭션을 중지할 수 있다는 점을 알고 있어야 합니다.

위의 시나리오 설명과 시퀀스 다이어그램은 시작 트랜잭션을 위한 구성 변수가 다음과 같이 구성되는 것을 기반으로 합니다. +
<<tx_start_point,`TxStartPoint`>>: <<tx_start_stop_point_values,EVConnected, Authorized, DataSigned, PowerPathClosed, EnergyTransfer>> +
이 사용 사례는 다른 구성에도 유효하지만 트랜잭션이 다른 순간에 시작/중지될 수 있으며, 이는 메시지가 전송되는 순서를 변경할 수 있습니다. 자세한 내용은 사용 사례를 참조하세요. <<e01_start_transaction_options,E01 - Start Transaction options>>.
|===

==== F01 - 원격 시작 트랜잭션 - 케이블 플러그인 우선 - 요구 사항

.F01 - 요구 사항
[cols="^.^2,<.^6,<.^6,<.^4",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID |전제 조건 |요구 사항 정의 |참고

|F01.FR.01 |<<authorize_remote_start,`AuthorizeRemoteStart`>>의 값이 true이고 +
충전기가 <<request_start_transaction_request,RequestStartTransactionRequest>>를 수신하는 경우
  |충전기는 <<request_start_transaction_request,RequestStartTransactionRequest>> 메시지에서 제공된 IdToken의 성공적인 승인 후 에너지 전송을 허용하기 위해 충전기에서 로컬 작업에 대한 응답으로 동작해야 합니다.
    |충전기는 먼저 요청에 응답한 다음 로컬 승인 목록, 승인 캐시 및/또는 <<authorize_request,AuthorizeRequest>>를 사용하여 IdToken을 승인하려고 시도합니다. +
에너지 전송은 승인을 받은 후에만 허용됩니다.
|F01.FR.02 |<<authorize_remote_start,`AuthorizeRemoteStart`>>의 값이 false이고 +
충전기가 <<request_start_transaction_request,RequestStartTransactionRequest>>를 수신하는 경우
  |충전기는 승인을 확인하지 않고 <<request_start_transaction_request,RequestStartTransactionRequest>> 메시지에 제공된 IdToken에 대한 에너지 전송을 허용해야 합니다.
    |충전기는 먼저 요청에 응답하고 idToken과 함께 <<transaction_event_request,TransactionEventRequest>>를 CSMS로 보내고 CSMS는 이 <<transaction_event_request,TransactionEventRequest>>를 처리할 때 IdToken의 권한 상태를 확인합니다.
|F01.FR.03 |F01.FR.01 또는 F01.FR.02
  |충전기는 <<transaction_event_request,TransactionEventRequest>>를 CSMS로 보내야 하며 CSMS는 이 <<transaction_event_request,TransactionEventRequest>>를 처리할 때 IdToken의 권한 상태를 확인합니다.
    |CSMS가 수락되지 않은 권한 상태를 반환하는 경우 충전기는 사용 사례 E05에 따라 에너지 전송을 중지해야 합니다.
|F01.FR.04 |{nbsp}
  |<<request_start_transaction_request,RequestStartTransactionRequest>>에는 IdToken이 포함되어야 하며, 충전기는 CSMS로 전송된 <<transaction_event_request,TransactionEventRequest>>에서 트랜잭션을 시작할 수 있는 경우 이 토큰을 사용해야 합니다. |{nbsp}
|F01.FR.05 |{nbsp}
  |트랜잭션은 <<e02_start_transaction_cable_plugin_first,E02 - Start Transaction - Cable Plugin First>>에 설명된 것과 같은 방식으로 시작해야 합니다. |{nbsp}
|F01.FR.06 |{nbsp}
  |<<request_start_transaction_request,RequestStartTransactionRequest>>에는 특정 EVSE에서 ​​트랜잭션을 시작해야 하는 경우 evseId가 포함될 수 있습니다.
    |evseId가 제공되지 않으면 충전기가 EVSE 선택을 제어합니다.
|F01.FR.07 |<<request_start_transaction_request,RequestStartTransactionRequest>>에 evseId가 없는 경우.
  |충전기는 <<request_start_transaction_request,RequestStartTransactionRequest>>를 거부할 수 있습니다. |{nbsp}
|F01.FR.08 |{nbsp}
  |CSMS는 <<request_start_transaction_request,RequestStartTransactionRequest>>에 ChargingProfile을 포함할 수 있습니다. |{nbsp}
|F01.FR.09 |F01.FR.08
  |이 <<charging_profile_type,ChargingProfile>>의 목적은 <<tx_profile,TxProfile>>로 설정되어야 합니다. |{nbsp}
|F01.FR.10 |F01.FR.08
  |충전기는 이 <<charging_profile_type,ChargingProfile>>을 이 RequestStartTransaction에 의해 시작된 트랜잭션에 사용해야 합니다. |{nbsp}
|F01.FR.11 |F01.FR.08
  |<<charging_profile_type,ChargingProfile>>의 transactionId는 설정되지 않아야 합니다. |{nbsp}
|F01.FR.12 |스마트 충전을 지원하지 않는 충전기가 <<request_start_transaction_request,RequestStartTransactionRequest>>를 <<charging_profile_type,ChargingProfile>>과 함께 수신하는 경우.
  |충전기는 지정된 <<charging_profile_type,ChargingProfile>>을 무시해야 합니다.
    |장치 모델 변수 SmartChargingCtrlr.Enabled는 CSMS에 스마트 충전이 지원되는지 여부를 알려줍니다.
|F01.FR.13 |충전기에서 트랜잭션이 생성되었지만 승인되지 않은 경우. +
그리고 +
<<request_start_transaction_request,RequestStartTransactionRequest>>가 수신되는 경우.
  |충전기는 <<request_start_transaction_response,RequestStartTransactionResponse>>에서 _transactionId_ 를 반환해야 합니다. |{nbsp}
|F01.FR.14 | <<transaction_event_request,TransactionEventRequest>>에서 미터 데이터를 보내도록 구성된 경우(<<transaction_event_enum_type,eventType = Started>>), 다음을 참조하세요: <<metervalues_configuration,Meter Values ​​- Configuration>>
  |충전기는 구성된 측정값을 CSMS로 전송된 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Started>>)의 선택적 MeterValue 필드에 추가하여 트랜잭션 중에 더 자세한 정보를 제공해야 합니다. |{nbsp}
|F01.FR.15 | <<transaction_event_request,TransactionEventRequest>>에서 미터 데이터를 보내도록 구성된 경우(<<transaction_event_enum_type,eventType = Updated>>), 다음을 참조하세요: <<metervalues_configuration,Meter Values ​​- Configuration>>
  |충전기는 구성된 측정값을 CSMS로 전송된 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>)의 선택적 MeterValue 필드에 추가하여 트랜잭션 중에 더 자세한 정보를 제공해야 합니다. |{nbsp}
|F01.FR.16 |F01.FR.15 +
AND +
1 <<transaction_event_request,TransactionEventRequest>>에 대한 미터 데이터 양이 너무 많습니다(<<transaction_event_enum_type,eventType = Updated>>)
  |충전기는 미터 데이터를 동일한 _timestamp_ 를 사용하여 여러 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>) 메시지로 분할할 수 있습니다. |{nbsp}
|F01.FR.17 | <<transaction_event_request,TransactionEventRequest>>를 보낼 때
  |충전기는 <<trigger_reason_enum_type,triggerReason>>을 설정하여 CSMS에 이벤트를 트리거한 원인을 알려야 합니다. 사용할 이유는 <<trigger_reason_enum_type,TriggerReasonEnumType>>의 설명에 설명되어 있습니다. |{nbsp}
|F01.FR.18 |트랜잭션이 시작된 후
  |충전기는 트리거 이벤트가 발생할 때 트랜잭션 중에 추가 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>) 메시지를 보낼 수 있습니다. |{nbsp}
|F01.FR.19 |<<request_start_transaction_request,RequestStartTransactionRequest>>가 수신될 때.
  |다음 <<transaction_event_request,TransactionEventRequest>>에는 _triggerReason_ : <<trigger_reason_enum_type,RemoteStart>>이 포함되어야 합니다. |{nbsp}
|F01.FR.20 | <<request_start_transaction_request,RequestStartTransactionRequest>>에 _evseId_ 가 포함되어 있지 않고 충전기에서 EVSE를 선택할 수 있는 경우
  |충전기는 작동에 대한 _evseId_ 값으로 사용할 EVSE를 선택해야 함
    |충전기에서 임의의 EVSE에서 ​​시작하는 것을 지원하지 않는 경우 F01.FR.07도 참조하세요.
|F01.FR.21 | <<request_start_transaction_request,RequestStartTransactionRequest>>에 대한 _evseId_ 가 요청의 _idToken_ 과 다른 _idToken_ 에 예약되어 있고 _groupIdToken_ 에 대한 예약이 없는 경우
  |충전기는 <<request_start_transaction_response,RequestStartTransactionResponse>>와 _status_ = `Rejected` 로 응답해야 합니다. |{nbsp}
|F01.FR.22 |<<request_start_transaction_request,RequestStartTransactionRequest>>의 _evseId_ 가 요청의 _idToken_ 과 다른 _idToken_ 에 대해 `Reserved` 이고 요청의 _groupIdToken_ 과 다른 _groupIdToken_ 에 대해 예약된 경우
  |충전기는 <<request_start_transaction_response,RequestStartTransactionResponse>>와 _status_ = `Rejected` 로 응답해야 합니다.
    |_idToken_ 과 _idGroupToken_ 이 예약과 일치하지 않으면 EV가 스테이션을 사용할 수 없습니다.
|F01.FR.23 |<<request_start_transaction_request,RequestStartTransactionRequest>>에 대한 _evse_ 가 `Unavailable` 또는 `Faulted` 인 경우
  |충전기는 _status_ = `Rejected` 인 <<request_start_transaction_response,RequestStartTransactionResponse>>로 응답해야 합니다. |{nbsp}
|F01.FR.24 |<<request_start_transaction_request,RequestStartTransactionRequest>>에 대한 _evseId_ 가 `Occupied` 이고 +
이 _evseId_ 에 승인된 트랜잭션이 있는 경우
  |충전기는 _status_ = `Rejected` 인 <<request_start_transaction_response,RequestStartTransactionResponse>>로 응답해야 합니다.
    |트랜잭션이 없거나 아직 승인되지 않은 트랜잭션이 있는 EVSE만 <<request_start_transaction_request,RequestStartTransactionRequest>>와 일치할 수 있습니다.
|F01.FR.25 |F01.FR.13
  |충전기는 연관된 트랜잭션에 대해 보내는 다음 <<transaction_event_request,TransactionEventRequest>>에 _remoteStartId_ 를 넣어야 합니다. |{nbsp}
|F01.FR.26 |스마트 충전을 **지원하는** 충전기가 잘못된 <<charging_profile_type,ChargingProfile>>이 있는 <<request_start_transaction_request,RequestStartTransactionRequest>>를 수신하는 경우.
  |충전기는 _status_ = `Rejected` 및 선택적으로 _reasonCode_ = "InvalidProfile" 또는 "InvalidSchedule"인 <<request_start_transaction_response,RequestStartTransactionResponse>>로 응답해야 합니다.
    |장치 모델 변수 SmartChargingCtrlr.Enabled는 CSMS에 스마트 충전이 지원되는지 여부를 알려줍니다.
|===

<<<

[[f02_remote_start_transaction_remote_start_first]]
=== F02 - 원격 시작 트랜잭션 - 원격 시작 먼저

.F02 - 원격 시작 트랜잭션 - 원격 시작 먼저
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|번호 |유형 |설명

|1 |이름 |원격 시작 트랜잭션 - 원격 시작 먼저
|2 |ID |F02
|{nbsp} d|_기능 블록_ |F. 원격 제어
|{nbsp} d|_부모 사용 사례_ |<<f01_remote_start_transaction_cable_plugin_first,F01 - 원격 시작 트랜잭션 - 케이블 플러그인 먼저>>
|3 |목표 |충전기와 EV 간의 연결이 설정되기 전에 <<request_start_transaction_request,RequestStartTransactionRequest>>가 먼저 전송되는 동안 CSMS가 원격으로 트랜잭션을 시작할 수 있도록 합니다.
|4 |설명 |이 사용 사례는 CSMS가 사용자를 위해 원격으로 트랜잭션을 시작하는 방법을 다룹니다.
|{nbsp} d|_행위자_ |충전기, CSMS, 외부 트리거
|{nbsp} d|_시나리오 설명_
  |**1.** 외부 트리거가 원격 시작을 트리거합니다. +
  **2.** CSMS가 충전기로 <<request_start_transaction_request,RequestStartTransactionRequest>>를 보냅니다. +
  **3.** 충전기는 <<request_start_transaction_response,RequestStartTransactionResponse>>로 CSMS에 응답합니다. +
  **4.** EV 운전자는 구성 변수 설정에 따라 CSMS에서 권한을 부여받습니다. +
  **5.** 충전기는 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Started>>)를 보내서 CSMS에 시작된 트랜잭션에 대해 알립니다. +
  **6.** 케이블이 꽂혀 있습니다. +
  **6a.** 충전기는 <<status_notification_request,StatusNotificationRequest>>를 _Occupied_ 로 보냅니다. +
  **6b.** CSMS는 <<status_notification_response,StatusNotificationResponse>>를 충전기로 보냅니다. +
  **7.** 에너지 제공이 시작됩니다. +
  **8.** 충전기는 <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Updated>>, <<charging_state_enum_type,chargingState = Charging>>) 메시지를 보내서 CSMS에 충전이 시작되었음을 알립니다. +
  **9.** CSMS는 <<transaction_event_response,TransactionEventResponse>>를 충전기로 보냅니다.
|5 |필수 조건
  |충전 케이블이 연결되지 않았습니다. +
  먼저 원격으로 시작합니다. +
  모바일 앱에서 CSMS를 통해 충전 트랜잭션을 제어할 수 있도록 합니다.
|6 |사후 조건
  |**성공한 사후 조건:** +
  시작 요청이 있는 트랜잭션이 시작되었고 EV가 충전 중입니다. +

  **실패한 사후 조건:** +
  시작 요청이 있는 트랜잭션이 시작되지 않았거나 EV가 충전 중이 아닙니다.
|===

.Sequence Diagram: Remote Start Transaction - Remote Start First with TxStartPoint=Authorized
image::part2/images/figure_66.svg[Sequence Diagram: Remote Start Transaction - Remote Start First with TxStartPoint=Authorized]

.Sequence Diagram: Remote Start Transaction - Remote Start First with TxStartPoint=EVConnected
image::part2/images/figure_67.svg[Sequence Diagram: Remote Start Transaction - Remote Start First with TxStartPoint=EVConnected]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7 |오류 처리 |해당 없음
|8 |참고
  |외부 트리거는 예를 들어 충전기 운영자 또는 EV 운전자 앱일 수 있습니다.

  EVSE가 시작될지 불확실하기 때문에 evseId 없이 원격으로 트랜잭션을 시작하지 않는 것이 좋습니다. 많은 EVSE가 있는 로직 컨트롤러의 경우 EV 운전자가 활성화된 EVSE 앞에 없을 수 있습니다.

  CSMS는 <<id_token_type,IdTokenType>>을 사용하여 <<id_token_enum_type,NoAuthorization>> 유형의 <<request_start_transaction_request,RequestStartTransactionRequest>>를 보낼 수 있습니다. 운영자는 충전기가 로컬 중지 트랜잭션을 지원하는 경우 누구나 이 트랜잭션을 중지할 수 있다는 점을 알고 있어야 합니다.

  위의 시나리오 설명과 시퀀스 다이어그램은 시작 트랜잭션을 위한 구성 변수가 다음과 같이 구성된 것을 기반으로 합니다. +
  <<tx_start_point,`TxStartPoint`>>: <<tx_start_stop_point_values,EVConnected, Authorized, DataSigned, PowerPathClosed, EnergyTransfer>> +
  이 사용 사례는 다른 구성에도 유효하지만 트랜잭션이 다른 순간에 시작/중지될 수 있으며, 이는 메시지가 전송되는 순서를 변경할 수 있습니다. 자세한 내용은 사용 사례를 참조하세요. <<e01_start_transaction_options,E01 - Start Transaction options>>.
|===

==== F02 - 원격 시작 트랜잭션 - 원격 시작 먼저 - 요구 사항
.F02 - 요구 사항
[cols="^.^2,<.^6,<.^6,<.^4",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID |전제 조건 |요구 사항 정의 |참고

|F02.FR.01 | <<request_start_transaction_request,RequestStartTransactionRequest>>의 결과로 트랜잭션이 시작될 때.
  |충전기는 이 새로운 트랜잭션을 위해 보내는 첫 번째 <<transaction_event_request,TransactionEventRequest>>에 _remoteStartId_ 를 넣어야 합니다. |{nbsp}
|F02.FR.02 | <<transaction_event_request,TransactionEventRequest>>에서 미터 데이터를 보내도록 구성된 경우(<<transaction_event_enum_type,eventType = Started>>), 다음을 참조하세요: <<metervalues_configuration,Meter Values ​​- Configuration>>
  |충전기는 구성된 측정값을 CSMS로 전송된 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Started>>)의 선택적 MeterValue 필드에 추가하여 트랜잭션 중에 더 자세한 정보를 제공해야 합니다. |{nbsp}
|F02.FR.03 | <<transaction_event_request,TransactionEventRequest>>에서 미터 데이터를 보내도록 구성된 경우(<<transaction_event_enum_type,eventType = Updated>>), 다음을 참조하세요: <<metervalues_configuration,Meter Values ​​- Configuration>>
  |충전기는 구성된 측정값을 CSMS로 전송된 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>)의 선택적 MeterValue 필드에 추가하여 트랜잭션 중에 더 자세한 정보를 제공해야 합니다. |{nbsp}
|F02.FR.04 |F02.FR.03 +
AND +
1 <<transaction_event_request,TransactionEventRequest>>에 대한 미터 데이터 양이 너무 많습니다(<<transaction_event_enum_type,eventType = Updated>>)
  |충전기는 미터 데이터를 동일한 _timestamp_ 를 사용하여 여러 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>) 메시지로 분할할 수 있습니다. |{nbsp}
|F02.FR.05 |IdToken 정보가 알려진 경우.
  |다음 <<transaction_event_request,TransactionEventRequest>>에는 <<id_token_type,IdTokenType>> 정보가 포함되어야 합니다. |{nbsp}
|F02.FR.06 |이 트랜잭션은 특정 IdToken에 대한 예약을 종료합니다.
  |다음 <<transaction_event_request,TransactionEventRequest>>에는 reservationId가 포함되어야 합니다.
    |<<h_reservation,H. Reservation>>을 참조하세요.
|F02.FR.07 |EV 운전자가 구성 변수에서 설정한 시간 초과 전에 충전 케이블을 연결하지 않은 경우: +
<<ev_connection_timeout,`EVConnectionTimeOut`>> 및 +
TxStopPoint에 `ParkingBayOccupancy` 가 포함되지 않은 경우
  |충전기는 트랜잭션을 종료하고 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>, ceaseReason = Timeout, _triggerReason_ = `EVConnectionTimeout`)를 CSMS로 전송해야 합니다.
    |그렇지 않으면 TxStopPoint에 Authorized가 포함되지 않은 경우 트랜잭션이 종료되지 않습니다.
|F02.FR.08 |EV 운전자가 구성 변수에서 설정한 시간 초과 전에 충전 케이블을 연결하지 않는 경우: +
<<ev_connection_timeout,`EVConnectionTimeOut`>> AND +
TxStopPoint에 `ParkingBayOccupancy` 가 포함되어 있음
  |충전기는 트랜잭션을 승인 취소하고 <<transaction_event_request,TransactionEventRequest>> (_triggerReason_ = `EVConnectionTimeout`)를 CSMS로 전송해야 합니다.
    |운전자가 주차 공간을 떠나면 트랜잭션이 정상적으로 종료됩니다.
|F02.FR.09 |<<authorize_remote_start,`AuthorizeRemoteStart`>>의 값이 true이고 +
충전기가 <<request_start_transaction_request,RequestStartTransactionRequest>>를 수신합니다.
  |충전기는 <<request_start_transaction_request,RequestStartTransactionRequest>> 메시지에서 제공된 IdToken의 성공적인 승인 후 트랜잭션을 시작하기 위해 충전기에서 로컬 작업에 대한 응답으로 동작해야 합니다.
    |충전기는 먼저 요청에 응답한 다음 로컬 승인 목록, 승인 캐시 및/또는 <<authorize_request,AuthorizeRequest>>를 사용하여 IdToken을 승인하려고 시도합니다. +
    승인이 획득된 후에만 트랜잭션이 시작됩니다.
|F02.FR.10 |<<authorize_remote_start,`AuthorizeRemoteStart`>>의 값이 false +
AND +
충전기가 <<request_start_transaction_request,RequestStartTransactionRequest>>를 수신합니다.
  |충전기는 권한 확인 없이 <<request_start_transaction_request,RequestStartTransactionRequest>> 메시지에 제공된 IdToken에 대한 트랜잭션을 시작해야 합니다.
    |트랜잭션이 시작된 후 충전기는 idToken과 함께 <<transaction_event_request,TransactionEventRequest>>를 CSMS로 보내고 CSMS는 이 <<transaction_event_request,TransactionEventRequest>>를 처리할 때 IdToken의 권한 상태를 확인합니다.
|F02.FR.11  |F02.FR.09 OR F02.FR.10 
  |충전기는 CSMS에 <<transaction_event_request,TransactionEventRequest>>를 보내야 하며, CSMS는 이 <<transaction_event_request,TransactionEventRequest>>를 처리할 때 IdToken의 권한 상태를 확인합니다. |{nbsp}
|F02.FR.12 |{nbsp}
  |<<request_start_transaction_request,RequestStartTransactionRequest>>에는 IdToken이 포함되어야 하며, 충전기는 CSMS에 전송된 <<transaction_event_request,TransactionEventRequest>>에서 트랜잭션을 시작할 수 있는 경우 이를 사용해야 합니다. |{nbsp}
|F02.FR.13 |{nbsp}
  |트랜잭션은 <<e03_start_transaction_idtoken_first,E03 - Start Transaction - Id Token First>>에 설명된 것과 동일한 방식으로 시작되어야 합니다. |{nbsp}
|F02.FR.14 |{nbsp}
  |<<request_start_transaction_request,RequestStartTransactionRequest>>는 특정 EVSE에서 ​​트랜잭션을 시작해야 하는 경우 evseId를 포함할 수 있습니다.
    |evseId가 제공되지 않으면 충전기가 EVSE 선택을 제어합니다.
|F02.FR.15 |<<request_start_transaction_request,RequestStartTransactionRequest>>에 evseId가 포함되어 있지 않은 경우.
  |충전기는 <<request_start_transaction_request,RequestStartTransactionRequest>>를 거부할 수 있습니다. |{nbsp}
|F02.FR.16 |{nbsp}
  |CSMS는 <<request_start_transaction_request,RequestStartTransactionRequest>>에 ChargingProfile을 포함할 수 있습니다. |{nbsp}
|F02.FR.17 |F02.FR.16
  |이 <<charging_profile_type,ChargingProfile>>의 목적은 <<tx_profile,TxProfile>>로 설정되어야 합니다. |{nbsp}
|F02.FR.18 |F02.FR.16
  |충전기는 이 <<charging_profile_type,ChargingProfile>>을 이 RequestStartTransaction에 의해 시작된 트랜잭션에 사용해야 합니다. |{nbsp}
|F02.FR.19 |F02.FR.16
  |<<charging_profile_type,ChargingProfile>>의 transactionId는 설정되지 않아야 합니다. |{nbsp}
|F02.FR.20 |스마트 충전을 지원하지 않는 충전기가 <<charging_profile_type,ChargingProfile>>이 포함된 <<request_start_transaction_request,RequestStartTransactionRequest>>를 수신하는 경우.
  |충전기는 지정된 <<charging_profile_type,ChargingProfile>>을 무시해야 합니다.
    |장치 모델 변수 SmartChargingCtrlr.Enabled는 CSMS에 스마트 충전이 지원되는지 여부를 알려줍니다.
|F02.FR.21 |<<request_start_transaction_request,RequestStartTransactionRequest>>가 수신될 때.
  |다음 <<transaction_event_request,TransactionEventRequest>>에는 _triggerReason_: `RemoteStart` 와 <<request_start_transaction_request,RequestStartTransactionRequest>>의 _remoteStartId_ 가 포함되어야 합니다.
    |이는 CSMS에 이것이 RequestStartTransaction의 결과임을 알리기 위한 것입니다. + TxStartPoint=`EVConnected` 인 경우 케이블 연결 시 트랜잭션이 시작되지만 _triggerReason_ = `RemoteStart` 를 계속 보내야 합니다. 연결 이벤트는 `chargingState` = `EVConnected` 라는 사실로 보고됩니다.
|F02.FR.22 |<<request_start_transaction_request,RequestStartTransactionRequest>>에 _evseId_ 가 없고 +
충전기가 EVSE를 선택할 수 있는 경우
  |충전기는 작업에 대한 _evseId_ 값으로 사용할 EVSE를 선택해야 합니다.
    |충전기가 임의의 EVSE에서 ​​시작하는 것을 지원하지 않는 경우 F02.FR.15도 참조하세요.
|F02.FR.23 |<<request_start_transaction_request,RequestStartTransactionRequest>>에 대한 _evseId_ 가 요청의 _idToken_ 과 다른 _idToken_ 에 대해 `예약` 되고 +
_groupIdToken_ 에 대한 예약이 없는 경우
  |충전기는 _status_ = `거부됨` 인 <<request_start_transaction_response,RequestStartTransactionResponse>>로 응답해야 합니다. |{nbsp}
|F02.FR.24 |<<request_start_transaction_request,RequestStartTransactionRequest>>에 대한 _evseId_ 가 요청의 _idToken_ 과 다른 _idToken_ 에 대해 `예약` 되고 +가 요청의 _groupIdToken_ 과 다른 _groupIdToken_ 에 대해 `예약` 되는 경우
  |충전기는 _status_ = `Rejected` 인 <<request_start_transaction_response,RequestStartTransactionResponse>>로 응답해야 합니다.
    |_idToken_ 과 _idGroupToken_ 이 예약과 일치하지 않으면 EV가 스테이션을 사용할 수 없습니다.
|F02.FR.25 |<<request_start_transaction_request,RequestStartTransactionRequest>>에 대한 _evseId_ 가 `Unavailable` 또는 `Faulted` 인 경우
  |충전기는 <<request_start_transaction_response,RequestStartTransactionResponse>>로 _status_ = `Rejected` 로 응답해야 합니다. |{nbsp}
|F02.FR.26 |<<request_start_transaction_request,RequestStartTransactionRequest>>에 대한 _evseId_ 가 `Occupied` 이고 +
이 `evseId` 에 승인된 트랜잭션이 있는 경우
  |충전기는 <<request_start_transaction_response,RequestStartTransactionResponse>>로 `status` = `Rejected` 로 응답해야 합니다.
    |트랜잭션이 없거나 아직 승인되지 않은 트랜잭션이 있는 EVSE만 <<request_start_transaction_request,RequestStartTransactionRequest>>와 일치할 수 있습니다.
|F02.FR.27  |If a Charging Station **with** support for Smart Charging receives a <<request_start_transaction_request,RequestStartTransactionRequest>> with an invalid <<charging_profile_type,ChargingProfile>>.
  |충전기는 <<request_start_transaction_response,RequestStartTransactionResponse>>와 _status_ = `Rejected` 및 선택적으로 _reasonCode_ = "InvalidProfile" 또는 "InvalidSchedule"로 응답해야 합니다.
    |장치 모델 변수 SmartChargingCtrlr.Enabl ed는 CSMS에 스마트 충전이 지원되는지 여부를 알려줍니다.
|===

[cols="^.^1s,10",%autowidth.stretch]
|===
|참고 |이전 사용 사례의 요구 사항: <<f01_remote_start_transaction_cable_plugin_first,F01 - 원격 시작 트랜잭션 - 케이블 플러그인 먼저>>는 <<f02_remote_start_transaction_remote_start_first,F02 - 원격 시작 트랜잭션 - 원격 시작 먼저>>에도 관련이 있는 것으로 간주됩니다.
|===

<<<

==== F03 - 원격 중지 트랜잭션

.F03 - 원격 중지 트랜잭션
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|번호. |유형 |설명

|1 |이름 |원격 정지 트랜잭션
|2 |ID |F03
|{nbsp} d|_기능 블록_ |F. 원격 제어
|3 |목표
  |**1.** CSO가 트랜잭션을 정지하는 데 문제가 있는 EV 운전자를 도울 수 있도록 합니다. _또는_ +
  **2.** 모바일 앱이 CSMS를 통해 트랜잭션을 제어할 수 있도록 합니다.
|4 |설명 |이 사용 사례는 CSMS가 충전기에 트랜잭션을 정지하도록 요청하는 방법을 설명합니다.
|{nbsp} d|_행위자_ |충전기, CSMS, CSO, EV 운전자
|{nbsp} d|_시나리오 설명_
  |**1.** 외부 트리거가 원격 정지를 트리거합니다. +
  **2.** CSMS가 충전기에 <<request_stop_transaction_request,RequestStopTransactionRequest>>를 트랜잭션의 transactionId와 함께 충전기로 보내 트랜잭션을 정지하도록 요청합니다. +
  **3.** 충전기는 <<request_stop_transaction_response,RequestStopTransactionResponse>>와 요청을 수락했는지 여부와 주어진 transactionId를 가진 트랜잭션이 진행 중이며 중지될 것인지를 나타내는 상태로 응답합니다. +
  **4.** 충전이 중지되면 충전기는 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>)를 전송하고 해당되는 경우 커넥터를 잠금 해제합니다. +
  **5.** EV 운전자가 케이블을 분리한 후 충전기는 <<status_notification_request,StatusNotificationRequest>>를 _Available_ 상태로 전송합니다. +
  **6.** 충전기는 트랜잭션을 종료하고 <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = _Ended_>>, <<reason_enum_type,stoppedReason = _Remote_>>) 메시지를 CSMS로 보냅니다.
|5 |필수 조건 |트랜잭션이 진행 중입니다.
|6 |사후 조건
  |**성공한 사후 조건:** +
  정류장이 요청된 트랜잭션이 종료되었습니다. +
  **실패한 사후 조건:** +
  정류장이 요청된 트랜잭션이 아직 진행 중입니다.
|===

.Sequence Diagram: Remote Stop Transaction
image::part2/images/figure_68.svg[Sequence Diagram: Remote Stop Transaction]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7 |참고 |이 원격 트랜잭션 중지 요청은 로컬 트랜잭션 중지 작업과 동일합니다.


위의 시나리오 설명과 시퀀스 다이어그램은 트랜잭션 중지 구성 변수가 다음과 같이 구성된 것을 기반으로 합니다. <<tx_stop_point,`TxStopPoint`>>: <<tx_start_stop_point_values,ParkingBayOccupancy, EVConnected>> +
이 사용 사례는 다른 구성에도 유효하지만 트랜잭션이 다른 순간에 중지될 수 있으며, 이는 메시지를 보내는 순서를 변경할 수 있습니다. 자세한 내용은 사용 사례를 참조하세요. <<e06_stop_transaction_options,E06 - Stop Transaction options>>
|===

==== F03 - 원격 Stop Transaction - 요구 사항

.F03 - 요구 사항
[cols="^.^2,<.^6,<.^6,<.^4",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID |전제 조건 |요구 사항 정의 |참고

|F03.FR.01 |CSMS가 원격 Stop Transaction 트리거를 수신하는 경우(예: 스마트폰 앱을 사용하여 종료하는 경우, (비지역) 선불 크레딧 초과)
  |CSMS는 <<request_stop_transaction_request,RequestStopTransactionRequest>>를 충전기로 전송해야 합니다. 트랜잭션의 transactionId와 함께. |{nbsp}
|F03.FR.02 |F03.FR.01 AND +
TxStopPoint 구성으로 인해 트랜잭션이 종료되지 않음(예: TxStopPoint가 `Authorized` 또는 `PowerPathClosed` 가 아님)
  |충전기는 에너지 제공을 중단하고 CSMS에 <<transaction_event_request,TransactionEventRequest>>(_eventType_ = `Updated`, _triggerReason_ = `RemoteStop`)를 보내야 합니다.
    |예를 들어 TxStopPoint = `EVConnected` 인 경우 EV가 연결 해제될 때까지 트랜잭션이 종료되지 않습니다.
|F03.FR.03 |F03.FR.01 AND +
TxStopPoint 구성으로 인해 트랜잭션이 종료됩니다(예: TxStopPoint가 `Authorized` 또는 `PowerPathClosed`)
  |충전기는 <<transaction_event_request,TransactionEventRequest>> ( _eventType_ = `Ended`, _triggerReason_ = `RemoteStop`, _stoppedReason_ = `Remote`)를 CSMS로 보내야 합니다. |{nbsp}
|F03.FR.04 | <<transaction_event_request,TransactionEventRequest>>에서 미터 데이터를 보내도록 구성된 경우(<<transaction_event_enum_type,eventType = Ended>>), 다음을 참조하세요: <<metervalues_configuration,Meter Values ​​- Configuration>>
  |충전기는 구성된 측정값을 CSMS로 전송된 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>)의 선택적 meterValue 필드에 추가하여 트랜잭션 사용에 대한 자세한 정보를 제공해야 합니다. |{nbsp}
|F03.FR.05 |F03.FR.04 +
그리고 +
충전기의 메모리가 부족합니다.
  |충전기에서 미터 데이터가 삭제될 수 있습니다. |{nbsp}
|F03.FR.06 |F03.FR.05
  |미터 데이터를 삭제할 때 충전기는 중간 값을 먼저 삭제해야 하며(첫 번째 값, 세 번째 값, 다섯 번째 등), 목록의 시작 부분에서 값을 삭제하거나 목록에 값을 추가하는 것을 중단해서는 안 됩니다. |{nbsp}
|F03.FR.07 |충전기가 <<request_stop_transaction_request,RequestStopTransactionRequest>>를 수신하는 경우
  |그리고 TransactionId가 활성 트랜잭션와 일치할 수 있는 경우; 충전기는 <<request_stop_transaction_response,RequestStopTransactionResponse>>로 응답해야 하며, 상태는 _Accepted_ 로 설정해야 합니다. |{nbsp}
|F03.FR.08 |충전기가 <<request_stop_transaction_request,RequestStopTransactionRequest>>를 수신하는 경우
  |그리고 TransactionId가 활성 트랜잭션와 일치할 수 없는 경우; 충전기는 <<request_stop_transaction_response,RequestStopTransactionResponse>>로 응답해야 하며, 상태는 _Rejected_ 로 설정해야 합니다. |{nbsp}
|F03.FR.09 |<<transaction_event_request,TransactionEventRequest>>를 보낼 때
  |충전기는 <<trigger_reason_enum_type,triggerReason>>을 설정하여 CSMS에 이벤트를 트리거한 원인을 알려야 합니다. 사용할 이유는 <<trigger_reason_enum_type,TriggerReasonEnumType>>의 설명에 설명되어 있습니다. |{nbsp}
|===

<<<

=== F04 - CSMS에서 원격 정지 ISO 15118 충전

.F04 - CSMS에서 인터럽트가 있는 충전 루프
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|번호 |유형 |설명

|1 |이름 |CSMS에서 원격 정지 ISO 15118 충전
|2 |ID |F04
|{nbsp} d|_기능 블록_ |F. 원격 제어
|{nbsp} d|_참조_ |<<iso15118_1,ISO15118-1>> F2 SECC에서 인터럽트가 있는 충전 루프

|3 |목표 |<<iso15118_1,ISO15118-1>>, 사용 사례 목표 F2, 38페이지를 참조하세요.
|4 |설명 |<<iso15118_1,ISO15118-1>>, 사용 사례 설명 F2, 38페이지를 참조하세요.
  |{nbsp} d|액터 |EV, EVSE, 충전기
|6 |필수 조건
  |- 기능 블록 C의 사용 사례에 따른 권한이 적용되는 경우, 성공적으로 완료되어야 합니다. +
  <<iso15118_1,ISO15118-1>>, 사용 사례 필수 조건 F2, 38페이지를 참조하세요.
|7 |결합된 시나리오 설명
  |**OCPP:** +
  **1.** CSMS가 충전기에 <<request_stop_transaction_request,RequestStopTransactionRequest>>를 보냅니다. +
  **2.** 충전기는 <<request_stop_transaction_response,RequestStopTransactionResponse>>로 응답합니다.

  **ISO 15118:** +
  **3.** EV는 ChargingStatus(AC 충전의 경우) 또는 CurrentDemandReq(DC 충전의 경우) PDU를 충전기로 보냅니다. +
  **4.** 충전기는 EVSENotification = StopCharging으로 응답합니다.
|8 |사후 조건 |<<iso15118_1,ISO15118-1>> 참조, 사용 사례 종료 조건 F2, 38페이지.
|===

.충전기에서 인터럽트가 있는 충전 루프
image::part2/images/figure_69.svg[충전기에서 인터럽트가 있는 충전 루프]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|9 |오류 처리 |해당 없음
|10 |비고 |해당 없음
|===

==== F04 - CSMS에서 원격 ISO 15118 충전 중지 - 요구 사항

_이러한 요구 사항은 규범적입니다._

.F04 - 요구 사항
[cols="^.^2,<.^6,<.^6,<.^4",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID |전제 조건 |요구 사항 정의 |참고

|F04.FR.01 |CSMS가 원격 중지 트랜잭션 트리거를 수신하는 경우(예: 스마트폰 앱을 사용하여 종료하는 경우, (비지역) 선불 크레딧 초과)
  |CSMS는 트랜잭션의 transactionId와 함께 <<request_stop_transaction_request,RequestStopTransactionRequest>>를 충전기로 보내야 합니다. |{nbsp}
|F04.FR.02 |F04.FR.01
  |충전기는 에너지 제공을 중지하고, 케이블을 잠금 해제하고, <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>)를 CSMS로 보내야 합니다.
    |영구적으로 연결되지 않은 경우 케이블 잠금 해제.
|F04.FR.03 |F04.FR.02 AND +
EV 운전자가 케이블을 뽑을 때.
  |충전기는 <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = _Ended_>>, <<reason_enum_type,stoppedReason = _Remote_>>)를 CSMS로 보내야 합니다. |{nbsp}
|F04.FR.04 | <<transaction_event_request,TransactionEventRequest>>에서 미터 데이터를 보내도록 구성된 경우(<<transaction_event_enum_type,eventType = Ended>>), 다음을 참조하세요: <<metervalues_configuration,Meter Values ​​- Configuration>>
  |충전기는 구성된 측정값을 CSMS로 전송된 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Ended>>)의 선택적 MeterValue 필드에 추가하여 트랜잭션 사용에 대한 자세한 정보를 제공해야 합니다. |{nbsp}
|F04.FR.05 |F04.FR.04 +
그리고 +
충전기의 메모리가 부족합니다.
  |충전기에서 미터 데이터가 삭제될 수 있습니다. |{nbsp}
|F04.FR.06 |F04.FR.05
  |미터 데이터를 삭제할 때 충전기는 중간 값을 먼저 삭제해야 합니다(첫 번째 값, 세 번째 값, 다섯 번째 등). 목록의 시작 부분에서 값을 삭제하거나 목록에 값을 추가하는 것을 중단해서는 안 됩니다. |{nbsp}
|===

<<<

:sectnums:
=== Unlock Connector

:sectnums!:
=== F05 - Remotely Unlock Connector

.F05 - Remotely Unlock Connector
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|번호 |유형 |설명

|1 |이름 |커넥터 원격 잠금 해제
|2 |ID |F05
|{nbsp} d|_기능 블록_ |F. 원격 제어
|3 |목표 |트랜잭션이 끝난 후 잠금이 실패하여 충전 케이블을 분리하는 데 문제가 있는 EV 운전자를 돕기 위해 CSO를 활성화합니다.
|4 |설명 |때때로 충전기 소켓의 커넥터가 올바르게 잠금 해제되지 않는 경우가 있습니다. +
이것은 충전 케이블에 긴장이 있을 때 대부분 발생합니다. 즉, 운전자가 충전기에서 충전 케이블을 분리할 수 없습니다. 운전자를 돕기 위해 CSO는 충전기에 <<unlock_connector_request,UnlockConnectorRequest>>를 보낼 수 있습니다. 그러면 충전기가 커넥터 잠금을 다시 시도합니다.
|{nbsp} d|_Actors_ |충전기, CSMS, 외부 트리거
|{nbsp} d|_시나리오 설명_
  |**1.** 외부 트리거(아마도 CSO)가 충전기의 특정 커넥터 잠금 해제를 요청합니다. +
  **2.** CSMS가 충전기에 <<unlock_connector_request,UnlockConnectorRequest>>를 보냅니다. +
  **3.** <<unlock_connector_request,UnlockConnectorRequest>>를 수신하면 충전기는 <<unlock_connector_response,UnlockConnectorResponse>>로 응답합니다. +
  **4.** 응답 메시지는 충전기가 커넥터를 잠금 해제할 수 있었는지 여부를 나타냅니다.
|5 |필수 조건 |지정된 커넥터에서 진행 중인 트랜잭션 없음 +
충전기에 커넥터 잠금이 있습니다.
|6 |사후 조건 |충전기가 커넥터를 잠금 해제할 수 있었습니다.
|===

.시퀀스 다이어그램: 커넥터 잠금 해제
image::part2/images/figure_70.svg[시퀀스 다이어그램: 커넥터 잠금 해제]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7 |오류 처리 |해당 없음
|8 |참고 |잠금 해제 명령을 트리거하는 외부 트리거는 예를 들어 충전기 운영자 또는 EV 드라이버 앱일 수 있습니다.

<<unlock_connector_request,UnlockConnectorRequest>>는 커넥터 액세스 도어를 잠금 해제하는 것이 아니라 커넥터의 케이블 고정 잠금을 잠금 해제하기 위한 것입니다.
|===

==== F05 - 원격으로 커넥터 잠금 해제 - 요구 사항

.F05 - 요구 사항
[cols="^.^2,<.^5,<.^6",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID |전제 조건 |요구 사항 정의

|F05.FR.01 |<<unlock_connector_request,UnlockConnectorRequest>>를 수신하면.
  |충전기는 <<unlock_connector_response,UnlockConnectorResponse>>로 응답해야 합니다.
|F05.FR.02 |F05.FR.01 +
AND +
지정된 커넥터에서 진행 중인 승인된 트랜잭션이 있습니다.
  |충전기는 커넥터 잠금을 해제하거나 트랜잭션을 중지하려고 시도해서는 안 되지만 <<unlock_connector_response,UnlockConnectorResponse>>에서 `OngoingAuthorizedTransaction` 상태를 사용해야 합니다.
|F05.FR.03 |F05.FR.01 +
AND +
지정된 커넥터를 알 수 없음.
  |충전기는 <<unlock_connector_response,UnlockConnectorResponse>>에서 <<unlock_status_enum_type,UnknownConnector>> 상태를 사용해야 합니다.
|F05.FR.04 |F05.FR.01 +
AND +
충전기는 지정된 커넥터를 잠금 해제할 수 있었습니다.
  |충전기는 <<unlock_connector_response,UnlockConnectorResponse>>에서 <<unlock_status_enum_type,Unlocked>> 상태를 사용해야 합니다.
|F05.FR.05 |F05.FR.01 +
AND +
충전기는 지정된 커넥터를 잠금 해제할 수 없었습니다.
  |충전기는 <<unlock_connector_response,UnlockConnectorResponse>>에서 <<unlock_status_enum_type,UnlockFailed>> 상태를 사용해야 합니다.
|F05.FR.06 |F05.FR.01 +
AND +
커넥터에 케이블이 연결되지 않았습니다.
  |충전기는 케이블이 감지되지 않더라도 커넥터 잠금을 해제하려고 시도하고 잠금 해제 시도의 결과를 반환해야 합니다.
|===

<<<

:sectnums:
=== Remote Trigger

:sectnums!:
=== F06 - Trigger Message

.F06 - Trigger Message
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|번호 |유형 |설명

|1 |이름 |트리거 메시지
|2 |ID |F06
|{nbsp} d|_기능 블록_ |F. 원격 제어
|3 |목표 |CSMS가 충전기에 충전기에서 시작한 메시지를 보내도록 요청할 수 있도록 합니다.
|4 |설명 |이 사용 사례는 <<trigger_message_request,TriggerMessageRequest>> 메시지의 사용을 설명합니다. CSMS가 충전기에 충전기에서 시작한 메시지를 보내도록 요청하는 방법입니다. 요청에서 CSMS는 수신하고자 하는 메시지를 표시합니다.
|{nbsp} d|_행위자_ |충전기, CSMS
|{nbsp} d|_시나리오 설명_
  |**1.** CSMS가 충전기에 <<trigger_message_request,TriggerMessageRequest>>를 보냅니다. +
  **2.** 충전기는 <<trigger_message_response,TriggerMessageResponse>>로 응답하여 _Accepted_, _Rejected_ 또는 _NotImplemented_ 를 반환하여 보낼지 여부를 나타냅니다. +
  **3.** CSMS에서 요청한 메시지로, 충전기가 _Accepted_ 로 표시되어 전송되고 있습니다.
|5 |필수 조건 |기능 블록 _Remote Trigger_ 가 설치되어 있습니다.
|6 |사후 조건
  |**성공한 사후 조건:** +
  **1.** CSMS가 <<trigger_message_response,TriggerMessageResponse>> 메시지를 _성공적으로_ 수신했습니다. +
  **2.** CSMS는 상태가 _Accepted_ 인 <<trigger_message_response,TriggerMessageResponse>> 메시지를 _성공적으로_ 수신했으며 요청된 메시지를 _성공적으로_ 수신했습니다. +
  **실패 사후 조건:** +
  **1.** CSMS는 상태가 _Accepted_ 인 <<trigger_message_response,TriggerMessageResponse>> 메시지를 수신하지 않았습니다. +
  **2.** CSMS는 상태가 _Accepted_ 인 <<trigger_message_response,TriggerMessageResponse>> 메시지를 _성공적으로_ 수신했으며 요청된 메시지를 수신하지 않았습니다.
|===

.시퀀스 다이어그램: 트리거 메시지
image::part2/images/figure_71.svg[시퀀스 다이어그램: 트리거 메시지]

.시퀀스 다이어그램: 트리거 메시지 예
image::part2/images/figure_72.svg[시퀀스 다이어그램: 트리거 메시지 예]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7 |오류 처리 |해당 없음
|8 |참고 |TriggerMessage 메커니즘은 과거 데이터를 검색하도록 의도되지 않았습니다.
|===

==== F06 - 트리거 메시지 - 요구 사항

.F06 - 요구 사항
[cols="^.^2,<.^6,<.^6,<.^4",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID |전제 조건 |요구 사항 정의 |참고

|F06.FR.01 |{nbsp}
  |<<trigger_message_request,TriggerMessageRequest>> 메시지에서 CSMS는 수신하고자 하는 메시지를 표시해야 합니다. |{nbsp}
|F06.FR.02 |F06.FR.01. +
이러한 모든 요청 메시지에 대해.
  |CSMS는 이 요청이 적용되는 EVSE를 표시할 수 있습니다. |{nbsp}
|F06.FR.03 |F06.FR.02
  |요청된 메시지가 선행되어야 합니다. 지정된 evseId가 메시지와 관련이 없는 경우 무시해야 합니다. 이러한 경우 요청된 메시지는 여전히 전송해야 합니다. |{nbsp}
|F06.FR.04 |충전기가 <<trigger_message_request,TriggerMessageRequest>>를 수신하는 경우.
  |충전기는 요청된 메시지를 보내기 전에 먼저 TriggerMessage 응답을 보내야 합니다. |{nbsp}
|F06.FR.05 |F06.FR.04
  |<<trigger_message_response,TriggerMessageResponse>>에서 충전기는 _Accepted_ 또는 _Rejected_ 를 반환하여 요청된 메시지를 보낼지 여부를 표시해야 합니다.
    |충전기가 전송 요청을 수락하거나 거부하는 것은 충전기에 달려 있습니다.
|F06.FR.06 |충전기가 _requestedMessage_ 가 _MeterValues_ 로 설정된 <<trigger_message_request,TriggerMessageRequest>>를 수락하는 경우
  |충전기는 구성 변수 <<aligned_data_measurands,`AlignedDataMeasurands`>>에 구성된 모든 측정량에 대한 최신 측정값과 함께 <<metervalues_request,MeterValuesRequest>>를 CSMS로 전송해야 합니다. |{nbsp}
|F06.FR.07 |충전기가 _requestedMessage_ 가 _TransactionEvent_ 로 설정된 <<trigger_message_request,TriggerMessageRequest>>를 수락하는 경우
  |충전기는 _triggerReason_ = _Trigger_, _transactionInfo_(최소 _chargingState_, _meterValue_)를 구성 변수 <<sampled_data_tx_updated_measurands,`SampledDataTxUpdatedMeasurands`>>에 구성된 모든 측정량에 대한 최신 측정값을 포함하는 <<transaction_event_request,TransactionEventRequest>>를 CSMS로 보내야 합니다. |{nbsp}
|F06.FR.08 |충전기가 구현되지 않은 요청된 메시지를 포함하는 <<trigger_message_request,TriggerMessageRequest>>를 수신하는 경우
  |충전기는 <<trigger_message_response,TriggerMessageResponse>>로 _NotImplemented_ 상태로 응답해야 합니다. |{nbsp}
|F06.FR.09 |{nbsp}
  |트리거하는 메시지는 현재 정보만 제공해야 합니다. |{nbsp}
|F06.FR.10 |{nbsp}
  |충전기가 _Accepted_ 로 표시한 메시지는 전송해야 합니다.
    |예를 들어, 요청을 수락하고 실제로 요청된 메시지를 전송하는 사이에 정상적인 작업으로 인해 동일한 메시지가 전송되는 상황이 발생할 수 있습니다. 이러한 경우 방금 전송된 메시지는 요청을 준수하는 것으로 간주될 수 있습니다.
|F06.FR.11 |필드 evse가 관련이 있지만 <<trigger_message_request,TriggerMessageRequest>>에 없는 경우.
  |충전기는 이를 "허용된 모든 evse 값에 대해"로 해석해야 합니다.
    |StatusNotifications는 특정 커넥터에 대해서만 요청할 수 있습니다. F06.FR.12/13 참조
|F06.FR.12 |충전기가 <<trigger_message_request,TriggerMessageRequest>>를 수신하고 _requestedMessage_ 가 _StatusNotification_ 으로 설정된 경우 AND +
(_evse_ 가 생략되거나 +
_evse.connectorId_ 가 생략됨)
  |충전기는 <<trigger_message_response,TriggerMessageResponse>>를 _Rejected_ 상태로 응답할 수 있습니다.
    |StatusNotification 메시지는 커넥터 수준에서만 요청할 수 있습니다.
|F06.FR.13 | <<trigger_message_request,TriggerMessageRequest>>를 _requestedMessage_ 를 _StatusNotification_ 으로 설정하여 보낼 때
  |CSMS는 connectorId 필드를 설정해야 합니다.
    |StatusNotification 메시지는 커넥터 수준에서만 보낼 수 있습니다.
|F06.FR.14 |충전기가 <<trigger_message_request,TriggerMessageRequest>>를 수신하고 _requestedMessage_ 를 _LogStatusNotification_ 으로 설정하고 +
충전기가 로그 파일을 업로드하는 경우
  |충전기는 <<upload_log_status_enum_type,status>> _Uploading_ 으로 <<log_status_notification_request,LogStatusNotificationRequest>>를 CSMS로 보내야 합니다. |{nbsp}
|F06.FR.15 |충전기가 <<trigger_message_request,TriggerMessageRequest>>를 수신하고 _requestedMessage_ 가 _LogStatusNotification_ 로 설정된 경우 AND +
충전기가 로그 파일을 업로드하지 않는 경우
  |충전기는 <<upload_log_status_enum_type,status>> _Idle_ 로 <<log_status_notification_request,LogStatusNotificationRequest>>를 CSMS로 보내야 합니다. |{nbsp}
|F06.FR.16 |충전기가 <<trigger_message_request,TriggerMessageRequest>>를 수신하고 _requestedMessage_ 가 _FirmwareStatusNotification_ 로 설정된 경우 AND +
충전기가 펌웨어 업데이트 관련 작업을 수행하지 않는 경우
  |충전기는 <<upload_log_status_enum_type,status>> _Idle_ 로 CSMS에 <<firmware_status_notification_request,FirmwareStatusNotificationRequest>>를 보내야 합니다. |{nbsp}
|F06.FR.17 |충전기가 <<trigger_message_request,TriggerMessageRequest>>를 수신하고 _requestedMessage_ 가 _BootNotification_ +
로 설정되고 CSMS에서 마지막 <<boot_notification_request,BootNotificationRequest>>에 대한 응답이 _Accepted_ 인 경우
  |충전기는 <<trigger_message_response,TriggerMessageResponse>>를 <<upload_log_status_enum_type,status>> _Rejected_ 로 응답해야 합니다.
    |충전기에 BootNotification을 보내도록 요청하는 트리거는 BootNotification이 아직 수락되지 않은 경우에만 사용하도록 의도되었습니다.
|===