[[smart_charging]]
= K. SmartCharging
:!chapter-number:

<<<

:sectnums:
== Introduction

이 기능 블록은 CSO(또는 제3자)가 트랜잭션 중에 전송되는 충전 전류/전력에 영향을 미치거나 충전기가 그리드에서 끌어올 수 있는 전류/전력량에 대한 제한을 설정할 수 있는 모든 기능을 설명합니다.

일반적으로 스마트 충전에는 두 가지 이상의 정의가 있습니다. 이는 소비자가 대규모 소비자 그룹이 동시에 '충전'하기를 원하더라도 언제든지 배터리를 완전히 충전할 수 있는 방식으로 그리드 용량을 사용한다는 것을 의미할 수 있습니다. 스마트는 충전 시 에너지 가격을 고려할 수 있다는 것을 의미할 수도 있고, 또는 태양광 패널에서 지속 가능한 에너지를 지역적으로 공급하는 것으로 간주될 수 있습니다. 그리고 전기 자동차(EV) 운전자가 솔루션의 일부가 되기를 원할 때 더욱 '스마트'한것 일겁니다. OCPP 내에서 스마트 충전은 CSMS가 특정 EV의 (충전) 전력 또는 전류의 충전(방전)에 영향을 미치거나, 전체 충전기/충전기 그룹의 총 허용 에너지 소비에 영향을 미칠 수 있는 기능을 얻는 것을 의미합니다. 다양한 설정을 사용할 수 있습니다. 다음의 CPP를 사용한 스마트 충전의 네 가지 일반적인 스마트 충전 동작을 설명하는 유형입니다.

- 내부 부하 분산
- 중앙 스마트 충전
- 로컬 스마트 충전
- 외부 스마트 충전 제어 신호

이러한 유형은 <<types_of_smart_charging,Types of Smart Charging>>에서 설명합니다. 물론, 위의 두 가지 이상의 사용 사례가 하나의 더 복잡한 시스템으로 결합되는 더 복잡한 사용 사례도 가능합니다.

[cols="^.^1s,10",%autowidth.stretch]
|===
|NOTE |ISO 15118 및 OCPP 용어 매핑은 <<iso_15118_and_ocpp_terminology_mapping,ISO 15118 and OCPP terminology mapping>>에 제공됩니다.
|===

<<<

[[types_of_smart_charging]]
== Types of Smart Charging

_이 섹션은 정보 제공을 목적으로 합니다._

=== Internal Load Balancing

가장 간단한 형태의 스마트 충전은 부하 분산 사용 사례입니다. 이는 충전기 내에서 내부 부하 분산과 관련이 있으며, 충전기는 EVSE당 전류/전력을 제어합니다. 충전기는 고정된 한도(예: 그리드 연결의 최대 전류)로 구성됩니다. 이 경우 충전기는 모든 EVSE에 대한 충전을 최적화할 책임이 있습니다. 충전기가 그리드에 직접 연결되지 않은 경우, 고객의 에너지 시스템이 전력 공급을 담당합니다. +
이 설정은 일반적으로 알려진 물리적 한계로 인해 필요한 한계를 설정하는 데 사용됩니다.

.내부 부하 분산 스마트 충전 토폴로지
image::part2/images/figure_94.svg[내부 부하 분산 스마트 충전 토폴로지]

[[central_smart_charging]]
=== Central Smart Charging

스마트 충전의 다음 단계는 CSMS가 특정 EV의 충전 전력 또는 전류, 전체 충전기 또는 충전기 그룹의 총 허용 에너지 소비에 영향을 미칠 수 있는 기능입니다. Central Smart Charging은 충전 한도가 CSMS에 의해 제어된다고 가정합니다. 예를 들어, 이는 그리드 연결, 그리드의 에너지 가용성(예: 그리드 운영자(DSO)의 용량 예측) 또는 건물의 배선을 기반으로 할 수 있습니다. 이 설정에서 CSMS는 하나의 충전기뿐만 아니라 한 단계 "위"에서 충전을 최적화할 수 있습니다. 즉, 연결을 공유하는 두 개 이상의 충전기를 최적화하여 충전을 위한 보다 효율적인 일정을 계산할 수 있습니다.

.중앙 스마트 충전 토폴로지
image::part2/images/figure_95.svg[중앙 스마트 충전 토폴로지]

중앙 스마트 충전은 제어 파일럿 신호로 수행할 수 있지만, EV가 제어 파일럿 신호를 통해 충전 요구 사항을 전달할 수 없기 때문에 몇 가지 제한이 있습니다. <<local_smart_charging,Local Smart Charging>> 사용 사례와 유사하게 EVSE는 제어 파일럿 신호로 충전 일정을 실행할 수 있습니다.

[[local_smart_charging]]
=== Local Smart Charging

로컬 스마트 충전은 스마트 충전이 가능한 충전기가 CSMS가 아닌 로컬 컨트롤러에 의해 로컬에서 제어되는 충전 한도를 갖는 사용 사례를 설명합니다. 이 유형의 스마트 충전은 충전기 그룹을 제어하는 ​​논리적 구성 요소인 로컬 컨트롤러가 있다고 가정합니다. 일반적인 사용 사례는 그리드 연결 정격이 충전기 정격의 합보다 작은 주차장에 있는 여러 충전기입니다. 또 다른 응용 분야는 로컬 컨트롤러가 DSO 또는 로컬 스마트 그리드 노드에서 전력 가용성에 대한 정보를 수신하는 것입니다.

[[local_smart_charging_topology]]
.로컬 스마트 충전 토폴로지
image::part2/images/figure_96.svg[로컬 스마트 충전 토폴로지]

=== External Smart Charging Control Signals

OCPP 프로토콜은 원래 CSMS와 하나 이상의 충전기 간의 통신을 위해 개발되었습니다. 위에서 설명한 대로 이는 충전기 운영자(CSO) CSMS가 충전기를 제어하고 EV와 충전기의 충전 한도에 따라 CSO가 EV가 얼마나 빨리 충전되는지 결정한다는 것을 의미합니다. 그러나 OCPP 지원 충전기의 일부 상황/애플리케이션에서는 충전 속도를 결정하는 두 가지 요소가 이것들뿐이 아닙니다. 충전 속도를 결정하는 다른 입력은 DSO 신호(예: IEC 61850 <<iec61850_7_420,[IEC61850-7-420]>>, IEC 60870 <<iec60870_5_104,[IEC60870-5-104]>>, DNP3 <<dnp3,[DNP3]>> 또는 OpenADR <<open_adr,[OPENADR]>>) 또는 건물/가정 에너지 관리 시스템의 신호일 수 있습니다. 이러한 신호는 OCPP의 범위를 벗어나지만, OCPP 관점에서 보면 CSMS가 외부 신호에 의한 충전 변경 사항을 통보받아야 한다는 것은 분명해 보입니다. 그러나 이는 충돌하는 신호를 처리하는 방법과 같은 여러 가지 의문으로 이어집니다. 아래 그림은 에너지 관리 시스템을 사용한 예시 설정을 보여줍니다. 여기서 외부 신호는 충전기와 직접 통신하는 설정과 로컬 컨트롤러를 사용하는 여러 충전기 설정 모두에서 시각화됩니다.

.외부 스마트 충전
image::part2/images/figure_97.svg[외부 스마트 충전]

.LC를 통한 외부 스마트 충전
image::part2/images/figure_98.svg[LC를 통한 외부 스마트 충전]

충전기가 외부 세계와 에너지 관리 시스템(EMS)에 모두 연결되어 있는 경우, EMS가 CSMS에서 수신한 충전 일정에도 불구하고 어떤 이유로든 충전이 적절하지 않다고 판단하는 상황이 발생할 수 있습니다. 이는 충전기가 CSMS에서 예상한 대로 작동하지 않음을 의미합니다. 이를 방지하기 위해 충전기는 EMS에서 명령을 받았다는 것을 CSMS에 알릴 수 있어야 합니다. 예를 들어 가정 사용자가 EV를 충전하는 대신 에어컨 시스템에 우선권/우선순위를 부여하는 경우가 있습니다(이 경우 에어컨과 EV 충전을 동시에 사용할 수 없다고 가정). 이 EMS는 연결의 최대 한도를 관리하기 위해 배치될 수 있지만 외부에서 제어할 수도 있습니다.

<<<

== Charging Profiles

=== Introduction

충전 전력 또는 전류에 영향을 미치는 것은 특정 시점에 충전기로 에너지 전송 한도를 보내는 것에 기반합니다. 이러한 한도는 <<charging_profile_type,ChargingProfile>>에 결합되어 있습니다. <<charging_profile_type,ChargingProfile>>은 충전 전력 또는 전류 한도 블록을 정의하고 시작 시간과 기간을 포함할 수 있는 <<charging_schedule_type,ChargingSchedule>>을 가지고 있습니다. 이는 충전기와 충전기의 EVSE에 적용될 수 있습니다. <<example_charging_profile,Example ChargingProfile>>에는 충전 프로파일을 사용하는 방법을 설명하기 위해  <<charging_profile_type,ChargingProfile>>의 예시가 주어집니다.

CSMS는 다음과 같은 상황에서 메시지 <<set_charging_profile_request,SetChargingProfileRequest>>를 사용하여 충전기에 충전 프로파일을 보낼 수 있습니다.

- 트랜잭션 시작 시 트랜잭션에 대한 충전 프로파일을 설정
- 충전기에 RequestStartTransaction 요청이 전송 될때
- 트랜잭션 중 트랜잭션에 대한 활성 프로파일을 변경
- 트랜잭션 컨텍스트 외에서 별도의 메시지로 로컬 컨트롤러, 충전기 또는 EVSE에 대한 기본 충전 프로파일을 설정

[[charging_profile_purpose]]
=== Charging profile purposes

이 섹션에서는 OCPP에서 지원되는 여러 유형의 충전 프로파일을 설명합니다. 충전 프로파일에는 _목적_ 에 따라 네 가지 유형이 있습니다.

[cols="<.^2,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ChargingProfile +
  목적 |설명

|[[charging_station_max_profile]]ChargingStationMaxProfile
  |내부 부하 분산 시나리오에서 충전기에는 충전기의 모든 EVSE가 공유할 전력 또는 전류를 제한하는 하나 이상의 로컬 충전 프로파일이 있습니다. CSMS는 이러한 프로파일을 ChargingProfilePurpose를 "_ChargingStationMaxProfile_"로 설정하여 구성해야 합니다. +
  _ChargingStationMaxProfile_ 은 충전기 evseId 0에서만 설정할 수 있습니다.
|[[tx_profile]]TxProfile
  |TxProfile이라는 목적이 있는 트랜잭션별 프로파일은 어느 쪽이 먼저 발생하는지에 따라 현재 트랜잭션 기간 동안만 <<tx_default_profile,TxDefaultProfile>>을 무시하거나 TxProfile이 만료될 때까지 무시합니다.
|[[tx_default_profile]]TxDefaultProfile
  |충전 정책을 부과하는 데 사용될 수 있는 새 트랜잭션에 대한 기본 일정입니다. 예를 들어 낮 동안 충전을 하지 않는 정책이 있습니다.
|[[charging_station_external_constraints]]ChargingStationExternalConstraints
  |CSMS가 아닌 외부 시스템이 충전 한도 또는 일정을 설정하면 충전기는 이 목적을 사용하여 해당 한도/일정을 보고합니다.
|===

=== Charging profile recurrency

이 섹션에서는 속성 _chargingProfileKind_ 의 값에 따라 정의된 충전 프로파일에서 사용할 수 있는 다양한 종류의 충전 일정을 설명합니다.

[cols="<.^2,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ChargingProfile +
  Kind |설명

|Absolute
  |충전 일정 기간은 일정에 정의된 절대 시점을 기준으로 합니다. 이를 위해서는 _startSchedule_ 이 시작 시점으로 설정되어야 합니다. 예를들어 충전 세션이 시작된 시점과 관계없이 17:00h와 21:00h 사이에 충전을 줄이는 일정을 사용할때 사용할 수 있습니다.
|Recurring
  |충전 일정은 첫 번째 일정 기간에 주기적으로 다시 시작됩니다. 가장 유용하려면 _startSchedule_ 이 시작 시점으로 설정되어야 합니다. _recurrencyKind_ = `Daily` 와 함께 사용하세요. +
  예를 들어, 충전 세션이 시작된 시점과 관계없이 매일 17:00h와 21:00h 사이에 충전을 줄이는 일정을 정의할때 사용됩니다.
|Relative
  |충전 일정 기간은 EVSE가 에너지를 공급할 준비가 되면 시작해야 합니다. 즉, EV 운전자가 인증되고 EV가 연결될 때입니다. 이미 충전 중인 트랜잭션에 대한 ChargingProfile을 수신하면 충전 일정 기간은 PowerPathClosed 순간까지 relative하게 유지되어야 합니다. +
  startSchedule에 대한 값을 제공해서는 안 됩니다.
|===

=== Stacking charging profiles

복잡한 달력을 설명하기 위해 동일한 <<charging_profile_type,ChargingProfile>> 목적의 충전 프로파일을 스태킹할 수 있습니다. 예를 들어, <<tx_default_profile,TxDefaultProfile>>의 목적인 <<charging_profile_type,ChargingProfile>>을 정의하여 주중 23:00h에서 06:00h까지, 그리고 주말 00:00h에서 24:00h까지 풀파워로 충전을 허용하고 다른 시간에는 전력 또는 전류 충전을 줄이는 한 주의 기간과 반복을 지정할 수 있습니다. 그 위에 다른 <<tx_default_profile,TxDefaultProfiles>>를 정의하여 휴일과 같이 이 규칙에 대한 예외를 정의할 수 있습니다.

<<charging_profile_type,ChargingProfile>>은 특정 시간 간격에 대한 제한을 정의하는 <<charging_schedule_type,ChargingSchedule>>을 보유합니다. <<charging_schedule_type,ChargingSchedule>>의 우선순위는 <<charging_profile_type,ChargingProfile>>의 _stackLevel_ 에 따라 결정됩니다. 동일한 <<charging_profile_purpose,chargingProfilePurpose>>를 갖는 두 개 이상의 <<charging_profile_type,ChargingProfile>>이 유효한 경우, 스택 수준이 더 높은 <<charging_profile_type,ChargingProfile>>의 <<charging_schedule_type,ChargingSchedule>>이 스택 수준이 더 낮은 <<charging_profile_type,ChargingProfile>>의 <<charging_schedule_type,ChargingSchedule>>을 무효화합니다.

충돌을 피하기 위해 동일한 _stackLevel_  과 동일한 _chargingProfilePurpose_  를 가진 여러 개의 충전 프로파일이 주어진 시간에 동일한 EVSE에서 ​​유효하도록 설정하는것을 허용하지 않습니다. EVSE #0의 충전 프로파일은 모든 EVSE에서 ​​활성화된 것으로 간주됩니다!

[[combining_charging_profile_purposes]]
=== Combining Charging Profile Purposes

충전 수준을 안내하는 복합 일정은 다양한 <<charging_profile_purpose,chargingProfilePurposes>>의 기존 충전 프로파일과 스택 수준의 조합입니다.

앞서 언급했듯이 각 충전 프로파일 목적에 대해 언제든지 해당 목적에 대한 leading 충전 일정은 해당 시간에 정의된 일정 기간이 있고 _validFrom_ 및 _validTo_ 매개변수에 따라 결정되는 해당 시간에 유효한 가장 높은 스택 수준을 가진 충전 프로파일에 속하는 충전 일정입니다. 복합 일정은 각 시간 간격에 대한 다양한 목적의 주요 프로파일 중에서 가장 낮은 충전 한도(다른 <<charging_rate_unit_enum_type,chargingRateUnits>> 고려)를 고려하여 계산됩니다.

유일한 예외는 <<tx_default_profile,TxDefaultProfiles>>와 <<tx_profile,TxProfile>>이 모두 유효한 경우입니다. 이 경우 <<tx_profile,TxProfile>>이 항상 <<tx_default_profile,TxDefaultProfiles>>보다 우선하므로 복합 일정은 이 특정 상황에서 주요 목적 프로파일 <<tx_default_profile,TxDefaultProfiles>>을 고려하지 않습니다. 시간 간격은 고정된 길이일 필요가 없으며 모든 <<charging_profile_type,ChargingProfile>> 목적에 대해 동일할 필요도 없습니다. 즉, 결과적으로 생성된 복합 일정에는 길이가 다른 간격이 포함될 수 있습니다.

충전기에 두 개 이상의 EVSE가 장착된 경우 ChargingStationMaxProfile의 한계 값은 모든 EVSE를 합친 한계입니다.

아래 두 그림은 서로 다른 stackLevels 및 Purposes를 가진 여러 충전 프로파일을 결합하는 예를 제공하는 데 사용됩니다.

.다수의 유효환 충전 프로파일 - 상황 1
image::part2/images/figure_99.svg[다수의 유효환 충전 프로파일 - 상황 1]

특정 시간 간격에서 유효한 충전 프로파일이 위의 그림(상황 1)과 같다고 가정합니다. 이 시간 간격의 복합 일정은 stackLevel 0인 ChargingStationMaxProfile, stackLevel 2인 TxDefaultProfile, stackLevel 1인 ChargingStationExternalConstraints 프로파일에 주어진 충전 한도 중 가장 낮은 것이 됩니다.

.다수의 유효환 충전 프로파일 - 상황 2
image::part2/images/figure_100.svg[다수의 유효환 충전 프로파일 - 상황 2]

반면에, 특정 시간 간격에 대해 유효한 충전 프로파일이 위 그림과 같은 상황(상황 2)인 상황을 고려해 보겠습니다. 이 시간 간격의 복합 일정은 StackLevel 0인 ChargingStationMaxProfile, StackLevel 1인 TxProfile, StackLevel 1인 ChargingStationExternalConstraints 프로파일에 제공된 충전 한도 중 가장 낮은 값이 됩니다. 이 상황에서 <<tx_profile,TxProfile>>이 <<tx_default_profile,TxDefaultProfiles>>보다 우선합니다.

[[example_charging_profile]]
=== Example Charging Profile

이 섹션은 정보 제공을 목적으로 합니다.

다음 데이터 구조는 08:00h~20:00h 사이에 전력을 6kW로 제한하고 00:00h~08:00h와 20:00h~00:00h 사이에 전력을 11kW로 제한하는 일일 기본 프로파일을 설명합니다.

[cols="<.^1,<.^1,<.^1,<.^1",%autowidth.stretch,frame=all,grid=all]
|===
s|ChargingProfile |{nbsp} |{nbsp} |{nbsp}
|chargingProfileId s|100 |{nbsp} |{nbsp}
|stackLevel s|0 |{nbsp} |{nbsp}
|chargingProfilePurpose s|TxDefaultProfile |{nbsp} |{nbsp}
|chargingProfileKind s|Recurring |{nbsp} |{nbsp}
|recurrencyKind s|Daily |{nbsp} |{nbsp}
|chargingSchedule 3.+|_(1개의 <<charging_schedule_type,ChargingSchedule>> 요소 목록)_
|{nbsp} s|ChargingSchedule |{nbsp} |{nbsp}
|{nbsp} |duration s|86400 (= 24시간) |{nbsp}
|{nbsp} |startSchedule s|2013-01-01T00:00Z |{nbsp}
|{nbsp} |chargingRateUnit s|W |{nbsp}
|{nbsp} |chargingSchedulePeriod
2.+|(3개의 <<charging_schedule_period_type,ChargingSchedulePeriod>> 요소 목록)
|{nbsp} |{nbsp} s|ChargingSchedulePeriod |{nbsp}
|{nbsp} |{nbsp} s|startPeriod s|0 (=00:00)
|{nbsp} |{nbsp} |limit s|11000
|{nbsp} |{nbsp} |numberPhases |3
|{nbsp} |{nbsp} s|ChargingSchedulePeriod |{nbsp}
|{nbsp} |{nbsp} |startPeriod s|28800 (=08:00)
|{nbsp} |{nbsp} |limit s|6000
|{nbsp} |{nbsp} |numberPhases |3
|{nbsp} |{nbsp} s|ChargingSchedulePeriod |{nbsp}
|{nbsp} |{nbsp} |startPeriod s|72000 (=20:00)
|{nbsp} |{nbsp} |limit s|11000
|{nbsp} |{nbsp} |numberPhases |3
|===

[cols="^.^1s,10",%autowidth.stretch]
|===
|IMPORTANT |사용되는 위상의 양 충전은 충전기, EV, CS와 EV 간 케이블의 기능에 따라 제한됩니다. 이 세 가지 중 하나라도 3위상 충전이 불가능한 경우 EV는 세 가지 모두에서 지원하는 위상 수를 사용하여 충전됩니다.
|===

[cols="^.^1s,10",%autowidth.stretch]
|===
|IMPORTANT |일정이나 트랜잭션 중에 사용되는 위상 수를 전환하는 것은 신중하게 수행해야 합니다. 일부 EV는 이를 지원하지 않을 수 있으며 위상 수를 변경하면 물리적 손상이 발생할 수 있습니다. 구성 변수: <<phases_3_to_1,Phases3to1>> 으로 충전기가 트랜잭션 중에 위상 수를 전환하는 것을 지원하는지 여부를 알 수 있습니다.
|===

[cols="^.^1s,10",%autowidth.stretch]
|===
|TIP |일광 절약 시간이 적용되거나 적용되지 않는 날에는 특수 프로파일이 필요할 수 있습니다(예: relativeprofiles의 경우).
|===

==== Example Using Stacked Charging Profiles

CSO가 17:00h에서 20:00h까지의 피크 시간 동안 충전을 2kW로 제한하고자 합니다. 이 제한은 일요일에는 적용되지 않으며 크리스마스에도 적용되지 않습니다.

이것이 많은 수의 충전기에 적용되는 경우 매주 일요일에 충전 프로파일을 삭제한 다음 월요일에 다시 추가하는 것은 실용적이지 않습니다. 가능한 해결책은 기본 프로파일에 대한 예외에 대해 더 높은 스택 레벨이 있는 프로파일을 추가하는 것입니다. 스택 레벨 #2와 #3이 일요일과 크리스마스에 대한 예외를 정의하는 데 사용되는 다음 JSON 예를 참조하세요.

**(1) TxDefaultProfile, 스택 #1:** 시간대 제한을 2kW로, 매일 17:00h에서 20:00h까지 반복합니다.

[,json]
----
"chargingProfile": {
  "id": 10, 
  "stackLevel": 1, 
  "chargingProfilePurpose": "TxDefaultProfile",
  "chargingProfileKind": "Recurring", 
  "recurrencyKind": "Daily",
  "chargingSchedule": [ {
    "id": 1, 
    "startSchedule": "2020-01-09T17:00:00", 
    "duration": 1080,
    "chargingRateUnit": "W",
    "chargingSchedulePeriod": [ { "startPeriod": 0, "limit": 2000 } ]
  } ]
}
----

**(2) TxDefaultProfile, 스택 #2:** 일요일을 무제한으로 무효화하고 매주 반복 2020-01-05.

[,json]
----
"chargingProfile": {
  "id": 11, 
  "stackLevel": 2, 
  "chargingProfilePurpose": "TxDefaultProfile",
  "chargingProfileKind": "Recurring", 
  "recurrencyKind": "Weekly",
  "chargingSchedule": [ {
    "id": 1, 
    "startSchedule": "2020-01-05T00:00:00", 
    "duration": 86400,
    "chargingRateUnit": "W",
    "chargingSchedulePeriod": [ { "startPeriod": 0, "limit": 999999 } ]
  } ]
}
----

**(3) TxDefaultProfile, 스택 #3:** 2020년 크리스마스 데이를 무제한으로 변경하고, 날짜를 2020-12-25로 고정.
이 프로파일은 2020년에만 유효합니다.

[,json]
----
"chargingProfile": {
  "id": 12, 
  "stackLevel": 3, 
  "chargingProfilePurpose": "TxDefaultProfile",
  "chargingProfileKind": "Absolute",
  "validFrom": "2020-01-01T00:00:00", 
  "validTo": "2021-01-01T00:00:00",
  "chargingSchedule": [ {
    "id": 1, 
    "startSchedule": "2020-12-25T00:00:00", 
    "duration": 86400,
    "chargingRateUnit": "W",
    "chargingSchedulePeriod": [ { "startPeriod": 0, "제한": 999999 } ]
  } ]
}
----

[cols="^.^1s,10",%autowidth.stretch]
|===
|NOTE |일반적으로 충전에 대한 제한이 필요하지 않은 경우 해당 시간에 대한 충전 일정 기간을 정의하지 않습니다(17:00h - 20:00h 이외의 시간에 대한 스택 수준 #1 참조). 그러나 더 높은 스택 수준이 있는 프로파일에서 충전 일정을 1만큼 무시하는 경우 제한이 없는 충전 일정 기간을 정의할 수 없습니다. 따라서 위의 예에서 스택 #2 및 #3의 충전 일정은 999999의 (임의의) 높은 값을 사용합니다.
|===

<<<

[[smart_charging_signals_to_a_charging_station_from_multiple_actors]]
== Smart Charging Signals to a Charging Station from Multiple Actors

이 섹션은 규범적입니다.

OCPP 내에서 스마트 충전을 위한 여러 메커니즘이 지원됩니다. 즉, EV를 충전할 때 제한을 추가할 수 있는 여러 메커니즘을 사용할 수 있습니다.

. CSMS는 충전기에 SetChargingProfile 메시지를 보내 충전에 영향을 미칠 수 있습니다. <<k01_set_charging_profile,K01 - SetChargingProfile>>을 참조하세요.
. EV는 PlugAndCharge 기능에 따라 충전에 영향을 미칠 수 있습니다. ISO 15118은 EV가 시작한 충전 제한을 활성화합니다. <<iso_15118_based_smart_charging,5.3. ISO 15118 based Smart Charging>> 섹션을 참조하세요.
. HEMS(Home Energy Management System) 또는 DSO와 같은 일부 로컬 입력은 외부 스마트 충전 제어 신호를 통해 충전에 영향을 미칠 수 있습니다. <<k11_set_update_external_charging_limit_with_ongoing_transaction,K11 - Set / Update External Charging Limit>>를 참조하세요.
. 충전기는 2대 이상의 EV가 충전 중일 때 부하 분산을 수행할 때 충전을 제한할 수 있습니다.

EV 충전 제한을 설정하는 데 관여할 수 있는 모든 당사자가 위의 메커니즘 중 하나를 직접 또는 간접적으로 사용한다는 가정이 있습니다.

충전기가 여러 주체의 동시 스마트 충전 신호에 어떻게 대응해야 하는지 결정하려면 다음 규칙을 따라야 합니다.

.여러 주체 상황에 대한 스마트 충전 규칙
[cols="^.^2,<.^6,<.^6,<.^4",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID |전제 조건 |요구 사항 정의 |참고

|SC.01 |{nbsp}
  |어떤 시점에서든 외부 소스의 일정과 각 목적의 ChargingStationMaxProfile, ChargingStationExternalConstraints 및 TxDefaultProfile(또는 TxProfile)에서 가장 높은 stackLevel을 가진 OCPP 충전 프로파일을 병합한 결과인 충전 한도는 병합된 일정에서 사용 가능한 전력 또는 전류의 가장 낮은 값보다 작거나 같아야 합니다.
    |이는 안전을 위해서 입니다.
|SC.02 |충전 프로파일이 변경된 경우
  |충전기는 항상 CSMS에 알려야 합니다.
      |이에 사용되는 메시지는 이 섹션의 시작 부분에 언급된 메커니즘 중 어떤 것이 적용되는지에 따라 다릅니다.

  1. 해당 없음 +
  2. <<notify_ev_charging_schedule_request,NotifyEVChargingScheduleRequest>> +
  3. <<notify_charging_limit_request,NotifyChargingLimitRequest>> +
  4. <<transaction_event_request,TransactionEventRequest>>
|SC.03 |{nbsp}
  |SC.02에 메커니즘 3 및 4에 설명된 충전 프로파일의 변경된 한도에 대한 CSMS 보고는 한도 변경이 구성 변수 <<limit_change_significance,`LimitChangeSignificance`>>에 정의된 백분율보다 작은 경우 건너뛸 수 있습니다.

  |이는 충전기가 작은 변동(예: 충전기의 HEMS/스마트 미터 입력으로 인해)에 대해 많은 메시지를 보내는 것을 방지하기 위한 것입니다.
|SC.04 |{nbsp}
|<<get_compositie_schedule_response,GetCompositeScheduleResponse>> 메시지는 항상 예상 충전 일정, 즉 충전을 위한 가장 낮은 _limit_ 를 보고해야 합니다. 즉, EV에 충전 한도 X가 있고 (예: ISO 15118 프로토콜을 사용하여) 제공된 양보다 적은 에너지 Y를 사용할 것이라고 표시하면 충전기는 한도 Y를 보고해야 합니다. |{nbsp}
|===

<<<

== Use cases & Requirements

=== General Smart Charging

:sectnums!:
[[k01_set_charging_profile]]
=== K01 - SetChargingProfile

.K01 - Central Smart Charging
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|번호 |유형 |설명

|1 |이름 |SetChargingProfile
|2 |ID |K01
|{nbsp} d|_기능 블록_ |K. 스마트 충전
|3 |목표 |CSMS가 특정 EVSE 또는 전체 충전기에서 일정 기간 동안 끌어오는 충전 전력 또는 전류에 영향을 미칠 수 있도록 합니다.
|4 |설명 |CSMS는 <<set_charging_profile_request,SetChargingProfileRequest>>를 충전기로 보내 EV에서 끌어오는 전력 또는 전류에 영향을 미칩니다. CSMS는 <<charging_schedule_type,ChargingSchedule>>을 계산하여 특정 한도 내에 머물도록 하는데, 이는 외부 시스템에서 부과할 수 있습니다.
|{nbsp} d|_Actors_ |충전기, CSMS, EV
|{nbsp} d|_시나리오 설명_
  |**1.** CSMS는 <<set_charging_profile_request,SetChargingProfileRequest>>를 충전기로 보내 충전 한도를 설정합니다. +
  **2.** 충전기는 <<set_charging_profile_response,SetChargingProfileResponse>>로 응답합니다.
|5 |필수 조건 |해당 없음
|6 |사후 조건
  |**성공한 사후 조건:** +
  충전기는 CSMS가 보낸 <<set_charging_profile_request,SetChargingProfileRequest>>에 따라 특정 EV의 충전 전력 또는 전류에 _성공적으로_ 영향을 미칩니다.

  **실패 사후 조건:** +
  충전기는 CSMS에서 보낸 <<set_charging_profile_request,SetChargingProfileRequest>>에 따라 특정 EV의 충전 전력 또는 전류에 영향을 미칠 수 없습니다.
|===

.시퀀스 다이어그램: SetChargingProfile
image::part2/images/figure_101.svg[시퀀스 다이어그램: SetChargingProfile]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7 |오류 처리 |n/a
|8 |비고 |n/a
|===

==== K01 - SetChargingProfile - Requirements

.K01 - 요구 사항
[cols="^.^2,<.^6,<.^6,<.^4",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID |사전 조건 |요구 사항 정의 |참고

|K01.FR.01 |{nbsp}
  |CSMS는 충전 한도를 설정할 수 있습니다. <<tx_profile,TxProfile>>을 사용하여 트랜잭션에 연결합니다. |{nbsp}
|K01.FR.02 |{nbsp}
  |CSMS는 EV에 대한 제한 일정으로 사용해야 하는 EVSE에 대한 새로운 충전 프로파일을 보낼 수 있습니다. |{nbsp}
|K01.FR.03 |{nbsp}
  |CSMS는 <<tx_profile,TxProfile>>을 설정할 때 <<set_charging_profile_request,SetChargingProfileRequest>>에 _transactionId_  를 포함해야 합니다.
    |transactionId는 프로파일을 특정 트랜잭션에 일치시키는 데 사용됩니다.
|K01.FR.04 |K01.FR.03 AND +
  주어진 _transactionId_  가 알려져 있는 경우
    |충전기는 지정된 _transactionId_  를 사용하여 보낸 <<tx_profile,TxProfile>>을 트랜잭션에 적용해야 합니다. |{nbsp}
|K01.FR.05 |이미 알려진 <<charging_profile_type,ChargingProfile>>._id_ 가 있는 <<set_charging_profile_request,SetChargingProfileRequest>>를 수신하고 기존 <<charging_profile_type,ChargingProfile>>에 <<charging_profile_purpose,chargingProfilePurpose>> = `ChargingStationExternalConstraints`  가 없는 경우
  |충전기는 기존 <<charging_profile_type,ChargingProfile>>을 지정된 것으로 대체해야 합니다.
    |ChargingStationExternalConstraints 프로파일은 대체할 수 없습니다.
|K01.FR.06 |_chargingProfilePurpose_ 가 `TxProfile`  이 아닌 경우
  |CSMS는 충전기의 다른 <<charging_profile_type,ChargingProfile>>(다른 _id_)에 이미 존재하고 유효 기간이 겹치는 _stackLevel - chargingProfilePurpose - evseId_ 조합을 갖는 <<charging_profile_type,ChargingProfile>>을 보내서는 안 됩니다.
    |이는 동일한 스택 수준과 용도를 가진 두 개의 충전 프로파일이 동시에 유효하지 않도록 하기 위한 것입니다.
|K01.FR.07 |충전기가 <<set_charging_profile_request,SetChargingProfileRequest>>를 _accepts_  하는 경우
  |충전기는 충전 프로파일 컬렉션을 다시 평가하여 어떤 <<charging_profile_type,ChargingProfile>>이 활성화될지 결정해야 합니다. |{nbsp}
|K01.FR.08 |{nbsp}
  |CSMS는 기본 충전 프로파일로 사용할 충전 프로파일을 충전기로 보낼 수 있습니다. |{nbsp}
|K01.FR.09 |<<tx_profile,TxProfile>>이 있는 <<set_charging_profile_request,SetChargingProfileRequest>>가 수신되고 지정된 EVSE에서 ​​활성화된 트랜잭션이 없는 경우
  |충전기는 `Rejected` 상태의 <<set_charging_profile_response,SetChargingProfileResponse>>를 보내야 합니다. |{nbsp}
|K01.FR.10 | <<charging_profile_type,ChargingProfile>>의 _validFrom_ 및 _validTo_ 가 설정되지 않은 경우
  |충전기는 <<charging_profile_type,ChargingProfile>>이 명시적으로 대체될 때까지 무기한 유효한 것으로 간주해야 합니다. |{nbsp}
|K01.FR.11 | <<charging_schedule_type,ChargingSchedule>>에 _duration_  이 있고 +
  <<charging_schedule_period_type,ChargingSchedulePeriod>>._startPeriod_ >= <<charging_schedule_type,ChargingSchedule>>._duration_  인 경우
    |충전기는 <<charging_schedule_period_type,ChargingSchedulePeriod>>를 실행해서는 안 됩니다. <<charging_schedule_type,ChargingSchedule>>의 기간을 지났기 때문입니다. |{nbsp}
|K01.FR.12 |{nbsp}
  |<<charging_schedule_period_type,ChargingSchedulePeriod>>는 목록의 다음 <<charging_schedule_period_type,ChargingSchedulePeriod>>가 시작되거나 <<charging_schedule_type,ChargingSchedule>>._duration_  이 경과할 때까지 활성 상태를 유지합니다. |{nbsp}
|K01.FR.13 |<<recurrency_kind_enum_type,recurrencyKind>>가 <<recurrency_kind_enum_type,recurrencyKind>> period보다 짧은 <<charging_schedule_type,ChargingSchedule>> duration과 함께 사용되는 경우.
  |충전기는 <<charging_schedule_type,ChargingSchedule>> duration이 끝나면 기본 동작으로 돌아갑니다. |{nbsp}
|K01.FR.14 |<<tx_default_profile,TxDefaultProfile>> 및 evseId = 0인 <<set_charging_profile_request,SetChargingProfileRequest>>가 수신되고 동일한 stackLevel을 가진 다른 <<tx_default_profile,TxDefaultProfile>>이 특정 EVSE에 설치되지 않은 경우.
  |충전기는 이 프로파일을 모든 EVSE에 적용해야 하지만 복사해서는 안 됩니다.
    |EVSE #0의 TxDefaultProfile 충전 프로파일은 EVSE #0이 "소유"하지만 모든 EVSE에 적용됩니다.
|K01.FR.15 |<<tx_default_profile,TxDefaultProfile>> 및 evseId > 0을 갖는 <<set_charging_profile_request,SetChargingProfileRequest>>를 수신하고 동일한 stackLevel을 갖는 <<tx_default_profile,TxDefaultProfile>>이 EVSE #0에 설치되지 않은 경우.
  |충전기는 지정된 EVSE에만 이 프로파일을 적용해야 합니다. |{nbsp}
|K01.FR.16 |{nbsp}
  |<<tx_profile,TxProfile>>은 evseId >0에서만 사용해야 합니다. |{nbsp}
|K01.FR.17 |{nbsp}
  |같은 <<charging_profile_purpose,chargingProfilePurpose>>를 가진 두 개 이상의 <<charging_profile_type,ChargingProfile>>가 유효한 경우, _validFrom_ 및 _validTo_ 필드에 따라 결정되며, 더 높은 _stackLevel_  을 가진 <<charging_profile_type,ChargingProfile>>의 <<charging_schedule_type,ChargingSchedule>>이 더 낮은 _stackLevel_  을 가진 <<charging_profile_type,ChargingProfile>>의 <<charging_schedule_type,ChargingSchedule>>을 무효화합니다. |{nbsp}
|K01.FR.19 |{nbsp}
  |CSMS는 <<charging_schedule_period_type,numberPhases>>가 1이 아닌 경우 <<set_charging_profile_request,SetChargingProfileRequest>>에서 <<charging_schedule_period_type,phaseToUse>>를 설정해서는 안 됩니다. |{nbsp}
|K01.FR.20 |{nbsp}
  |CSMS는 EVSE에 <<ac_phase_switching_supported,ACPhaseSwitchingSupported>>가 정의되어 있지 않고 true로 설정되어 있지 않은 경우 <<set_charging_profile_request,SetChargingProfileRequest>>에서 <<charging_schedule_period_type,phaseToUse>>를 설정해서는 안 됩니다. |{nbsp}
|K01.FR.21 |{nbsp}
  |선택 사항인 <<charging_schedule_type,ChargingSchedule>> 필드 <<charging_schedule_type,minChargingRate>>는 충전기에서 EVSE 간 전력 분배를 최적화하는 데 사용할 수 있습니다.
    |이 매개변수는 로컬 컨트롤러에 <<charging_schedule_type,minChargingRate>> 이하의 충전은 비효율적임을 알려 다른 밸런싱 전략을 선택할 수 있는 가능성을 제공합니다.
|K01.FR.22 |{nbsp}
  |CSMS는 <<set_charging_profile_request,SetChargingProfileRequest>>에서 <<charging_profile_purpose,chargingProfilePurpose>>를 <<charging_station_external_constraints,ChargingStationExternalConstraints>>로 설정해서는 안 됩니다.
    |이 목적은 외부 시스템에서 충전 한도/일정을 설정한 경우에만 사용됩니다.
|K01.FR.26 |<<set_charging_profile_request,SetChargingProfileRequest>>가 구성 변수 `ChargingScheduleChargingRateUnit` 에 구성되지 않은 값이 _chargingRateUnit_  에 대한 값으로 수신되는 경우.
|충전기는 <<set_charging_profile_response,SetChargingProfileResponse>>로 `Rejected` 상태로 응답해야 합니다. |{nbsp}
|K01.FR.27 |{nbsp}
  |SetChargingProfileRequest를 통해 설정된 ChargingProfiles는 재부팅/전원 주기를 거쳐도 지속되어야 합니다. |{nbsp}
|K01.FR.28 |존재하지 않는 evseId에 대해 <<set_charging_profile_request,SetChargingProfileRequest>>가 수신된 경우.
  |충전기는 <<set_charging_profile_response,SetChargingProfileResponse>>로 응답해야 하며 상태는 `Rejected`  입니다. |{nbsp}
|K01.FR.29 |충전기가 스마트 충전을 지원하지 않는 경우.
  |충전기는 RPC 프레임워크 호출자 CALLERROR: NotSupported 또는 NotImplemented로 응답해야 합니다. |{nbsp}
|K01.FR.30 |_chargingProfile_  에는 _startSchedule_  이 미래 시간으로 설정된 _chargingSchedule_  이 있습니다.
  |충전기는 _startSchedule_  에서 설정한 시점부터 이 일정의 제한을 부과하기 시작해야 합니다. |{nbsp}
|K01.FR.31 |{nbsp}
  |<<charging_schedule_type,chargingSchedule>>의 첫 번째 <<charging_schedule_period_type,chargingSchedulePeriod>>의 _startPeriod_  는 항상 0이어야 합니다. |{nbsp}
|K01.FR.32 |(K01.FR.14 또는 K01.FR.15)이고 지정된 EVSE에서 ​​트랜잭션이 활성화되어 있습니다(evseId = 0은 모든 EVSE를 나타냄).
  |충전기는 지정된 EVSE에서 ​​트랜잭션을 계속 진행해야 하지만 새로운/업데이트된 <<tx_default_profile,TxDefaultProfile>>을 사용합니다. |{nbsp}
|K01.FR.33 |K01.FR.03 AND +
  주어진 transactionId가 알려지지 않음
    |충전기는 <<set_charging_profile_request,SetChargingProfileRequest>>를 reject해야 합니다. |{nbsp}
|K01.FR.34 |CSMS는 현재 트랜잭션에 대한 <<notify_ev_charging_needs_request,NotifyEVChargingNeedsRequest>>를 수신하지 못했습니다. 즉, 충전 세션은 ISO 15118을 사용하지 않습니다.
  |<<set_charging_profile_request,SetChargingProfileRequest>>의 <<charging_profile_type,ChargingProfile>>에는 <<charging_schedule_type,ChargingScheduleType>>이 하나만 포함되어야 합니다.
|ISO 15118 스마트 충전에 대한 사용 사례 K15-K17을 참조하세요.
|K01.FR.35 |{nbsp}
  |<<charging_schedule_type,chargingSchedule>>의 <<charging_schedule_period_type,ChargingSchedulePeriod>> 요소 목록은 <<charging_schedule_period_type,ChargingSchedulePeriod>>._startPeriod_ 의 값 기준 오름차순으로 정렬해야 합니다.
    |이는 목록이 시간순으로 정렬됨을 의미합니다.
|K01.FR.36 |<<charging_profile_type,ChargingProfile>>의 _validFrom_ 이 설정된 경우
  |충전기는 현재 시간 >= _validFrom_ 일 때 <<charging_profile_type,ChargingProfile>>을 유효한 것으로 간주해야 합니다. |{nbsp}
|K01.FR.37 |<<charging_profile_type,ChargingProfile>>의 _validTo_ 가 설정된 경우
  |충전기는 현재 시간 < _validTo_ 일 때 <<charging_profile_type,ChargingProfile>>을 유효한 것으로 간주해야 합니다. |{nbsp}
|K01.FR.38 |_chargingProfilePurpose_ = `ChargingStationMaxProfile` 인 경우
  |_chargingProfileKind_가 `Relative` 이면 안 됩니다 |{nbsp}
|K01.FR.39 |_chargingProfilePurpose_가 `TxProfile` 인 경우
  |CSMS는 다른 <<charging_profile_type,ChargingProfile>>(다른 _id_)에 이미 존재하는 _stackLevel - transactionId_ 조합을 가진 <<charging_profile_type,ChargingProfile>>을 `TxProfile` 목적으로 보내면 안 됩니다.
    |이는 동일한 스택 수준과 목적을 가진 두 개의 충전 프로파일이 동시에 유효하지 않도록 하기 위한 것입니다.
|K01.FR.40 |<<charging_profile_type,ChargingProfile>>의 _chargingProfileKind_ 가 `Absolute` 또는 `Recurring` 인 경우
  |<<charging_profile_type,ChargingProfile>>의 <<charging_schedule_type,ChargingSchedule>>에 _startSchedule_ 값이 있어야 합니다.
    |이는 일정과 반복 시퀀스의 시작 날짜/시간을 결정합니다.
|K01.FR.41 |<<charging_profile_type,ChargingProfile>>의 _chargingProfileKind_ 가 `Relative` 인 경우
  |<<charging_profile_type,ChargingProfile>>의 <<charging_schedule_type,ChargingSchedule>>에는 _startSchedule_ 필드가 없어야 합니다.
    |상대적 프로파일은 프로파일이 활성화된 때부터 시작됩니다.
|K01.FR.42 |K01.FR.41
  |충전기가 에너지를 공급할 준비가 된 순간을 기준으로 <<charging_schedule_period_type,ChargingSchedulePeriods>>를 relative로 만드는 것을 권장합니다. 즉, EV 운전자가 인증되고 EV가 연결된 시점입니다.
    |이것은 충전기가 에너지를 공급할 준비가 된 트랜잭션의 지점입니다. PowerPathClosed가 TxStartPoint인 경우 이는 트랜잭션의 시작과 일치합니다. 다음 OCPP 버전에서는 이것이 더 엄격한 요구 사항이 됩니다.
|K01.FR.43 |numberPhases 값이 있는 <<set_charging_profile_request,SetChargingProfileRequest>>를 수신하고 EVSE가 AC 유형이고 충전기가 수신된 numberPhases 이상을 사용하지 않도록 보장할 수 없는 경우
    |충전기는 status = `Rejected`  로 응답해야 합니다.
      |예를 들어 <<charging_profile_type,ChargingProfile>>이 3상을 정의하고 충전기가 3상으로 충전할 수 있는 경우에도 EV 또는 케이블이 3상으로 충전할 수 있다는 보장은 없습니다. +
      수신된 MeterValues를 기반으로 CSMS는 사용된 위상 수를 확인할 수 있습니다. 위상 한도를 올바르게 계산하려면 요구 사항 K01.FR.50 및 K01.FR.51을 참조하세요.
|K01.FR.44 |<<set_charging_profile_request,SetChargingProfileRequest>>에 _numberPhases_ 또는 _phaseToUse_ 값이 수신되고 +
  EVSE가 DC ​​유형인 경우
    |충전기는 Rejected 대신 status = _Accepted_  로 응답하고 제공된 _numberPhases_ 및 _phaseToUse_ 값을 무시할 수 있습니다.(MAY) |{nbsp}
|K01.FR.45 |<<set_charging_profile_request,SetChargingProfileRequest>>에 _numberPhases_ 값이 수신되고 +
  EVSE가 AC 유형이고 수신된 _numberPhases_  가 충전기에서 지원되지 않거나 충전기에서 지원하는 _numberPhases_  보다 높은 경우
  |충전기는 _Rejected_ 대신 status = _Accepted_  로 응답하고 더 낮은 _numberPhases_  로 제한을 부과할 수 있습니다.
    |단계당 제한을 올바르게 계산하려면 요구 사항 K01.FR.50 및 K01.FR.51을 참조하세요.
|K01.FR.46 |<<set_charging_profile_request,SetChargingProfileRequest>>가 _numberPhases = 1_ 이고 _phaseToUse_  에 대한 값이 수신되고 +
  EVSE가 AC 유형이고 EVSE가 EV에 연결된 위상을 전환할 수 있는 경우(<<ac_phase_switching_supported,ACPhaseSwitchingSupported>>가 _true_  로 정의됨) 또는 +
  EVSE가 이미 수신된 _phaseToUse_  를 사용하려고 하는 경우
    |충전기는 수신된 _phaseToUse_ 가 나타내는 위상을 사용하여 EV에 연결해야 합니다. |{nbsp}
|K01.FR.47 |<<set_charging_profile_request,SetChargingProfileRequest>>가 _numberPhases = 1_  이고 _phaseToUse_  가 생략된 경우 수신되고 +
  EVSE가 AC 유형인 경우
    |충전기는 스스로 위상을 선택해야 합니다. |{nbsp}
|K01.FR.48 |<<set_charging_profile_request,SetChargingProfileRequest>>에 _phaseToUse_ 값이 수신되고 +
  EVSE가 EV에 연결된 위상을 전환할 수 없는 경우, 이는 <<ac_phase_switching_supported,ACPhaseSwitchingSupported>>가 구현되지 않았거나 _false_  로 정의되지 않은 것으로 표시되며 +
  EVSE가 수신된 _phaseToUse_  를 사용하지 않을 경우
    |충전기는 status = _Rejected_  로 응답해야 합니다. |{nbsp}
|K01.FR.49 |<<set_charging_profile_request,SetChargingProfileRequest>>에 _numberPhases_ 값이 없는 경우 수신되고 +
  EVSE가 AC 유형인 경우
    |충전기는 기본값으로 numberPhases = 3을 가정해야 합니다. |{nbsp}
|K01.FR.50 | <<set_charging_profile_request,SetChargingProfileRequest>>와 <<charging_rate_unit_enum_type,chargingRateUnit>> = _W_ 가 수신되고 +
  ChargingSchedule은 AC 충전에 사용됩니다. |충전기는 다음을 통해 위상 전류 제한을 계산해야 합니다. 위상당 전류 = 전력 / (라인 전압 * 위상 수).
    |계산에 사용된 "라인 전압"은 측정된 전압이 아니라 해당 영역에 설정된 전압(예: 230 또는 110V)입니다. "위상 ​​수"는 ChargingSchedulePeriod의 numberPhases입니다. 일반적으로 AC 충전의 경우 <<charging_rate_unit_enum_type,chargingRateUnit>> = _A_ 를 사용하는 것이 더 편리합니다.
|K01.FR.51 |<<charging_rate_unit_enum_type,chargingRateUnit>> = _A_ 인 <<set_charging_profile_request,SetChargingProfileRequest>>를 수신할 때
  |충전기는 제공된 제한을 사용하여 모든 단계의 합이 아닌 단계당 암페어 양을 제한해야 합니다. |{nbsp}
|K01.FR.52 |<<tx_default_profile,TxDefaultProfile>> 및 _evseId_ = 0인 <<set_charging_profile_request,SetChargingProfileRequest>>가 수신되고 +
  동일한 stackLevel을 가진 <<tx_default_profile,TxDefaultProfile>>이 특정 EVSE에 설치되고 해당 _chargingProfile.id_ 가 수신된 _chargingProfile.id_ 와 같지 않은 경우
    |충전기는 `Rejected` 상태와 선택적으로 _reasonCode_ = `DuplicateProfile` 인 <<set_charging_profile_response,SetChargingProfileResponse>>로 응답해야 합니다. |{nbsp}
|K01.FR.53 |<<tx_default_profile,TxDefaultProfile>> 및 _evseId_ > 0인 <<set_charging_profile_request,SetChargingProfileRequest>>를 수신하고 +
  동일한 _stackLevel_ 을 가진 <<tx_default_profile,TxDefaultProfile>>이 EVSE #0에 설치되고 해당 _chargingProfile.id_ 가 수신된 _chargingProfile.id_ 와 같지 않은 경우
    |충전기는 `Rejected` 상태와 선택적으로 _reasonCode_ = `DuplicateProfile` 인 <<set_charging_profile_response,SetChargingProfileResponse>>로 응답해야 합니다. |{nbsp}
|===

=== K02 - Central Smart Charging

.K02 - Central Smart Charging
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|번호 |유형 |설명

|1 |이름 |Central Smart Charging
|2 |ID |K02
|{nbsp} d|_기능 블록_ |K. Smart Charging
|3 |목표 |CSMS가 특정 EVSE 또는 전체 충전기에서 일정 기간 동안 끌어오는 충전 전력 또는 전류에 영향을 미칠 수 있도록 합니다.
|4 |설명 |CSMS가 충전기에 <<set_charging_profile_request,SetChargingProfileRequest>>를 보내 EV에서 끌어오는 전력 또는 전류에 영향을 미칩니다. CSMS는 외부 시스템에서 부과할 수 있는 한도 내에 머물기 위해 <<charging_schedule_type,ChargingSchedule>>을 계산합니다.

  참조: <<central_smart_charging,Central Smart Charging>>
|{nbsp} d|_Actors_ |충전기, CSMS, EV, EV 운전자
|{nbsp} d|_시나리오 설명_
  |**1.** 인증 후 충전기는 제어 파일럿 신호를 통해 EV가 사용할 수 있는 최대 전류를 설정합니다. 이 한도는 충전기가 이전에 CSMS에서 수신한 (기본) <<charging_profile_type,ChargingProfiles>>를 기반으로 합니다. +
  **2.** EV가 충전을 시작하고 <<transaction_event_request,TransactionEventRequest>>가 CSMS로 전송됩니다. +
  **3.** CSMS가 <<transaction_event_response,TransactionEventResponse>>로 응답합니다. +
  **4.** <<transaction_event_request,TransactionEventRequest>>에 대한 응답으로 CSMS는 <<set_charging_profile_request,SetChargingProfileRequest>>를 사용하여 트랜잭션에 대한 충전 한도를 설정할 수 있습니다. +
  **5.** 충전기는 <<set_charging_profile_response,SetChargingProfileResponse>>로 응답합니다. +
  **6.** 충전이 진행되는 동안 EVSE는 설치된 <<charging_profile_type,ChargingProfiles>>에 따라 최대 전류 또는 전력을 지속적으로 조정합니다.
|{nbsp} d|_대체 시나리오_
  |<<k03_local_smart_charging,K03 - Local Smart Charging>> +
  <<k04_internal_load_balancing,K04 - Internal Load Balancing>>
|5 |필수 조건 |기능 블록 _Smart Charging_ 이 설치되어 있습니다.
|6 |사후 조건(들)
  |**성공한 사후 조건:** +
  충전기는 CSMS에서 보낸 <<set_charging_profile_request,SetChargingProfileRequest>>에 따라 특정 EV의 충전 전력 또는 전류에 _성공적으로_ 영향을 미칩니다.

  **실패한 사후 조건:** +
  충전기는 CSMS에서 보낸 <<set_charging_profile_request,SetChargingProfileRequest>>에 따라 특정 EV의 충전 전력 또는 전류에 영향을 미칠 수 없습니다.
|===

.Sequence Diagram: Central Smart Charging
image::part2/images/figure_102.svg[Sequence Diagram: Central Smart Charging]

위 그림에 대한 설명:

- 인증 후 EVSE는 Control Pilot 신호를 통해 사용할 최대 전류를 설정합니다. 이 제한은 EVSE가 이전에 CSMS에서 수신한 (기본) 충전 프로파일을 기반으로 합니다. EV가 충전을 시작하고 <<transaction_event_request,TransactionEventRequest>>가 CSMS로 전송됩니다.
- 충전이 진행되는 동안 EVSE는 충전 프로파일에 따라 최대 전류 또는 전력을 지속적으로 조정합니다. 선택적으로 CSMS는 언제든지 EVSE에 대한 새 충전 프로파일을 보낼 수 있습니다. 그러면 충전기는 새 복합 일정을 계산할 때 이 새 일정도 고려합니다. 이런 방식으로 CSMS는 진행 중인 트랜잭션의 충전에 영향을 미칠 수 있습니다.

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7 |오류 처리 |n/a
|8 |참고 |CSMS는 트랜잭션당 <<charging_schedule_type,ChargingSchedule>>에 대한 제약 조건을 결정합니다.

CSMS는 EVSE에 충전 한도를 부과합니다. <<transaction_event_request,TransactionEventRequest>>에 대한 응답으로 CSMS는 TxProfile을 사용하여 트랜잭션에 대한 충전 한도를 설정하도록 선택할 수 있습니다. 충전 프로파일을 보내기 전에 <<transaction_event_request,TransactionEventRequest>>에서 `_offline_` 플래그를 확인하여 트랜잭션이 계속 진행될 가능성이 있는지 확인하는 것이 좋습니다. <<transaction_event_request,TransactionEventRequest>>는 _Offline_ 기간 동안 캐시되었을 수 있습니다. +
트랜잭션에 적용되는 최종 일정 제약은 목적이 _ChargingStationMaxProfile_인 프로파일을 목적이 _TxProfile_인 프로파일과 병합하거나 목적이 _TxProfile_인 프로파일이 제공되지 않는 경우 <<tx_default_profile,TxDefaultProfile>> 프로파일을 병합하여 결정됩니다. 다음 <<charging_profile_type,ChargingProfile>> 목적 중 0개 이상이 이전에 CSMS에서 수신되었을 수 있습니다. _ChargingStationMaxProfile_ 또는 <<tx_default_profile,TxDefaultProfile>>.

TxProfile에서 ChargingSchedule의 기간 필드를 생략하여 자동으로 트랜잭션이 끝날 때까지 지속되도록 하는 것이 좋습니다. 트랜잭션이 끝나기 전에 TxProfile이 만료되면 활성 TxDefaultProfile과 ChargingStationMaxProfile의 가장 낮은 한도로 돌아갑니다. 다른 활성 프로파일이 없으면 충전기의 로컬 한도로 돌아갑니다.

위의 시나리오 설명과 시퀀스 다이어그램은 시작 트랜잭션을 위한 구성 변수가 다음과 같이 구성되는 것을 기반으로 합니다. +
<<tx_start_point,`TxStartPoint`>>: <<tx_start_stop_point_values,Authorized, DataSigned, PowerPathClosed, EnergyTransfer>> +
이 사용 사례는 다른 구성에도 유효하지만 트랜잭션이 다른 순간에 시작/중지될 수 있으며, 이는 메시지가 전송되는 순서를 변경할 수 있습니다. 자세한 내용은 사용 사례를 참조하세요. <<e01_start_transaction_options,E01 - Start Transaction options>>.
|===

==== K02 - Central Smart Charging - 요구 사항

.K02 - 요구 사항
[cols="^.^2,<.^6,<.^6,<.^4",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID |전제 조건 |요구 사항 정의 |참고

|K02.FR.01 |{nbsp}
|CSMS는 외부 시스템에서 부과한 제한 내에 머물기 위해 충전 프로파일을 사용해야 합니다. |{nbsp}
|K02.FR.02 |인증 후.
|EVSE는 Control Pilot 신호를 통해 사용할 최대 전류를 설정합니다.
|이 요구 사항은 61851을 사용하는 AC 충전기에만 적용됩니다. 제한은 EVSE가 이전에 CSMS에서 수신한 (기본) 충전 프로파일을 기반으로 할 수 있습니다.
|K02.FR.03 |{nbsp}
|업데이트된 <<charging_profile_type,ChargingProfile>>이 현재 트랜잭션에만 적용되도록 하기 위해 CSMS는 <<charging_profile_type,ChargingProfile>>의 chargingProfilePurpose를 _TxProfile_로 설정해야 합니다.
|업데이트된 청구 프로파일은 CSMS에서 동일한 chargingProfileId로 <<charging_profile_type,ChargingProfile>>을 보내면 보낼 수 있습니다.
|K02.FR.04 |_TxProfile_ 목적이 있는 트랜잭션별 프로파일이 있는 경우.
|<<tx_profile,TxProfile>>은 현재 트랜잭션 기간 동안만 목적이 <<tx_default_profile,TxDefaultProfile>>인 기본 청구 프로파일을 무시해야 합니다. |{nbsp}
|K02.FR.05 |K02.FR.04 +
트랜잭션이 중단된 후
|<<tx_profile,TxProfile>>은 삭제되어야 합니다. |{nbsp}
|K02.FR.06 |{nbsp}
|선택 사항인 <<charging_schedule_type,ChargingSchedule>> 필드 <<charging_schedule_type,minChargingRate>>는 충전기에서 EVSE 간 전력 분배를 최적화하는 데 사용할 수 있습니다.
|이 매개변수는 로컬 컨트롤러에 <<charging_schedule_type,minChargingRate>> 이하의 충전은 비효율적임을 알려 다른 밸런싱 전략을 선택할 수 있는 가능성을 제공합니다.
|K02.FR.07 |{nbsp}
|CSMS는 <<set_charging_profile_request,SetChargingProfileRequest>>에서 <<charging_profile_purpose,chargingProfilePurpose>>를 <<charging_station_external_constraints,ChargingStationExternalConstraints>>로 설정해서는 안 됩니다.
|이 목적은 외부 시스템이 충전 한도/일정을 설정한 경우에만 사용됩니다.
|K02.FR.08 |K02.FR.04 AND +
<<tx_profile,TxProfile>>의 충전 일정은 설정된 기간 또는 validTo 기간이 만료되었기 때문에 트랜잭션이 끝나기 전에 종료됩니다.
|충전기는 활성 <<tx_default_profile,TxDefaultProfile>> 및 <<charging_station_max_profile,ChargingStationMaxProfile>>의 가장 낮은 한도를 사용하도록 돌아갑니다. 다른 활성 프로파일이 없으면 충전기의 로컬 한계로 돌아갑니다 |{nbsp}
|===

<<<

[[k03_local_smart_charging]]
=== K03 - 로컬 스마트 충전

.K03 - 로컬 스마트 충전
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|번호 |유형 |설명

|1 |이름 |로컬 스마트 충전
|2 |ID |K03
|{nbsp} d|_기능 블록_ |K. 스마트 충전
|3 |목표 |로컬 컨트롤러가 충전기에서 충전 한계를 설정할 수 있도록 합니다.
|4 |설명 |로컬 스마트 충전은 스마트 충전이 활성화된 충전기의 충전 한계가 CSMS가 아닌 로컬 컨트롤러가 로컬로 제어하는 ​​사용 사례를 설명합니다. 충전 한도는 어떤 방식으로든 로컬 컨트롤러에서 미리 구성하거나 CSMS에서 설정할 수 있습니다. 로컬 컨트롤러는 필요에 따라 한도를 조정하여 연결된 EVSE에 이 용량을 분배하는 논리를 포함해야 합니다. +
로컬 스마트 충전에 대한 이 사용 사례는 충전기 그룹에서 사용할 수 있는 전력량을 특정 최대치로 제한하는 것입니다.

<<local_smart_charging_topology,Figure Local Smart Charging Topology>> 참조
|{nbsp} d|_Actors_ |충전기, CSMS, EV, 로컬 컨트롤러, EV 드라이버
|{nbsp} d|_시나리오 설명_
|**1.** 충전기는 인증 후 제어 파일럿 신호를 통해 EV가 사용할 수 있는 최대 전류를 설정합니다. 이 한도는 충전기가 이전에 CSMS에서 수신한 <<tx_default_profile,TxDefaultProfile>>을 기반으로 합니다. +
**2.** EV가 충전을 시작하고 충전기가 <<transaction_event_request,TransactionEventRequest>>를 보냅니다. +
**3.** 로컬 컨트롤러를 통해 <<transaction_event_request,TransactionEventRequest>>가 CSMS로 전송되어 로컬 컨트롤러가 트랜잭션이 시작되었음을 알 수 있습니다. +
**4.** 트랜잭션 중에 로컬 컨트롤러가 <<set_charging_profile_request,SetChargingProfileRequest>>를 보내 충전 전류/전력에 영향을 미칩니다. +
**5.** 충전기는 설치된 <<charging_profile_type,ChargingProfiles>>에 따라 충전 한도를 계산합니다. +
**6.** 로컬 컨트롤러는 충전기와 CSMS 간에 메시지를 전달하기만 하므로 CSMS가 모든 로컬 스마트 충전 그룹 구성원을 개별적으로 처리할 수 있습니다. +
**7.** 충전이 진행되는 동안 EVSE는 설치된 <<charging_profile_type,ChargingProfiles>>에 따라 최대 전류를 지속적으로 조정합니다.
|5 |필수 조건 |기능 블록 _Smart Charging_ 이 설치되었습니다.
|6 |사후 조건
|**성공적인 사후 조건:** +
로컬 컨트롤러가 제어 파일럿 신호를 통해 최대 충전 한도를 _성공적으로_ 제어합니다.

**실패 사후 조건:** +
해당 없음
|===

.Sequence Diagram: Local Smart Charging
image::part2/images/figure_103.svg[Sequence Diagram: Local Smart Charging]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7 |오류 처리 |해당 없음
|8 |참고 |로컬 스마트 충전을 위한 로컬 컨트롤러는 다음과 같이 다양한 방식으로 구현할 수 있습니다. +
별도의 물리적 구성 요소 또는 여러 다른 충전기를 제어하는 ​​'마스터' 충전기의 일부로 구현할 수 있습니다.

로컬 컨트롤러는 자체 EVSE를 가질 수도 있고 가질 수 없습니다.

로컬 스마트 충전 그룹의 충전기에 대한 제한은 로컬 컨트롤러에서 어떤 방식으로든 미리 구성하거나 CSMS에서 설정할 수 있습니다. 로컬 컨트롤러에는 필요에 따라 제한을 조정하여 연결된 EVSE 간에 이 용량을 분배하는 논리가 포함되어 있습니다.
|===

==== K03 - 로컬 스마트 충전 - 요구 사항

.K03 - 요구 사항
[cols="^.^2,<.^6,<.^6,<.^4",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID |전제 조건 |요구 사항 정의 |참고

|K03.FR.01 |{nbsp}
|로컬 컨트롤러는 충전기에 충전 제한을 부과할 수 있습니다. |{nbsp}
|K03.FR.02 |K03.FR.01
|이러한 제한은 충전기 그룹의 전력 소비를 그룹 제한 내로 유지하기 위해 충전 프로세스 중에 동적으로 변경될 수 있습니다. |{nbsp}
|K03.FR.03 |로컬 컨트롤러가 EVSE에 새로운 <<charging_profile_type,ChargingProfile>>을 보내는 경우
|충전기는 EV를 충전하는 데 사용할 새로운 복합 일정을 계산할 때 이 새로운 <<charging_profile_type,ChargingProfile>>을 고려해야 합니다. |{nbsp}
|K03.FR.04 |{nbsp}
|다른 트랜잭션보다 충전 우선 순위가 높은 트랜잭션은 다른 트랜잭션을 중단해야 하는 경우에도 가능한 한 오랫동안 이행되어야 합니다. |{nbsp}
|K03.FR.05 |<<transaction_event_response,TransactionEventResponse>>에 제공된 충전 우선 순위가 <<id_token_info_type,IdTokenInfo>>의 충전 우선 순위와 다른 경우
|<<transaction_event_response,TransactionEventResponse>>의 chargingPriority는 이 트랜잭션에만 사용해야 합니다.
|따라서 인증 부여 캐시 등에 저장해서는 안 됩니다.
|K03.FR.06 |chargingPriority를 ​​알 수 없는 경우.
|트랜잭션 또는 IdToken은 chargingPriority가 0인 것으로 가정해야 합니다. |{nbsp}
|K03.FR.07 |{nbsp}
|선택 사항인 <<charging_schedule_type,ChargingSchedule>> 필드 <<charging_schedule_type,minChargingRate>>는 충전기에서 EVSE 간 전력 분배를 최적화하는 데 사용할 수 있습니다.
|매개변수는 로컬 컨트롤러에 <<charging_schedule_type,minChargingRate>> 이하의 충전은 비효율적임을 알려 다른 밸런싱 전략을 선택할 수 있는 가능성을 제공합니다.
|K03.FR.08 |{nbsp}
|로컬 컨트롤러는 <<set_charging_profile_request,SetChargingProfileRequest>>에서 <<charging_profile_purpose,chargingProfilePurpose>>를 <<charging_station_external_constraints,ChargingStationExternalConstraints>>로 설정해서는 안 됩니다.
|이 목적은 외부 시스템이 충전 한도/일정을 설정한 경우에만 사용됩니다.
|===

<<<

[[k04_internal_load_balancing]]
=== K04 - 내부 부하 분산

.K04 - 내부 부하 분산
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|번호 |유형 |설명

|1 |이름 |내부 부하 분산
|2 |ID |K04
|{nbsp} d|_기능 블록_ |K. 스마트 충전
|3 |목표 |충전기 내부와 EVSE 간의 내부 부하 분산을 활성화합니다.
|4 |설명 |부하 분산 사용 사례는 충전기 내부에서 내부 부하 분산을 수행하는 것으로, 충전기가 EVSE당 전류/전력을 제어합니다.

충전기는 고정된 한도(예: 그리드 연결의 최대 전류)로 구성됩니다.

<<k01_set_charging_profile,K01 - 충전 프로파일 설정>> 참조
|{nbsp} d|_Actors_ |충전기, CSMS, EVSE
|{nbsp} d|_시나리오 설명_
|**1.** CSMS는 <<charging_profile_type,ChargingProfile>>을 전송하여 알려진 물리적 그리드 연결 한계를 설정합니다. +
**2.** 충전기는 EVSE당 전류/전력을 제어합니다. +
**3.** EVSE는 EV에 제어 파일럿 신호를 보냅니다.
|5 |필수 조건 |기능 블록 _Smart Charging_ 이 설치되었습니다.
|6 |사후 조건
|**성공적인 사후 조건:** +
충전기는 CSMS가 전송하는 내용을 기반으로 다양한 EVSE 간의 전류/전력을 _성공적으로_ 균형 조정합니다. +
**실패 사후 조건:** +
<<charging_profile_type,ChargingProfile>>은 _허용되지 않습니다_. 충전은 가능하지만 충전기는 <<charging_profile_type,ChargingProfile>>을 준수하지 _않습니다_.
|7 |오류 처리 |해당 없음
|8 |비고 |해당 없음
|===

==== K04 - 내부 부하 분산 - 요구 사항

.K04 - 요구 사항
[cols="^.^2,<.^6,<.^6,<.^4",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID |사전 조건 |요구 사항 정의 |참고

|K04.FR.01 |{nbsp}
|충전기는 EVSE당 <<charging_schedule_type,ChargingSchedule>>을 제어해야 합니다. |{nbsp}
|K04.FR.02 |{nbsp}
|충전기는 고정된 한도로 구성되어야 합니다.
|예: 그리드 연결의 최대 전류.
|K04.FR.03 |{nbsp}
|<<charging_station_max_profile,ChargingStationMaxProfile>>의 목적을 가진 <<charging_profile_type,ChargingProfile>>은 ID가 0인 충전기 EVSE에서만 설정할 수 있습니다. |{nbsp}
|K04.FR.04 |{nbsp}
|선택 사항인 <<charging_schedule_type,ChargingSchedule>> 필드 <<charging_schedule_type,minChargingRate>>는 충전기에서 EVSE 간의 전력 분배를 최적화하는 데 사용할 수 있습니다.
|매개변수는 로컬 컨트롤러에 <<charging_schedule_type,minChargingRate>> 이하의 충전은 비효율적임을 알려 다른 밸런싱 전략을 선택할 수 있는 가능성을 제공합니다.
|K04.FR.05 |{nbsp}
|모든 EVSE(및 충전기 하드웨어 자체)의 결합된 에너지 흐름은 _ChargingStationMaxProfile_에서 설정한 제한보다 커서는 안 됩니다. |{nbsp}
|===

<<<

==== K05 - 충전 프로파일이 있는 원격 시작 트랜잭션

.K05 - 충전 프로파일이 있는 원격 시작 트랜잭션
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|번호 |유형 |설명

|1 |이름 |충전 프로파일을 사용한 원격 시작 트랜잭션
|2 |ID |K05
|{nbsp} d|_기능 블록_ |K. 스마트 충전
|3 |목표 |CSMS가 <<charging_profile_type,ChargingProfile>>을 직접 포함하여 트랜잭션을 원격으로 시작할 수 있도록 하여 트랜잭션이 올바른 <<charging_profile_type,ChargingProfile>>을 사용하도록 합니다.
|4 |설명 |이 사용 사례는 CSMS가 <<tx_profile,TxProfile>> 목적으로 트랜잭션을 원격으로 시작하는 방법을 다룹니다. 이렇게 하면 올바른 <<tx_profile,TxProfile>>이 사용됩니다. 또한 충전기가 <<request_start_transaction_request,RequestStartTransactionRequest>>를 수신한 후 _offline_이 되는 경우도 있습니다. +
3단계에서 1단계로의 충전 전환이 항상 가능한 것은 아니며 트랜잭션은 올바른 단계에서 시작해야 하므로 이것도 필요합니다.
|{nbsp} d|_Actors_ |충전기, CSMS, 외부 트리거
|{nbsp} d|_시나리오 설명_
|**1.** CSMS는 충전기에 <<request_start_transaction_request,RequestStartTransactionRequest>>를 <<charging_profile_type,ChargingProfile>> 목적과 함께 <<tx_profile,TxProfile>>로 전송하여 원격으로 트랜잭션을 시작하도록 요청합니다. +
**2.** 충전기는 <<request_start_transaction_response,RequestStartTransactionResponse>>로 응답하여 트랜잭션을 시작할 수 있으며 <<charging_profile_type,ChargingProfile>>을 사용할 것임을 나타냅니다. +
**3.** 충전기는 <<transaction_event_request,TransactionEventRequest>> (<<transaction_event_enum_type,eventType = Started>>) 메시지를 전송하여 CSMS에 트랜잭션이 시작되었음을 알립니다. +
**4.** 트랜잭션은 <<e_transactions,E. Transaction>>에서 설명한 것과 같은 방식으로 시작됩니다. +
**5.** 충전기는 <<transaction_event_request,TransactionEventRequest>>(<<transaction_event_enum_type,eventType = Updated>>)를 보내 CSMS에 충전 중임을 알립니다. +
**6.** 충전기는 설정된 <<charging_profile_type,ChargingProfiles>>에 따라 일반 스마트 충전 세션을 계속합니다.
|5 |필수 조건 |기능 블록 _Smart Charging_ 이 설치되었습니다.
|6 |사후 조건
|**성공한 사후 조건:** +
충전기가 제공된 <<충전_프로파일_유형, 충전_프로파일>>을 고려하여 성공적으로 충전합니다. +
**실패한 사후 조건:** +
트랜잭션이 _시작되지_ 않습니다. +
충전기가 제공된 <<충전_프로파일_유형, 충전_프로파일>>을 고려하여 성공적으로 충전하지 않습니다.
|===

.시퀀스 다이어그램: 충전 프로파일이 있는 원격 시작 트랜잭션
image::part2/images/figure_104.svg[시퀀스 다이어그램: 충전 프로파일이 있는 원격 시작 트랜잭션]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7 |오류 처리 |n/a
|8 |참고 |위의 시나리오 설명과 시퀀스 다이어그램은 시작 트랜잭션에 대한 구성 변수가 다음과 같이 구성된 것을 기반으로 합니다. +
  <<tx_start_point,`TxStartPoint`>>: <<tx_start_stop_point_values,EVConnected, Authorized, DataSigned, PowerPathClosed, EnergyTransfer>> +
  이 사용 사례는 다른 구성에도 유효하지만 트랜잭션이 다른 순간에 시작/중지될 수 있으며, 이는 메시지가 전송되는 순서를 변경할 수 있습니다. 자세한 내용은 사용 사례 <<e01_start_transaction_options,E01 - Start Transaction options>>를 참조하세요.

  목적이 있는 ChargingProfile이 RequestStartTransactionRequest의 일부로 제공되는 경우, 당시에는 알 수 없기 때문에 ChargingProfile에 transactionId를 제공할 수 없습니다.
|===

==== K05 - Remote Start Transaction with Charging Profile

.K05 - 요구 사항
[cols="^.^2,<.^6,<.^6,<.^4",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID |전제 조건 |요구 사항 정의 |참고

|K05.FR.01 |{nbsp}
  |CSMS는 <<request_start_transaction_request,RequestStartTransactionRequest>>에 <<charging_profile_type,ChargingProfile>>을 포함할 수 있습니다. |{nbsp}
|K05.FR.02 |K05.FR.01
  |<<charging_profile_type,ChargingProfile>>의 목적은 항상 <<tx_profile,TxProfile>>이어야 합니다. |{nbsp}
|K05.FR.03 |K05.FR.01 AND +
  NOT K05.FR.04
  |충전기는 제공된 프로파일을 사용하여 복합 일정을 계산해야 합니다. |{nbsp}
|K05.FR.04 |스마트 충전을 지원하지 않는 충전기가 <<charging_profile_type,ChargingProfile>>이 포함된 <<request_start_transaction_request,RequestStartTransactionRequest>>를 수신하는 경우.
  |충전기는 지정된 <<charging_profile_type,ChargingProfile>>을 무시해야 합니다.
    |장치 모델 변수 SmartChargingCtrlr.Enabled는 CSMS에 스마트 충전이 지원되는지 여부를 알려줍니다.
|K05.FR.05 |스마트 충전을 지원하는 충전기가 잘못된 <<charging_profile_type,ChargingProfile>>이 포함된 <<request_start_transaction_request,RequestStartTransactionRequest>>를 수신하는 경우.
  |충전기는 <<request_start_transaction_response,RequestStartTransactionResponse>>로 _status_ = `Rejected` 및 선택적으로 _reasonCode_ = "InvalidProfile" 또는 "InvalidSchedule"로 응답해야 합니다.
    |기기 모델 변수 SmartChargingCtrlr.Enabled는 CSMS에 스마트 충전이 지원되는지 여부를 알려줍니다.
|===

=== K06 - Offline Behavior Smart Charging During Transaction

.K06 - Offline Behavior Smart Charging During Transaction
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|번호 |유형 |설명

|1 |이름 |트랜잭션 중 오프라인 동작 스마트 충전
|2 |ID |K06
|{nbsp} d|_기능 블록_ |K. 스마트 충전
|3 |목표 |충전기가 _offline_ 인 동안 트랜잭션 기간 동안 현재 <<충전_프로파일_유형,충전_프로파일>>을 계속 사용할 수 있도록 합니다.
|4 |설명 |충전기가 목적이 <<tx_profile,TxProfile>>인 트랜잭션별 <<충전_프로파일_유형,충전_프로파일>>을 수신한 후 _offline_ 이 되면 트랜잭션 기간 동안 이 프로파일을 계속 사용합니다.
|{nbsp} d|_Actors_ |충전기, CSMS, EV
|{nbsp} d|_시나리오 설명_
  |**1.** CSMS가 <<tx_profile,TxProfile>>과 함께 <<set_charging_profile_request,SetChargingProfileRequest>>를 충전기로 보냅니다. +
  **2.** 충전기가 <<set_charging_profile_response,SetChargingProfileResponse>>로 응답합니다. +
  **3.** 충전이 진행되는 동안 EVSE는 설치된 <<charging_profile_type,ChargingProfiles>>에 따라 최대 전류 또는 전력을 지속적으로 조정합니다. +
  **4.** 충전기가 _offline_ 상태이고 단독으로 작동합니다. +
  **5.** 충전이 진행되는 동안 EVSE는 이미 설치된 <<charging_profile_type,ChargingProfiles>>에 따라 최대 전류 또는 전력을 지속적으로 조정합니다.
|5 |필수 조건 |트랜잭션이 진행 중입니다. +
  기능 블록 _Smart Charging_ 이 설치되었습니다.
|6 |사후 조건(들)
  |**성공적인 사후 조건:** +
  충전 스테이션은 사용 가능한 충전 프로파일을 계속 사용합니다.

  **실패 사후 조건:**
  해당 없음
|===

.시퀀스 다이어그램: 오프라인 동작 스마트 충전
image::part2/images/figure_105.svg[시퀀스 다이어그램: 오프라인 동작 스마트 충전]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7 |오류 처리 |해당 없음
|8 |비고 |해당 없음
|===

==== K06 - Offline Behavior Smart Charging During Transaction - Requirements

.K06 - 요구 사항
[cols="^.^2,<.^5,<.^6",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID |사전 조건 |요구 사항 정의

|K06.FR.01 |충전기가 목적이 <<tx_profile,TxProfile>>인 트랜잭션별 <<charging_profile_type,ChargingProfile>>을 수신한 후 _offline_ 으로 전환됩니다.
  |충전기는 트랜잭션 기간 동안 이 프로파일을 계속 사용해야 합니다.
|K06.FR.02 |충전기가 충전 프로파일 없이 _offline_ 으로 전환되는 경우.
  |충전기는 제약 조건이 적용되지 않는 것처럼 트랜잭션을 실행해야 합니다.
|===

=== K07 - Offline Behavior Smart Charging at Start of Transaction

.K07 - 트랜잭션 시작 시 오프라인 동작 스마트 충전
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|번호 |유형 |설명

|1 |이름 |오프라인 동작 트랜잭션 시작 시 스마트 충전
|2 |ID |K07
|{nbsp} d|_기능 블록_ |K. 스마트 충전
|3 |목표 |충전기가 _offline_ 으로 시작된 트랜잭션에 대해 <<charging_profile_type,ChargingProfile>>을 계속 사용할 수 있도록 합니다.
|4 |설명 |충전기에 <<tx_default_profile,TxDefaultProfile>>을 설정하면 CSMS는 CSMS와의 통신이 _offline_ 인 동안 시작된 모든 트랜잭션이 이 프로파일을 사용하도록 할 수 있습니다.
|{nbsp} d|_Actors_ |충전기, CSMS, EV, EV 운전자
|{nbsp} d|_시나리오 설명_
  |**1.** CSMS가 <<tx_default_profile,TxDefaultProfile>>과 함께 <<set_charging_profile_request,SetChargingProfileRequest>>를 충전기로 보냅니다. +
  **2.** 충전기가 <<set_charging_profile_response,SetChargingProfileResponse>>로 응답합니다. +
  **3.** 충전기가 _offline_ 이 되고 단독으로 작동합니다. +
  **4.** 충전기는 다음 중 하나를 통해 제공된 모든 IdToken의 자동 인증을 허용합니다. +
  _a._ 로컬 인증 목록. CSMS와 동기화할 수 있는 식별자 목록입니다. +
  _b._ 인증 캐시 항목. CSMS에서 성공적으로 인증한 이전에 제공된 식별자의 기록을 자율적으로 유지합니다. (성공적인 의미: IdToken이 포함된 메시지에 대한 응답 수신). +
  _c._ 구성 변수: <<offline_tx_for_unknown_id_enabled,OfflineTxForUnknownIdEnabled>> = TRUE +
  **5.** 트랜잭션은 <<e_transactions,E. Transactions>>에서 설명한 것과 같은 방식으로 시작됩니다. +
  **6.** 충전이 진행되는 동안 EVSE는 이미 설치된 <<charging_profile_type,ChargingProfiles>>에 따라 최대 전류 또는 전력을 지속적으로 조정합니다.
|5 |필수 조건 | 충전기가 _offline_ 입니다. +
  기능 블록 _Smart Charging_ 이 설치되었습니다. +
  로컬 인증 부여 목록에서 IdToken이 알려져 있거나, 인증 부여 캐시에서 IdToken이 알려져 있거나, 알 수 없는 오프라인 인증이 활성화되었습니다.
|6 |사후 조건
  |**성공한 사후 조건:** +
  충전기는 _offline_ 시작된 트랜잭션에 사용할 수 있는 설치된 <<tx_default_profile,TxDefaultProfile>>을 사용합니다.

  **실패 사후 조건:** +
  해당 없음
|===

.시퀀스 다이어그램: 오프라인 동작 스마트 충전
image::part2/images/figure_106.svg[시퀀스 다이어그램: 오프라인 동작 스마트 충전]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7 |오류 처리 |해당 없음
|8 |참고 |다른 충전 프로파일 용도를 결합하는 방법에 대한 설명은 섹션 <<combining_charging_profile_purposes,Combining Charging Profile Purposes>>를 참조하세요.
|===

==== K07 - Offline Behavior Smart Charging at Start of Transaction - Requirement

.K07 - 요구 사항
[cols="^.^2,<.^6,<.^6,<.^4",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID |전제 조건 |요구 사항 정의 |참고

|K07.FR.01 |트랜잭션이 시작되기 전이나 목적이 <<tx_profile,TxProfile>>인 트랜잭션별 <<charging_profile_type,ChargingProfile>>을 수신하기 전에 충전기가 _offline_ 이 되는 경우.
  |충전기는 사용 가능한 충전 프로파일을 사용해야 합니다.
    |<<tx_default_profile,TxDefaultProfile>>은 현재 트랜잭션 기간 동안만 적용되어야 합니다.
|===

=== K08 - Get Composite Schedule

.K08 - 복합 일정 가져오기
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|번호 |유형 |설명

|1 |이름 |복합 일정 가져오기
|2 |ID |K08
|{nbsp} d|_기능 블록_ |K. 스마트 충전
|3 |목표 |충전기에 복합 충전 일정을 보고하도록 요청합니다.
|4 |설명 |이 사용 사례는 CSMS가 충전기에 <<get_composite_schedule_request,GetCompositeScheduleRequest>>를 보내 충전기에서 계산한 복합 충전 일정을 보고하도록 요청하는 방법을 설명합니다.

  <<composite_schedule_type,CompositeSchedule>>은 충전기에 있는 모든 활성 일정과 가능한 지역 제한을 계산한 결과입니다.
|{nbsp} d|_Actors_ |충전기, CSMS
|{nbsp} d|_시나리오 설명_
  |**1.** CSMS는 <<get_composite_schedule_request,GetCompositeScheduleRequest>>를 보내 충전기에 복합 충전 일정을 보고하도록 요청합니다. +
  **2.** 충전기는 일정을 계산합니다. +
  **3.** 충전기는 <<get_compositie_schedule_response,GetCompositeScheduleResponse>>로 상태와 <<charging_schedule_type,ChargingSchedule>>을 응답합니다.
|5 |필수 조건 |기능 블록 _Smart Charging_ 이 설치되었습니다.
|6 |사후 조건(들)
  |**성공한 사후 조건:** +
  CSMS가 충전기에서 복합 일정을 _성공적으로_ 수신했습니다.

  **실패한 사후 조건:** +
  CSMS가 충전기에서 복합 일정을 _수신하지 못했습니다_.
|===

.Sequence Diagram: Get Composite Schedule
image::part2/images/figure_107.svg[Sequence Diagram: Get Composite Schedule]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7 |오류 처리 |해당 없음
|8 |참고 |충전기에서 보낸 충전 일정은 해당 시점에만 표시된다는 점에 유의하세요. 이 일정은 외부 원인(예: 그리드 연결 용량을 기반으로 하는 로컬 밸런싱이 활성화되고 하나의 EVSE를 사용할 수 있게 됨)으로 인해 시간이 지남에 따라 변경될 수 있습니다.

  충전 수준을 안내하는 복합 일정은 다양한 <<charging_profile_purpose,chargingProfilePurposes>>의 기존 충전 프로파일을 조합한 것입니다.

  이 복합 일정은 각 시간 간격의 최소값을 취하여 계산합니다(참조: <<smart_charging_signals_to_a_charging_station_from_multiple_actors,Smart Charging signals to a Charging Station from multiple actors>>). 시간 간격은 고정된 길이일 필요가 없으며 모든 충전 프로파일 목적에 대해 동일할 필요도 없습니다. 즉, 결과 복합 일정에는 길이가 다른 간격이 포함될 수 있습니다.

  <<get_compositie_schedule_response,GetCompositeScheduleResponse>>에서 보고된 일정은 충전기에 있는 모든 활성 일정과 가능한 지역 제한을 계산한 결과입니다. +
  복합 일정은 요청된 EVSE에 대해 요청된 기간 동안 충전기가 그리드에서 소비할 것으로 예상하는 예상 전력 또는 전류를 보고합니다. +
  evseid=0으로 요청하면 충전기는 그리드 연결에 대한 총 예상 소비량을 계산합니다.
|===

==== K08 - Get Composite Schedule - Requirements

.K08 - 요구 사항
[cols="^.^2,<.^5,<.^6",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID |전제 조건 |요구 사항 정의

|K08.FR.01 |{nbsp}
  |CSMS는 <<get_composite_schedule_request,GetCompositeScheduleRequest>>를 보내 충전기에 <<composite_schedule_type,CompositeSchedule>>을 보고하도록 요청할 수 있습니다.
|K08.FR.02 |<<get_composite_schedule_request,GetCompositeScheduleRequest>>를 수신하면.
  |충전기는 메시지 수신 순간부터 기간(초)까지 예약된 시간 간격을 계산하여 CSMS에 보내야 합니다.
|K08.FR.03 |<<get_composite_schedule_request,GetCompositeScheduleRequest>>의 evseId가 '0'으로 설정된 경우
  |충전기는 요청된 기간 동안 그리드에서 소비할 것으로 예상되는 총 예상 전력 또는 전류를 보고해야 합니다.
|K08.FR.04 |{nbsp}
  |어느 시점에서든 충전 프로파일 <<charging_station_max_profile,ChargingStationMaxProfile>>, <<charging_station_external_constraints,ChargingStationExternalConstraints>> 및 <<tx_default_profile,TxDefaultProfile>>(또는 <<tx_profile,TxProfile>>)의 일정을 병합한 결과인 <<composite_schedule_type,CompositeSchedule>>의 사용 가능한 전력 또는 전류는 병합된 일정에서 사용 가능한 전력 또는 전류의 가장 낮은 값보다 작거나 같아야 합니다.
|K08.FR.05 |충전기가 요청된 일정을 보고할 수 없는 경우(예: _evseId_ 가 알려지지 않은 경우)
  |충전기는 `Rejected` 상태로 응답해야 합니다.
|K08.FR.06 |K08.FR.02 AND +
  EVSE에서 ​​활성화된 트랜잭션이 없는 경우
    |충전기는 TxDefaultProfile을 사용하는 EVSE에서 ​​진행 중인 트랜잭션이 있는 것처럼 <<composite_schedule_type,CompositeSchedule>>을 계산해야 합니다(이 프로파일 목적이 설정된 경우)
|K08.FR.07 |구성 변수 `ChargingScheduleChargingRateUnit` 에 구성되지 않은 <<charging_rate_unit_enum_type,chargingRateUnit>>이 포함된 <<get_composite_schedule_request,GetCompositeScheduleRequest>>를 수신하는 경우
  |충전기는 `Rejected` 상태의 <<get_compositie_schedule_response,GetCompositeScheduleResponse>>로 응답해야 합니다.
|===

=== K09 - Get Charging Profiles

.K09 - Get Charging Profiles
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|번호 |유형 |설명

|1 |이름 |충전 프로파일 가져오기
|2 |ID |K09
|{nbsp} d|_기능 블록_ |K. 스마트 충전
|3 |목표 |CSMS가 충전기에 설치된 충전 일정/제한을 볼 수 있도록 하려면 CSMS 또는 다른 소스에서 이를 설치할 수 있습니다.
|4 |설명 |CSMS는 <<get_charging_profile_request,GetChargingProfilesRequest>> 메시지를 사용하여 충전기에 다른 가능한 소스에서 설치된 모든 충전 프로파일 또는 모든 설치된 충전 프로파일의 하위 집합을 보고하도록 요청할 수 있습니다. 이는 일부 자동 스마트 충전 제어 시스템에 사용하거나 CSO에서 디버그 목적으로 사용할 수 있습니다.
|{nbsp} d|_Actors_ |충전기, CSMS
|{nbsp} d|_시나리오 설명_
  |**1.** CSMS는 <<get_charging_profile_request,GetChargingProfilesRequest>> 메시지를 보내 설치된 충전 프로파일을 충전기에 요청합니다. +
  **2.** 충전기는 <<get_charging_profiles_response,GetChargingProfilesResponse>> 메시지를 보내 충전 일정을 보고할 수 있는지 여부를 나타내며 응답합니다. +
  **3.** 충전기는 여러 개의 <<report_charging_profiles_request,ReportChargingProfilesRequest>> 메시지를 CSMS에 보냅니다. +
  **4.** CSMS는 모든 <<report_charging_profiles_request,ReportChargingProfilesRequest>>에 대해 충전기에 <<report_charging_profiles_response,ReportChargingProfilesResponse>>를 보내 보고서 수신을 확인합니다. +
|5 |필수 조건 |해당 없음
|6 |사후 조건 |CSMS는 요청된 매개변수와 일치하는 충전기에 설치된 충전 프로파일을 알고 있습니다.
|===

.사용 사례 "충전 프로파일 가져오기"의 시퀀스 다이어그램
image::part2/images/figure_108.svg[사용 사례 "충전 프로파일 가져오기"의 시퀀스 다이어그램]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7 |오류 처리 |충전기에 <<get_charging_profile_request,GetChargingProfilesRequest>>의 매개변수와 일치하는 충전 프로파일이 없는 경우 충전기는 NoProfiles로 응답해야 합니다.
|8 |설명 |충전 프로파일 보고서는 여러 ReportChargingProfilesRequest 메시지로 분할될 수 있습니다. 이는 다양한 충전 소스에 대한 충전 프로파일을 보고해야 하거나 하나의 메시지에 대한 데이터가 너무 많기 때문일 수 있습니다. 더 많은 보고서가 뒤따를 것임을 나타내려면 *tbc* 플래그를 사용할 수 있습니다.

|===

==== K09 - Get Charging Profiles - Requirements

.K09 - 요구 사항
[cols="^.^2,<.^6,<.^6,<.^4",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID |전제 조건 |요구 사항 정의 |참고

|K09.FR.01 |<<get_charging_profile_request,GetChargingProfilesRequest>>에서 requestId가 설정된 경우
  |충전기는 이 <<get_charging_profile_request,GetChargingProfilesRequest>>의 결과로 전송된 모든 <<report_charging_profiles_request,ReportChargingProfilesRequest>>에서 requestId를 설정해야 합니다. |{nbsp}
|K09.FR.02 |충전 프로파일이 두 개 이상의 <<report_charging_profiles_request,ReportChargingProfilesRequest>>에서 보고되는 경우
  |충전기는 마지막 메시지를 제외한 모든 <<report_charging_profiles_request,ReportChargingProfilesRequest>> 메시지에 대해 _tbc_ 플래그를 *true* 로 설정해야 합니다. |{nbsp}
|K09.FR.03 |{nbsp}
  |CSMS는 <<get_charging_profile_request,GetChargingProfilesRequest>>에서 _chargingProfile_ 기준을 지정해야 합니다. +
  - _chargingProfileId(s)_ 의 (목록) 또는 +
  - _stackLevel_, +
  _chargingLimitSource_, _chargingProfilePurpose_ 필드 중 하나 이상.
    |이러한 필드는 동등한 중요성을 가진 필터 값이지만 _chargingProfileId_ 는 충전 프로파일을 고유하게 식별하기 때문에 _chargingProfileIds_ 를 사용하는 경우 다른 필드는 필요하지 않습니다.
|K09.FR.04 |<<get_charging_profile_request,GetChargingProfilesRequest>>에서 _evseId_ 가 0보다 큰 값으로 설정된 경우
  |충전기는 _chargingProfile_ 의 모든 필드와 일치하는 지정된 EVSE에 대한 설치된 충전 프로파일을 보고해야 합니다. |{nbsp}
|K09.FR.05 |<<get_charging_profile_request,GetChargingProfilesRequest>>에서 _evseId_ 가 0으로 설정된 경우
  |충전기는 _chargingProfile_ 의 모든 필드와 일치하는 충전기 자체(그리드 연결)에 설치된 충전 프로파일만 보고해야 합니다.
    |EVSE #0에는 `ChargingStationMaxProfile`, `ChargingStationExternalConstraints` 또는 `TxDefaultProfile` 이 있을 수 있습니다. +
    `TxDefaultProfile` 은 EVSE #0에 적용되지 않고 모든 개별 EVSE에 적용됩니다(K01.FR.14 참조).
|K09.FR.06 | <<get_charging_profile_request,GetChargingProfilesRequest>>에 _evseId_ 가 설정되지 않은 경우
  |충전기는 _chargingProfile_ 의 모든 필드와 일치하는 모든 설치된 충전 프로파일을 보고해야 합니다. |{nbsp}
|===

=== K10 - Clear Charging Profile

.K10 - Clear Charging Profile
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|번호 |유형 |설명

|1 |이름 |충전 프로파일 지우기
|2 |ID |K10
|{nbsp} d|_기능 블록_ |K. 스마트 충전
|3 |목표 |충전 프로파일 중 일부 또는 전부를 지웁니다.
|4 |설명 |CSMS가 이전에 충전기로 전송된 충전 프로파일 중 일부 또는 전부를 지우고자 하는 경우 CSMS는 <<clear_charging_profile_request,ClearChargingProfileRequest>>를 충전기로 전송합니다.
|{nbsp} d|_Actors_ |충전기, CSMS
|{nbsp} d|_시나리오 설명_
  |**1.** CSMS가 <<clear_charging_profile_request,ClearChargingProfileRequest>>를 충전기로 전송합니다. +
  **2.** 충전기는 <<clear_charging_profile_response,ClearChargingProfileResponse>>로 응답하여 해당 상태에서 요청을 처리할 수 있었는지 여부를 지정합니다.
|5 |필수 조건 |하나 이상의 ChargingProfile이 설치되었습니다.
|6 |사후 조건
  |**성공적인 사후 조건:** +
  요청된 충전 프로파일이 _성공적으로_ 지워졌습니다.

  **실패 사후 조건:** +
  <<charging_profile_type,ChargingProfile>>이 없으므로 요청된 충전 프로파일이 지워지지 _않습니다_.
|===

.사용 사례 "충전 프로파일 지우기"의 시퀀스 다이어그램
image::part2/images/figure_109.svg[사용 사례 "충전 프로파일 지우기"의 시퀀스 다이어그램]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7 |오류 처리 |n/a
|8 |비고 |n/a
|===

==== K10 - Clear Charging Profile - Requirements

.K10 - 요구 사항
[cols="^.^2,<.^6,<.^6,<.^4",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID |전제 조건 |요구 사항 정의 |참고

|K10.FR.01 |충전기에 일치하는 <<charging_profile_type,ChargingProfile>>이 없는 경우.
  |<<clear_charging_profile_request,ClearChargingProfileRequest>>를 수신하면 충전기는 _Unknown_ 상태로 응답해야 합니다. |{nbsp}
|K10.FR.02 |{nbsp}
  |CSMS는 chargingProfile.id를 지정하거나 <<clear_charging_profile_request,ClearChargingProfileRequest>>에 하나 이상의 필드 stackLevel, evseId 및 chargingProfilePurpose를 포함하여 지워야 할 충전 프로파일을 지정해야 합니다. |{nbsp}
  |K10.FR.03 |지정된 _chargingProfileId_ 가 있는 <<clear_charging_profile_request,ClearChargingProfileRequest>>를 수신하고 참조된 <<charging_profile_type,ChargingProfile>>의 <<charging_profile_purpose_enum_type,chargingProfilePurpose>>가 `ChargingStationExternalConstraints` 가 아닌 경우
    |충전기는 일치하는 ID로 충전 프로파일을 지우고 _status_ = `Accepted` 인 <<clear_charging_profile_response,ClearChargingProfileResponse>> 메시지로 응답해야 합니다. |{nbsp}
|K10.FR.04 |K10.FR.03 AND가 아님 +
  K10.FR.08 AND가 아님 +
  <<clear_charging_profile_request,ClearChargingProfileRequest>>를 수신하면 _evseId_, _chargingProfilePurpose_, _stackLevel_ 에 대한 선택적 값이 있습니다.
  |충전기는 요청의 값과 일치하는(논리적 AND로) <<charging_profile_type,ChargingProfile(s)>>를 지워야 합니다. 단, <<charging_profile_type,ChargingProfile>> = `ChargingStationExternalConstraints` 인 경우는 예외입니다. 그리고 _status_ = `Accepted` 인 <<clear_charging_profile_response,ClearChargingProfileResponse>> 메시지로 응답해야 합니다. |{nbsp}
|K10.FR.05 |하나 이상의 충전 프로파일을 지운 후.
  |충전기는 복합 일정을 다시 계산하고 그 결과 최대 전력/전류 값을 모든 진행 중인 트랜잭션에 설정해야 합니다. |{nbsp}
|K10.FR.06 |{nbsp}
  |CSMS는 <<clear_charging_profile_request,ClearChargingProfileRequest>>에서 <<charging_profile_purpose_enum_type,chargingProfilePurpose>>를 <<charging_station_external_constraints,ChargingStationExternalConstraints>>로 설정해서는 안 됩니다. |{nbsp}
|K10.FR.07 |K10.FR.05 +
  그리고 삭제된 프로파일은 <<charging_profile_purpose_enum_type,chargingProfilePurpose>> = <<tx_default_profile,TxDefaultProfile>>
    |충전기는 <<tx_default_profile,TxDefaultProfile>>로 시작된 모든 활성 트랜잭션을 <<tx_default_profile,TxDefaultProfile>> 없이 시작된 것처럼 계속해야 합니다. |{nbsp}
|K10.FR.08 | <<clear_charging_profile_request,ClearChargingProfileRequest>>를 수신하면 _evseId_, _chargingProfilePurpose_, _stackLevel_ AND +
  에 대한 선택적 값이 있는 경우 일치하는 <<charging_profile_type,ChargingProfile(s)>>는 모두 <<charging_profile_type,ChargingProfile>> = `ChargingStationExternalConstraints`
    |충전기는 _status_ = `Unknown` 인 <<clear_charging_profile_response,ClearChargingProfileResponse>> 메시지로 응답해야 합니다.
      |외부 제약에 대한 충전 프로파일은 ClearChargingProfile 메시지에서 무시됩니다.
|K10.FR.09 |지정된 _chargingProfileId_와 +
  참조된 <<charging_profile_type,ChargingProfile>> = `ChargingStationExternalConstraints` 의 <<charging_profile_purpose_enum_type,chargingProfilePurpose>>를 수신하면
    |충전기는 _status_ = `Unknown` 인 <<clear_charging_profile_response,ClearChargingProfileResponse>> 메시지로 응답해야 합니다.
      |외부 제약에 대한 충전 프로파일은 ClearChargingProfile 메시지에서 무시됩니다.
|===

<<<

:sectnums:
=== External Charging Limit based Smart Charging

:sectnums!:
[[k11_set_update_external_charging_limit_with_ongoing_transaction]]
=== K11 - Set / Update External Charging Limit With Ongoing Transaction

.K11 - 진행 중인 트랜잭션로 외부 충전 한도 설정/업데이트
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|번호 |유형 |설명

|1 |이름 |진행 중인 트랜잭션로 외부 충전 한도 설정/업데이트
|2 |ID |K11
|{nbsp} d|_기능 블록_ |K. 스마트 충전
|3 |목표 |진행 중인 트랜잭션이 있는 충전기에서 외부 제어 시스템이 부과하는 충전 일정 또는 충전 한도를 CSMS에 알리는 것.
|4 |설명 |외부 제어 시스템이 충전기에 충전 한도/일정을 보냅니다. 이 한도는 CSMS로 전송됩니다.
|{nbsp} d|_Actors_ |외부 제어 시스템, 충전기, CSMS
|{nbsp} d|_시나리오 설명_
  |**1.** 외부 제어 시스템이 충전기에 충전 한도/일정을 보냅니다. +
  **2.** 선택 사항: 충전기가 새로운 충전 일정을 계산합니다. +
  **3.** 충전기가 진행 중인 트랜잭션의 충전 속도를 조정합니다. +
  **4.** 충전 한도가 <<limit_change_significance,`LimitChangeSignificance`>> 이상 변경된 경우 충전기는 <<notify_charging_limit_request,NotifyChargingLimitRequest>> 메시지를 CSMS로 전송하며, 선택적으로 설정된 충전 한도/일정을 함께 보냅니다. +
  **5.** CSMS는 충전기에 <<notify_charging_limit_response,NotifyChargingLimitResponse>>로 응답합니다. +
  **6.** 충전 요금이 <<limit_change_significance,`LimitChangeSignificance`>> 이상 변경되면 충전기는 <<transaction_event_request,TransactionEventRequest>> 메시지를 보내 CSMS에 알립니다. +
  **7.** CSMS는 충전기에 <<transaction_event_response,TransactionEventResponse>>로 응답합니다.
|5 |필수 조건 |충전기가 오류 상태가 아닙니다. +
  외부 시스템은 OCPP가 아닌 다른 연결을 통해 충전기에서 충전 한도/일정을 설정/지울 수 있습니다.
|6 |사후 조건 |진행 중인 트랜잭션은 외부 시스템에서 수신한 충전 한도에 따라 제한됩니다. +
  CSMS는 외부 시스템에서 부과한 새로운 한도/일정을 통보받습니다.
|===

.Sequence diagram of the use case "Setting / Updating External Charging Limit with Ongoing Transaction"
image::part2/images/figure_110.svg[Sequence diagram of the use case "Setting / Updating External Charging Limit with Ongoing Transaction"]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7 |오류 처리 |해당 없음
|8 |설명 |예를 들어 외부 시스템은 IEC 61850 [IEC61850-7-420] 또는 OpenADR <<open_adr,[OPENADR]>>을 사용하여 그리드 한계를 충전기에 전달할 수 있지만 이는 모든 프로토콜일 수 있습니다. 또한 외부 시스템의 예가 나와 있는데, 이 경우 그리드 문제가 발생할 경우 외부 충전 한계를 설정할 수 있는 DSO이지만 이는 다른 외부 시스템 또는 충전 한계를 설정하는 이유일 수 있습니다.
|===

==== K11 - Set / Update External Charging Limit With Ongoing Transaction - Requirements

.K11 - 요구 사항
[cols="^.^2,<.^6,<.^6,<.^4",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID |전제 조건 |요구 사항 정의 |참고

|K11.FR.01 |진행 중인 트랜잭션 중에 외부 충전 한도/일정을 수신하는 경우
  |충전기는 이 주어진 한도/일정보다 더 빠르게 진행 중인 트랜잭션을 충전해서는 안 됩니다. |{nbsp}
|K11.FR.02 |K11.FR.01 +
  AND +
  충전 한도가 <<limit_change_significance,`LimitChangeSignificance`>> 이상 변경됨
    |충전기는 <<notify_charging_limit_request,NotifyChargingLimitRequest>>를 보내 외부 시스템에서 부과한 새로운 충전 한도/일정을 CSMS에 알려야 합니다. |{nbsp}
|K11.FR.03 |K11.FR.02 +
  AND +
  <<notify_charging_limit_with_schedule,EnableNotifyChargingLimitWithSchedules>>가 참입니다.
    ||<<notify_charging_limit_request,NotifyChargingLimitRequest>>에는 외부 시스템에서 설정한 충전 한도/일정이 포함되어야 합니다. |{nbsp}
|K11.FR.04 |K11.FR.01 +
  AND +
  충전 요금이 <<limit_change_significance,`LimitChangeSignificance`>> 이상 변경됨
    |충전기는 <<transaction_event_request,TransactionEventRequest>> 메시지를 CSMS로 보내야 합니다. 이때 <<transaction_event_request,trigger>> = <<trigger_reason_enum_type,ChargingRateChanged>>가 있어야 합니다. |{nbsp}
|K11.FR.05 |K11.FR.02
  |충전기는 <<notify_charging_limit_request,NotifyChargingLimitRequest>>에서 <<charging_limit_source_enum_type,chargingLimitSource>>를 CSO로 설정해서는 안 됩니다. |{nbsp}
|K11.FR.06 |외부 충전 한도/일정을 수신하는 경우
  |충전기는 이 한도에 대해 보고할 때 목적 <<charging_station_external_constraints,ChargingStationExternalConstraints>>를 사용해야 합니다(예: <<report_charging_profiles_request,ReportChargingProfilesRequest>>).
    |CSMS가 (향후) 충전 프로파일에 사용할 수 있는 _id_ 와 충돌할 위험을 최소화하기 위해 `ChargingStationExternalConstraints` 프로파일의 _id_ 에 대해 음수 값을 사용하는 것이 좋습니다.
|===

=== K12 - Set / Update External Charging Limit Without Ongoing Transaction

.K12 - 지속적인 트랜잭션 없이 외부 충전 한도 설정/업데이트
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|번호 |유형 |설명

|1 |이름 |지속적인 트랜잭션 없이 외부 충전 한도 설정/업데이트
|2 |ID |K12
|{nbso} d|_기능 블록_ |K. 스마트 충전
|3 |목표 |새로운 트랜잭션이 그리드 연결에 대해 충전기에서 외부 시스템이 부과한 충전 일정이나 충전 한도를 CSMS에 알리는 것.
|4 |설명 |외부 제어 시스템이 충전기에 충전 한도를 전송합니다. 이 한도는 CSMS로 전송됩니다.
|{nbsp} d|_Actors_ |외부 제어 시스템, 충전기, CSMS
|{nbsp} d|_시나리오 설명_
  |**1.** 외부 제어 시스템이 충전기에 충전 한도를 전송합니다(트랜잭션 중이 아님). +
  **2.** 선택 사항: 충전기가 새로운 충전 일정을 계산합니다. +
  **3.** 충전기가 충전 속도를 조정합니다. +
  **4.** 충전 한도가 <<limit_change_significance,`LimitChangeSignificance`>> 이상 변경된 경우 충전기는 <<notify_charging_limit_request,NotifyChargingLimitRequest>> 메시지를 CSMS에 전송하고 선택적으로 설정된 충전 한도/일정을 전송합니다. +
  **5.** CSMS가 충전기에 <<notify_charging_limit_response,NotifyChargingLimitResponse>>로 응답합니다.
|5 |필수 조건 |충전기가 오류 상태가 아닙니다. +
  OCPP가 아닌 다른 연결을 통해 충전기에서 충전 한도/일정을 설정/지울 수 있는 외부 시스템.
|6 |사후 조건(들) |새로운 트랜잭션은 외부 시스템에서 수신한 충전 한도에 따라 제한됩니다. +
  CSMS는 외부 시스템에서 부과한 새로운 한도/일정을 통보받습니다.
|===

.Sequence diagram of the use case "Set / Update External Charging Limit Without Ongoing Transaction"
image::part2/images/figure_111.svg[Sequence diagram of the use case "Set / Update External Charging Limit Without Ongoing Transaction"]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7 |오류 처리 |해당 없음
|8 |설명 |예를 들어 외부 시스템은 IEC 61850 <<iec61850_7_420,[IEC61850-7-420]>> 또는 OpenADR <<open_adr,[OPENADR]>>을 사용하여 그리드 한계를 충전기에 전달할 수 있지만 이는 모든 프로토콜일 수 있습니다. 또한 외부 시스템의 예가 나와 있는데, 이 경우 그리드 문제가 발생할 경우 외부 충전 한계를 설정할 수 있는 DSO이지만 이는 다른 외부 시스템 또는 충전 한계를 설정하는 이유가 될 수 있습니다.
|===

==== K12 - Set / Update External Charging Limit Without Ongoing Transaction - Requirements

.K12 - 요구 사항
[cols="^.^2,<.^6,<.^6,<.^4",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID |전제 조건 |요구 사항 정의 |참고

|K12.FR.01 |트랜잭션이 진행 중이 아닌 상태에서 외부 충전 한도/일정을 수신한 경우
  |모든 EVSE의 총 부하는 이 주어진 한도를 초과해서는 안 됩니다. |{nbsp}
|K12.FR.02 |K12.FR.01 +
  AND +
  충전 한도가 <<limit_change_significance,`LimitChangeSignificance`>> 이상 변경됨
    |충전기는 <<notify_charging_limit_request,NotifyChargingLimitRequest>>를 보내 외부 시스템에서 부과한 새로운 충전 한도/일정을 CSMS에 알려야 합니다. |{nbsp}
|K12.FR.03 |K12.FR.02 +
  AND +
  <<notify_charging_limit_with_schedule,`EnableNotifyChargingLimitWithSchedules`>>가 참입니다.
    |<<notify_charging_limit_request,NotifyChargingLimitRequest>>에는 외부 시스템에서 설정한 충전 한도/일정이 포함되어야 합니다. |{nbsp}
|K12.FR.04 |K12.FR.02
  |충전기는 <<notify_charging_limit_request,NotifyChargingLimitRequest>>에서 <<charging_limit_source_enum_type,chargingLimitSource>>를 CSO로 설정해서는 안 됩니다. |{nbsp}
|K12.FR.05 |외부 충전 한도/일정을 수신한 경우
  |충전기는 이 한도에 대해 보고할 때(예: <<report_charging_profiles_request,ReportChargingProfilesRequest>>에서) 목적 <<charging_station_external_constraints,ChargingStationExternalConstraints>>를 사용해야 합니다.
    |CSMS가 (향후) 충전 프로파일에 사용할 수 있는 _id_ 와 충돌할 위험을 최소화하기 위해 `ChargingStationExternalConstraints` 프로파일의 _id_ 에 음수 값을 사용하는 것이 좋습니다.
|===

=== K13 - Reset / Release External Charging Limit

.K13 - 외부 충전 한도 재설정/해제
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|번호 |유형 |설명

|1 |이름 |외부 충전 한도 재설정/해제
|2 |ID |K13
|{nbsp} d|_기능 블록_ |K. 스마트 충전
|3 |목표 |이전에 부과된 충전 한도를 해제합니다.
|4 |설명 |외부 제어 시스템은 이전에 부과된 충전 한도를 해제하라는 신호를 충전기로 보냅니다. 충전기는 CSMS에 이를 알립니다.
|{nbsp} d|_Actors_ |외부 제어 시스템, 충전기, CSMS
|{nbsp} d|_시나리오 설명_
  |**1.** 외부 제어 시스템이 충전기에서 충전 한도/일정을 해제/제거합니다. +
  **2.** 트랜잭션이 진행 중일 때 충전기는 새로운 충전 일정을 계산하고 충전 속도를 조정합니다. +
  **3.** 충전기는 <<cleared_charging_limit_request,ClearedChargingLimitRequest>>를 보내 CSMS에 알립니다. +
  **4.** CSMS는 <<cleared_charging_limit_response,ClearedChargingLimitResponse>>로 충전기에 확인합니다. +
  **5.** 변경 사항이 진행 중인 청구 트랜잭션에 영향을 미치고 다음보다 큰 경우: +
  <<limit_change_significance,`LimitChangeSignificance`>>, 충전기는 <<transaction_event_request,TransactionEventRequest>>를 보내 CSMS에 알립니다. +
  **6.** CSMS는 <<transaction_event_response,TransactionEventResponse>>로 충전기에 확인합니다.
|5 |필수 조건 |이전에 고려 중인 충전기에 충전 한도가 전송되었습니다. +
  OCPP가 아닌 다른 연결을 통해 충전기에서 충전 한도/일정을 설정/지울 수 있는 외부 시스템.
|6 |사후 조건 |이전에 수신된 충전 한도가 더 이상 충전을 제한하지 않습니다.
|===

."외부 충전 한도 리셋 / 릴리즈" 유즈케이스 시퀀스 다이어그램
image::part2/images/figure_112.svg["외부 충전 한도 리셋 / 릴리즈" 유즈케이스 시퀀스 다이어그램]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7 |오류 처리 |해당 없음
|8 |설명
  |외부 시스템은 예를 들어 IEC 61850 <<iec61850_7_420,[IEC61850-7-420]>> 또는 OpenADR <<open_adr,[OPENADR]>>을 사용하여 그리드 제한을 해제할 수 있지만 이는 모든 프로토콜일 수 있습니다. 또한 외부 시스템의 예가 나와 있는데, 이 경우 그리드 문제가 발생할 경우 외부 요금 한도를 설정할 수 있는 DSO이지만 이는 다른 외부 시스템 또는 요금 한도를 설정하는 이유일 수 있습니다.
|===

==== K13 - Reset / Release External Charging Limit - Requirements

.K13 - 요구 사항
[cols="^.^2,<.^5,<.^6",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID |전제 조건 |요구 사항 정의

|K13.FR.01 |트랜잭션이 진행 중 +
  AND +
  외부 충전 한도가 해제/제거됨
    |충전기는 이전에 수신한 한도에 따라 더 이상 충전을 제한해서는 안 됩니다.
|K13.FR.02 |K13.FR.01
  |충전기는 <<cleared_charging_limit_request,ClearedChargingLimitRequest>> 메시지를 보내 CSMS에 알려야 합니다.
|K13.FR.03 |K13.FR.01 +
  AND +
  충전 속도가 <<limit_change_significance,`LimitChangeSignificance`>> 이상 변경됨
    |충전기는 <<transaction_event_request,TransactionEventRequest>> 메시지를 <<transaction_event_request,trigger>> = <<trigger_reason_enum_type,ChargingRateChanged>>로 CSMS에 보내야 합니다.
|===

=== K14 - External Charging Limit with Local Controller

.K14 - 로컬 컨트롤러를 사용한 외부 충전 한도
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|번호 |유형 |설명

|1 |이름 |로컬 컨트롤러로 외부 충전 한도 처리
|2 |ID |K14
|{nbsp} d|_기능 블록_ |K. 스마트 충전
|3 |목표 |외부 제어 시스템 요구 사항에 따라 충전 한도를 조정합니다.
|4 |설명 |외부 제어 시스템이 로컬 컨트롤러에 충전 한도를 보냅니다. 로컬 컨트롤러는 CSMS에 알리고, 새로운 충전 일정을 계산하고, 충전 프로파일이 변경된 모든 충전기에 <<set_charging_profile_request,SetChargingProfileRequest>> 메시지를 보냅니다.
|{nbsp} d|_Actors_ |외부 제어 시스템, 로컬 컨트롤러, 충전기, CSMS
|{nbsp} d|_시나리오 설명_
  |**1.** 외부 제어 시스템이 로컬 컨트롤러에 충전 한도/일정을 보냅니다. +
  **2.** 로컬 컨트롤러가 <<notify_charging_limit_request,NotifyChargingLimitRequest>> 메시지를 CSMS로 전송합니다. +
  **3.** 로컬 컨트롤러가 연결된 모든 충전기에 대한 새로운 충전 프로파일을 계산합니다. +
  **4.** 로컬 컨트롤러가 충전 프로파일이 변경된 모든 충전기에 <<set_charging_profile_request,SetChargingProfileRequest>> 메시지를 전송합니다. +
  **5.** 외부 제어 시스템이 충전 한도/일정을 로컬 컨트롤러로 전송합니다. +
  **6.** 로컬 컨트롤러가 <<cleared_charging_limit_request,ClearedChargingLimitRequest>> 메시지를 CSMS로 전송합니다. +
  **7.** 로컬 컨트롤러가 연결된 모든 충전기에 대한 새로운 충전 프로파일을 계산합니다. +
  **8.** 로컬 컨트롤러가 영향을 받는 모든 충전기에 <<clear_charging_profile_request,ClearChargingProfileRequest>> 메시지를 전송합니다.
|5 |필수 조건 |진행 중인 트랜잭션. +
  OCPP가 아닌 다른 연결을 통해 로컬 컨트롤러에서 충전 한도/일정을 설정/지울 수 있는 외부 시스템.
|6 |사후 조건(들)
  |**성공한 사후 조건:** +
  진행 중인 트랜잭션은 외부 시스템에서 수신한 충전 한도에 의해 제한됩니다. +
  CSMS는 외부 시스템에서 부과한 새로운 한도/일정에 대해 알림을 받습니다.

  **실패한 사후 조건:** +
  CSMS는 변경된 충전 한도에 대해 알림을 받지 못합니다. +
  외부 제어 시스템은 충전 한도를 변경할 수 없습니다.
|===

.시퀀스 다이어그램: 로컬 컨트롤러가 있는 외부 충전 한도
image::part2/images/figure_113.svg[시퀀스 다이어그램: 로컬 컨트롤러를 사용한 외부 충전 제한.]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7 |오류 처리 |n/a
|8 |참고 |n/a
|===

==== K14 - External Charging Limit with Local Controller - Requirements

.K14 - Requirements
[cols="^.^2,<.^5,<.^6",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID         |Precondition         |Requirement definition

|K14.FR.01 |외부 충전 한도/일정이 수신된 경우
  |모든 충전기의 총 부하는 이 주어진 한도를 초과해서는 안 됩니다.
|K14.FR.02 |K14.FR.01 +
  AND +
  충전 한도가 <<limit_change_significance,`LimitChangeSignificance`>> 이상 변경된 경우
    |로컬 컨트롤러는 <<notify_charging_limit_request,NotifyChargingLimitRequest>>를 보내 외부 시스템에서 부과한 새로운 충전 한도/일정을 CSMS에 알려야 합니다.
|K14.FR.03 |외부 충전 한도/일정이 해제된 경우
  |로컬 컨트롤러는 <<cleared_charging_limit_request,ClearedChargingLimitRequest>>를 보내 CSMS에 알려야 합니다.
|K14.FR.04 |K14.FR.03
  |로컬 컨트롤러는 충전기에 <<clear_charging_profile_request,ClearChargingProfileRequest>> 메시지를 보내 충전기의 하드 한도를 지워야 합니다.
|K14.FR.05 |로컬 컨트롤러가 외부 충전 한도/일정을 수신하면
  |충전 프로파일이 변경된 모든 충전기에 <<set_charging_profile_request,SetChargingProfileRequest>>를 보내야 합니다.
|K14.FR.06 |K14.FR.05
  |로컬 컨트롤러는 <<charging_profile_purpose_enum_type,chargingProfilePurpose>>를 <<charging_station_external_constraints,ChargingStationExternalConstraints>>로 설정해서는 안 됩니다.
|===

:sectnums:
[[iso_15118_based_smart_charging]]
=== ISO 15118 based Smart Charging

:sectnums!:
=== K15 - Charging with load leveling based on High Level Communication

.K15 - 고수준 통신을 기반으로 한 부하 평준화로 충전
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|번호 |유형 |설명

|1 |이름 |고수준 통신을 기반으로 한 부하 평준화로 충전.
|2 |ID |K15
|{nbsp} d|_기능 블록_ |K. 스마트 충전
|{nbsp} d|_참조_ |<<iso15118_1,ISO15118-1>> E1 AC 충전(고수준 통신 기반 부하 레벨링) 및 E4 DC 충전(고수준 통신 기반 부하 레벨링).
|3 |목표 |<<iso15118_1,ISO15118-1>>, 사용 사례 목표 E1, 29페이지를 참조하세요.
|4 |설명 |<<iso15118_1,ISO15118-1>>, 사용 사례 설명 E1, 29페이지를 참조하세요.
|{nbsp} d|_Actors_ |EV, 충전기, CSMS.
|5 |통합 시나리오 설명
  |**1.** EV가 충전기에 ChargeParameterDiscoveryReq 메시지를 보냅니다. +
  **2**. 충전기는 <<notify_ev_charging_needs_request,NotifyEVChargingNeedsRequest>> 메시지를 CSMS로 보냅니다. +
  **3**. CSMS는 <<notify_ev_charging_needs_response,NotifyEVChargingNeedsResponse>> 메시지를 충전기로 보냅니다. +
  **4.** CSMS는 <<set_charging_profile_request,SetChargingProfileRequest>> 메시지를 충전기로 보냅니다. +
  **5.** 충전기는 SetChargingProfileResponse 메시지를 CSMS로 보냅니다. +
  **6.** 충전기는 EV에 ChargeParameterDiscoveryRes 메시지를 보내 EV에 응답합니다. +
  **7.** EV는 ChargeProgress=Start로 PowerDeliveryReq 메시지를 충전기로 보냅니다. 이는 EVSE가 출력 전원 콘센트에 전압을 공급하고 EV가 배터리를 재충전하기 시작할 수 있는 시점을 표시합니다. +
  **8.** 접촉기가 닫힙니다. +
  **9.** 트랜잭션은 <<transaction_event_request,TransactionEventRequest>> 메시지로 업데이트됩니다. +
  **10.** PowerdeliveryRes 메시지가 EV로 전송됩니다. +
  **11.** 선택적으로 충전기는 <<notify_ev_charging_schedule_request,NotifyEVChargingScheduleRequest>> 메시지를 CSMS로 전송합니다.
|6 |필수 조건 |충전기와 EV는 모두 ISO 15118을 지원합니다. +
  구성된 TxStartPoint에는 ParkingBayOccupied, EVConnected, Authorized 또는 PowerPathClosed 중 하나 이상이 포함되어야 하므로 EV에서 ChargeParameterDiscoverReq를 보내기 전에 OCPP 트랜잭션이 시작되어 CSMS가 TxProfile 충전 프로파일을 보낼 수 있습니다.
|7 |사후 조건(들) |<<iso15118_1,ISO15118-1>> 참조, 사용 사례 종료 조건 E1, 29페이지.
|===

.시퀀스 다이어그램: 고수즌 통신을 기반으로 한 부하 평준화 충전
image::part2/images/figure_114.svg[시퀀스 다이어그램: 고수즌 통신을 기반으로 한 부하 평준화 충전]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|8 |오류 처리
  |충전기는 SetChargingProfileRequest 메시지의 정보를 사용하여 EV에 대한 ISO 15118 ChargeParameterDiscoveryReq에 대한 응답을 생성해야 합니다. 이 메시지의 시간 초과는 60초입니다. 즉, NotifyEVChargingNeedsRequest를 수신한 후 60초 이내에 SetChargingProfileRequest를 보내야 합니다. 충전기가 SetChargingProfileRequest를 제때 수신하지 못하거나 NotifyEVChargingNeedsResponse가 _status_ = `Processing` 인 경우 충전기는 EVSE의 기능과 일치하는 ChargeParameterDiscoverRes에 일정을 반환합니다. CSMS가 나중에 SetChargingProfileRequest를 보내면 사용 사례 <<k16_renegotiation_initiated_by_csms,K16 - Renegotiation started by CSMS>>에 따라 재협상이 트리거됩니다.
|9 |참고 |Signed SalesTariffs는 현재 지원되지 않습니다. 필요한 경우 <<p01_data_transfer_to_the_charging_station,P01 - Data Transfer to the Charging Station>>을 사용하여 충전기로 보내주세요.
|===

==== K15 - Charging with load leveling based on High Level Communication - Requirements

.K15 - 요구 사항
[cols="^.^2,<.^6,<.^6,<.^4",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID |전제 조건 |요구 사항 정의 |참고

|K15.FR.01 |충전기가 EV에서 충전 요구 사항을 수신하는 경우
  |충전기는 CSMS에 <<notify_ev_charging_needs_request,NotifyEVChargingNeedsRequest>>를 보내야 합니다. |{nbsp}
|K15.FR.02 |K15.FR.01
  |<<notify_ev_charging_needs_request,NotifyEVChargingNeedsRequest>>에 대한 응답으로 CSMS는 <<notify_ev_charging_needs_response,NotifyEVChargingNeedsResponse>>를 보내야 합니다. |{nbsp}
|K15.FR.03 |K15.FR.02
  |CSMS가 충전 일정을 제공할 수 있는 경우 <<notify_ev_charging_needs_response,NotifyEVChargingNeedsResponse>>의 상태 필드를 'Accepted'으로 설정하여 이를 표시해야 합니다. |{nbsp}
|K15.FR.04 |K15.FR.02
|CSMS가 충전 일정을 제공할 수 없는 경우, <<notify_ev_charging_needs_response,NotifyEVChargingNeedsResponse>>의 상태 필드를 'Rejected'으로 설정하여 이를 표시해야 합니다. |{nbsp}
|K15.FR.05 |K15.FR.02
  |CSMS가 충전 일정을 제공할 수 있지만 처리 시간이 필요한 경우, <<notify_ev_charging_needs_response,NotifyEVChargingNeedsResponse>>의 상태 필드를 'Processing'으로 설정하여 이를 표시해야 합니다.
    |충전기는 <<set_charging_profile_request,SetChargingProfileRequest>>를 기다릴 필요가 없습니다. CSMS는 나중에 이를 보내고 사용 사례 K16에 따라 재협상을 트리거합니다.
|K15.FR.06 |{nbsp}
  |<<notify_ev_charging_needs_request,NotifyEVChargingNeedsRequest>>에는 ACChargingParameters 또는 DCChargingParameters가 포함되어야 합니다. |{nbsp}
|K15.FR.07 |K15.FR.03 또는 +
  K15.FR.05
    |CSMS는 <<set_charging_profile_request,SetChargingProfileRequest>>를 _chargingProfilePurpose_ = `TxProfile`, _transactionId_ 및 최대 3개의 _chargingSchedule_ 및 선택적 _salesTariff_ 요소와 함께 보내야 하며, 각각은 <<notify_ev_charging_needs_request,NotifyEVChargingNeedsRequest>>의 _maxScheduleTuples_ 및 장치 모델 변수 `SmartChargingCtrlr.PeriodsPerSchedule` 로 지정된 기간보다 더 많은 기간을 포함하지 않아야 합니다.
      |충전기는 EVSE에 대한 복합 일정을 계산하고(`ChargingStationMaxProfile` 또는 `ChargingStationExternalConstraints` 가 있는 경우 고려) 이를 ISO 15118의 SAScheduleList 형식으로 변환합니다.
|K15.FR.08 |K15.FR.01
  |CSMS는 60초 이내에 <<set_charging_profile_request,SetChargingProfileRequest>>를 충전기로 보내야 합니다.
    |이는 ISO 15118 ChargeParameterDiscoveryReq 시간 초과를 충족하기 위한 것입니다.
|K15.FR.09 |K15.FR.07 +
  AND +
  EV가 충전 프로파일을 반환합니다.
    |충전기는 제공된 충전 프로파일이 CSMS의 ChargingSchedule 경계 내에 있는지 확인해야 합니다.
      |ISO 15118에서 EV는 PowerDeliveryReq의 일부로 충전 프로파일을 보낼 수 있습니다.
|K15.FR.10 |K15.FR.09
  |충전기는 EV 충전 프로파일을 <<notify_ev_charging_schedule_request,NotifyEVChargingScheduleRequest>> 메시지로 CSMS에 전송해야 합니다. |{nbsp}
|K15.FR.11 |K15.FR.10 +
  그리고 +
  EV 충전 프로파일이 CSMS 충전 일정의 한도 내에 있습니다.
    |CSMS는 <<notify_ev_charging_schedule_response,NotifyEVChargingScheduleResponse>>로 충전기에 _status_ `Accepted` 로 응답합니다.
      |참고: 충전기에서 이미 확인했지만 CSMS가 직접 확인합니다.
|K15.FR.12 |K15.FR.10 +
  AND +
  EV 충전 프로파일이 CSMS 충전 일정의 한도 내에 있지 않음
    |CSMS가 <<notify_ev_charging_schedule_response,NotifyEVChargingScheduleResponse>>로 충전기에 _status_ `Rejected` 로 응답합니다. |{nbsp}
|K15.FR.13 |K15.FR.12
  |CSMS가 사용 사례 K16에 따라 새로운 재협상을 시작합니다. |{nbsp}
|K15.FR.14 |K15.FR.11
  |충전기는 실제 복합 일정을 계산할 때 <<notify_ev_charging_schedule_request,NotifyEVChargingScheduleRequest>>의 일정을 고려해야 합니다. |{nbsp}
|K15.FR.15 |K15.FR.01 +
  AND +
  충전기가 오프라인입니다.
    |충전기는 TxDefaultProfile(있는 경우)을 사용하고 복합 일정의 한계 내에서 충전 일정을 생성해야 합니다. |{nbsp}
|K15.FR.16 |K15.FR.07
  |충전기를 구성하여 <<notify_ev_charging_needs_request,NotifyEVChargingNeedsRequest>> 메시지 이전에 idToken이 포함된 TransactionEvent를 보내도록 하는 것이 좋습니다. 이렇게 하면 CSMS가 충전 일정을 생성할 때 사용자를 고려할 수 있습니다. |{nbsp}
|K15.FR.17 |충전기가 트랜잭션이 시작된 직후 <<set_charging_profile_request,SetChargingProfileRequest>>를 수신하고 <<notify_ev_charging_needs_request,NotifyEVChargingNeedsRequest>>를 CSMS로 보내기 전에 수신하는 경우
  |충전기는 <<set_charging_profile_response,SetChargingProfileResponse>>를 _status_ = `Rejected` 로 응답하고 _statusInfo_를 _reasonCode_ = `InvalidMessageSeq` 로 응답해야 합니다.
    |CSMS가 프로파일을 너무 일찍 보냈습니다. CS가 <<notify_ev_charging_needs_request,NotifyEVChargingNeedsRequest>>를 수신하면 다시 충전 프로파일을 보내기만 하면 충전 프로파일을 거부하는 대신 수락해도 문제가 없습니다.
|K15.FR.18 |K15.FR.03 또는 +
  K15.FR.05
    |CSMS는 SetChargingProfileRequest에서 하나의 _chargingSchedule_ 만 사용하는 것이 좋습니다.
      |이렇게 하면 NotifyEVChargingScheduleRequest를 수신하지 않더라도 EV가 어떤 일정을 따를지 의심할 여지가 없습니다.
|K15.FR.19 |K15.FR.07 +
  그리고 +
  EV가 충전 프로파일을 반환하지 않음
    |충전기는 EV가 선택한 일정과 일치하는 CSMS에 NotifyEVChargingScheduleRequest 메시지의 chargingSchedule로 EV 충전 프로파일을 반환하는 것이 좋습니다(예: chargingSchedule.id = SAScheduleTupleId)
      |ISO 15118-2에서 EV 충전 프로파일과 선택한 일정은 PowerDeliveryReq에서 _ChargingProfile_ 과 _SAScheduleTupleId_ 로 반환됩니다.
|===

[[k16_renegotiation_initiated_by_csms]]
=== K16 - Renegotiation initiated by CSMS

.K16 - Renegotiation initiated by CSMS
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|번호 |유형 |설명

|1 |이름 |CSMS에서 재협상 시작
|2 |ID |K16
|{nbsp} d|_기능 블록_ |K. 스마트 충전
|3 |목표 |충전기의 충전 전력 또는 전류 제어
|4 |설명 |CSMS는 EV에서 사용하는 전력 또는 전류에 영향을 미치기 위해 충전기에 SetChargingProfileRequest를 보냅니다. CSMS는 외부 시스템에서 부과할 수 있는 한도 내에 있도록 ChargingSchedule을 계산합니다. +
  **참고:** EV와 충전기 간의 동작에 대한 설명은 정보 제공용일 뿐 OCPP에서 의무화한 것이 아닙니다.
|{nbsp} d|_Actors_ |EV, 충전기, CSMS
|{nbsp} d|_시나리오 설명_
  |**1** CSMS는 충전기에 <<set_charging_profile_request,SetChargingProfileRequest>>를 보냅니다. +
  **2** 충전기는 <<set_charging_profile_response,SetChargingProfileResponse>>로 CSMS에 응답합니다. +
  **3** EV가 다음 CurrentDemandReq(DC의 경우) 또는 ChargingStatusReq(AC의 경우)를 보내면 +
  충전기는 _evseNotification_ = `ReNegotiation` 으로 응답합니다. +
  **4** EV는 _chargeProgress_ = `ReNegotiate` 로 PowerDeliveryReq를 보내 이를 확인합니다. +
  **5** 충전기는 PowerDeliveryRes로 응답합니다. +
  **6** EV는 ChargeParameterDiscoveryReq를 보냅니다. +
  **7** 충전기는 <<set_charging_profile_request,SetChargingProfileRequest>>의 ChargingSchedule 데이터가 포함된 SAScheduleList로 ChargeParameterDiscoveryRes로 응답합니다. +
  **8** EV는 _chargeProgress_ = `Start`(선택적 충전 프로파일 포함)로 PowerDeliveryReq를 보내 이를 확인합니다. +
  **9** 충전기는 PowerDeliveryRes로 응답하고, 재협상 시작 시 충전이 중단된 경우 전력 공급을 재개합니다. +
  **10** EV가 이전 단계에서 충전 프로파일을 제공한 경우 충전기는 <<notify_ev_charging_schedule_request,NotifyEVChargingScheduleRequest>>를 CSMS로 보냅니다.
|5 |필수 조건 |사용 사례 K15에 따라 충전 세션이 시작되었습니다.
|6 |사후 조건 |충전 세션이 새 충전 프로파일을 사용합니다.
|===

.CSMS에서 재협상 시작
image::part2/images/figure_115.svg[CSMS에서 재협상 시작]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7 |비고 |Signed SalesTariffs는 현재 지원되지 않습니다. 필요한 경우 <<p01_data_transfer_to_the_charging_station,P01 - Data Transfer to the Charging Station>>을 사용하여 충전기로 보내주세요.
|===

==== K16 - Renegotiation initiated by CSMS - Requirements

[cols="^.^2,<.^6,<.^6,<.^4",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID |전제 조건 |요구 사항 정의 |참고

|K16.FR.01 |CSMS에서 새 <<set_charging_profile_request,SetChargingProfileRequest>>를 보냅니다.
  |충전기는 <<set_charging_profile_response,SetChargingProfileResponse>>로 _status_ = `Accepted` 로 응답해야 합니다. |{nbsp}
|K16.FR.02 |K16.FR.01
  |충전기는 EV와 일정 재협상을 시작해야 합니다.
    |ISO 15118에서는 CurrentDemandReq(DC의 경우) 또는 ChargingStatusReq(AC의 경우) 메시지에 EVSENotification=`ReNegotiation` 으로 응답하여 이를 수행합니다.
|K16.FR.03 |K16.FR.02
  |충전기는 EV에 ChargingSchedule 데이터를 제공해야 합니다.
    |ISO 15118에서는 ChargeParameterDiscoverRes 메시지에서 이를 수행합니다.
|K16.FR.04 |EV가 충전 프로파일을 반환합니다.
  |충전기는 제공된 충전 프로파일이 CSMS의 ChargingSchedule 경계 내에 있는지 확인해야 합니다.
    |ISO 15118에서는 EV가 PowerDeliveryReq 메시지의 일부로 이를 제공할 수 있습니다.
|K16.FR.05 |K16.FR.04
  |충전기는 EV 충전 프로파일을 <<notify_ev_charging_schedule_request,NotifyEVChargingScheduleRequest>> 메시지로 CSMS에 보내야 합니다. |{nbsp}
|K16.FR.06 |K16.FR.05 +
  AND +
  EV 충전 프로파일이 CSMS ChargingSchedule의 한도 내에 있습니다.
    |CSMS가 <<notify_ev_charging_schedule_response,NotifyEVChargingScheduleResponse>>로 충전기에 _status_ `Accepted` 로 응답합니다.
      |참고: 충전기에서 이미 확인했지만 CSMS가 자체적으로 확인합니다.
|K16.FR.07 |K16.FR.05 +
  AND +
  EV 충전 프로파일이 CSMS 충전 일정의 한도 내에 있지 않음
    |CSMS가 <<notify_ev_charging_schedule_response,NotifyEVChargingScheduleResponse>>로 응답하고 _status_ `Rejected`로 충전기에 응답합니다. |{nbsp}
|K16.FR.08 |K16.FR.07
  |CSMS가 사용 사례 K16에 따라 새로운 재협상을 시작합니다. |{nbsp}
|K16.FR.09 |충전기가 EV로부터 충전 요구를 수신하는 경우
  |충전기는 CSMS에 <<notify_ev_charging_needs_request,NotifyEVChargingNeedsRequest>>를 보내면 안 됩니다.
    |CSMS가 재협상을 시작했고 EV의 초기 충전 요구 사항, EV가 이미 소비한 에너지, CSMS가 충전 프로파일을 업데이트하게 된 모든 정보를 기반으로 새로운 충전 프로파일을 방금 보냈습니다. +
    ISO 15118에서 충전 요구 사항은 ChargeParameter-DiscoveryReq를 통해 전송됩니다.
|K16.FR.10 |K16.FR.04
  |충전기는 실제 복합 일정을 계산할 때 <<notify_ev_charging_schedule_request,NotifyEVChargingScheduleRequest>>의 일정을 고려해야 합니다. |{nbsp}
|K16.FR.11 |K16.FR.02 +
  그리고 +
  새로운 충전 일정의 전류 또는 전력이 실제 전류 또는 전력보다 낮음
    |충전기는 가능한 한 빨리 EV에 새로운 충전 일정과 일치하는 값으로 전류 또는 전력을 낮추도록 요청해야 합니다.
      |ISO 15118에서 이는 CurrentDemandRes(DC의 경우) 또는 ChargingStatusRes(AC의 경우)에서 전달할 수 있습니다.
|K16.FR.12 |K16.FR.09 +
  AND +
  충전기에서 <<notify_ev_charging_needs_request,NotifyEVChargingNeedsRequest>>를 전송합니다.
    |CSMS는 <<set_charging_profile_request,SetChargingProfileRequest>>를 전송해야 합니다.
      |이 상황은 바람직하지 않습니다. 충전 프로파일이 K16.FR.01과 동일할 가능성이 높지만, 충전기가 K16.FR.09를 준수하지 않을 때 견고성을 위해 추가되었습니다.
|K16.FR.13 |EV가 충전 프로파일을 반환하지 않음
  |충전기는 EV가 선택한 일정과 일치하는(즉, chargingSchedule.id = SAScheduleTupleId) CSMS에 대한 NotifyEVChargingScheduleRequest 메시지의 chargingSchedule로 EV 충전 프로파일을 반환하는 것이 좋습니다.
    |ISO 15118-2에서 EV 충전 프로파일과 선택한 일정은 PowerDeliveryReq에서 _ChargingProfile_ 과 _SAScheduleTupleId_ 로 반환됩니다.
|===

=== K17 - Renegotiation initiated by EV

.K17 - EV가 시작한 재협상
[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|번호 |유형 |설명

|1 |이름 |EV가 시작한 재협상.
|2 |ID |K16
|{nbsp} d|_기능 블록_ |K. 스마트 충전
|3 |목표 |EV가 새로운 충전 일정을 요청하도록 합니다.
|4 |설명 |EV가 충전기에 재협상을 원한다는 신호를 보내고 새로운 충전 요구 사항을 제공하며, 충전기는 이를 CSMS로 보냅니다. 이 매개변수와 다른 매개변수를 기반으로 CSMS는 새로운 충전 일정을 계산하고 SetChargingProfileRequest를 통해 충전기로 전송하며, 충전기는 이를 EV에 전달합니다. +
  **참고:** EV와 충전기 간의 동작에 대한 설명은 정보 제공용일 뿐 OCPP에서 의무화한 것이 아닙니다.
|{nbsp} d|_Actors_ |EV, 충전기, CSMS
|{nbsp} d|_시나리오 설명_
  |**1** EV가 충전 요구 사항 매개변수와 함께 ChargeParameterDiscoveryReq를 보내면 충전기는 이 정보를 NotifyEVChargingNeedsRequest에 담아 CSMS로 보냅니다. +
  **2** CSMS가 NotifyEVChargingNeedsResponse로 충전기에 응답합니다. +
  **3** CSMS가 새로운 충전 일정을 계산하여 EV 충전 요구 사항을 수용하려고 하지만 다른 매개변수에서 부과한 일정 경계 내에 여전히 들어맞습니다. +
  **4** CSMS가 새로운 일정과 함께 SetChargingProfileRequest를 충전기로 보냅니다. +
  **5** 충전기가 `Accepted` 상태로 SetChargingProfileResponse로 응답합니다. +
  **6** 충전기가 ChargeParameterDiscoveryRes 메시지로 새로운 충전 일정을 EV로 보냅니다. +
  **7** EV는 _chargeProgress_ = `Start`(선택적 충전 프로파일 포함)로 PowerDeliveryReq를 보내 이를 확인합니다. +
  **8** 충전기는 PowerDeliveryRes로 응답하고, 재협상 시작 시 충전이 중단된 경우 전력 공급을 재개합니다. +
  **9** EV가 이전 단계에서 충전 프로파일을 제공한 경우 충전기는 <<notify_ev_charging_schedule_request,NotifyEVChargingScheduleRequest>>를 CSMS로 보냅니다.
|5 |필수 조건 |사용 사례 K15에 따라 충전 세션이 시작되었습니다.
|6 |사후 조건(들) |충전 세션이 새 충전 프로파일을 사용합니다.
|===

.EV가 시작한 재협상
image::part2/images/figure_116.svg[EV가 시작한 재협상]

[cols="^.^1s,<.^2s,<.^7",%autowidth.stretch,frame=all,grid=all]
|===
|7 |참고 |Signed SalesTariffs는 현재 지원되지 않습니다. 필요한 경우 <<p01_data_transfer_to_the_charging_station,P01 - Data Transfer to the Charging Station>>을 사용하여 충전기로 보내주세요.
|7 |참고 |Signed SalesTariffs는 현재 지원되지 않습니다. 필요한 경우 <<p01_data_transfer_to_the_charging_station,P01 - Data Transfer to the Charging Station>>을 사용하여 충전기로 보내주세요.
|===

==== K17 - Renegotiation initiated by EV - Requirements

.K17 - 요구 사항
[cols="^.^2,<.^6,<.^6,<.^4",%autowidth.stretch,options="header",frame=all,grid=all]
|===
|ID |사전 조건 |요구 사항 정의 |참고

|K17.FR.01 |EV에서 재협상을 트리거하고 새로운 충전 요구 사항을 전송
  |충전기는 CSMS에 <<notify_ev_charging_needs_request,NotifyEVChargingNeedsRequest>>를 전송해야 합니다. |{nbsp}
|K17.FR.02 |K17.FR.01
  |<<notify_ev_charging_needs_request,NotifyEVChargingNeedsRequest>>에 대한 응답으로 CSMS는 <<notify_ev_charging_needs_response,NotifyEVChargingNeedsResponse>>를 보내야 합니다. |{nbsp}
|K17.FR.03 |K17.FR.02
  |CSMS가 충전 일정을 제공할 수 있는 경우 <<notify_ev_charging_needs_response,NotifyEVChargingNeedsResponse>>의 _status_ 필드를 'Accepted'로 설정하여 이를 표시해야 합니다. |{nbsp}
|K17.FR.04 |K17.FR.02
  |CSMS가 충전 일정을 제공할 수 없는 경우, <<notify_ev_charging_needs_response,NotifyEVChargingNeedsResponse>>의 _status_ 필드를 'Rejected'으로 설정하여 이를 표시해야 합니다. |{nbsp}
|K17.FR.05 |K17.FR.02
  |CSMS가 충전 일정을 제공할 수 있지만 처리 시간이 필요한 경우, <<notify_ev_charging_needs_response,NotifyEVChargingNeedsResponse>>의 _status_ 필드를 'Processing'으로 설정하여 이를 표시해야 합니다. |{nbsp}
|K17.FR.06 |{nbsp}
  |<<notify_ev_charging_needs_request,NotifyEVChargingNeedsRequest>>에는 ACChargingParameters 또는 DCChargingParameters가 포함되어야 합니다. |{nbsp}
|K17.FR.07 |K17.FR.03 또는 +
  K17.FR.05
    |CSMS는 <<set_charging_profile_request,SetChargingProfileRequest>>를 _chargingProfilePurpose_ = `TxProfile` 로 보내고 최대 3개의 _chargingSchedule_ 및 선택적 salesTariff 요소를 포함해야 하며, 각각 <<notify_ev_charging_needs_request,NotifyEVChargingNeedsRequest>>의 _maxScheduleTuples_ 및 장치 모델 변수 SmartChargingCtrlr.PeriodsPerSchedule로 지정된 기간보다 더 많은 기간을 포함하지 않아야 합니다. |{nbsp}
|K17.FR.08 |K17.FR.01
  |CSMS는 60초 이내에 충전기에 <<set_charging_profile_request,SetChargingProfileRequest>>를 보내야 합니다.
    |이는 ISO 15118 ChargeParameterDiscoveryReq 시간 초과를 충족하기 위한 것입니다.
|K17.FR.09 |K17.FR.07 +
  AND +
  EV가 충전 프로파일을 반환합니다.
    |충전기는 제공된 충전 프로파일이 CSMS의 ChargingSchedule 경계 내에 있는지 확인해야 합니다.
      |ISO 15118에서 EV는 PowerDeliveryReq의 일부로 충전 프로파일을 보낼 수 있습니다.
|K17.FR.10 |K17.FR.09
  |충전기는 EV 충전 프로파일을 <<notify_ev_charging_schedule_request,NotifyEVChargingScheduleRequest>> 메시지로 CSMS에 보내야 합니다. |{nbsp}
|K17.FR.11 |K17.FR.10 +
  AND +
  EV 충전 프로파일이 CSMS ChargingSchedule의 한도 내에 있습니다.
    |CSMS가 <<notify_ev_charging_schedule_response,NotifyEVChargingScheduleResponse>>로 _status_ `Accepted` 로 충전기에 응답합니다.
      |참고: 충전기에서 이미 확인했지만 CSMS가 직접 확인합니다.
|K17.FR.12 |K17.FR.10
  AND +
  EV 충전 프로파일이 CSMS ChargingSchedule의 한도 내에 없습니다.
    |CSMS가 <<notify_ev_charging_schedule_response,NotifyEVChargingScheduleResponse>>로 _status_ `Rejected` 로 충전기에 응답합니다. |{nbsp}
|K17.FR.13 |K17.FR.12
  |CSMS가 사용 사례 K16에 따라 새로운 재협상을 시작합니다. |{nbsp}
|K17.FR.14 |K17.FR.11
  |충전기는 실제 복합 일정을 계산할 때 <<notify_ev_charging_schedule_request,NotifyEVChargingScheduleRequest>>의 일정을 고려해야 합니다. |{nbsp}
|K17.FR.15 |K17.FR.01 +
  그리고 +
  충전기가 오프라인입니다. |충전기는 TxDefaultProfile(있는 경우)을 사용하고 복합 일정의 한계 내에서 충전 일정을 생성해야 합니다. |{nbsp}
|K17.FR.16 |K17.FR.07 +
  EV가 충전 프로파일을 반환하지 않음
    |충전기는 EV가 선택한 일정과 일치하는 CSMS에 대한 NotifyEVChargingScheduleRequest 메시지의 chargingSchedule로 EV 충전 프로파일을 반환하는 것이 좋습니다(즉, chargingSchedule.id = SAScheduleTupleId)
      |ISO 15118-2에서 EV 충전 프로파일과 선택한 일정은 PowerDeliveryReq에서 _ChargingProfile_ 과 _SAScheduleTupleId_ 로 반환됩니다.
|===
